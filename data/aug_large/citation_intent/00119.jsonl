{"text": "As shown in FIG .4A , each entry in part - of - speech combination table 62 contains an index 64 having one or more associated part - of - speech tags 66 and having an associated , simpler OEM part - of - speech tag 68 used for display to users of the system .", "label": "", "metadata": {}, "score": "36.32483"}
{"text": "13 , in accordance with another aspect of the invention , contain a further nested FOR - LOOP .This FOR - LOOP operates upon each of the morphological transforms listed in the particular paradigm from ' LIST ' that is currently being processed .", "label": "", "metadata": {}, "score": "36.5748"}
{"text": "13 , in accordance with another aspect of the invention , contain a further nested FOR - LOOP .This FOR - LOOP operates upon each of the morphological transforms listed in the particular paradigm from ' LIST ' that is currently being processed .", "label": "", "metadata": {}, "score": "36.5748"}
{"text": "Each morphological transform is formed of a plurality of functional elements .In operation , the morphological file 71 of FIG .4C describes how to produce a morphological transform given a baseform .The morphological transforms identified by columns 75 , 77 and 79 are all similarly structured .", "label": "", "metadata": {}, "score": "38.272182"}
{"text": "The supertags allow the agreement module 57 to quickly identify whether the extracted tokens fail to agree , or whether they may agree .In particular , a supertag is created for each extracted word contained within the identified noun phrase by logically OR'ing together all the agreement tags associated with each identified token in the noun phrase .", "label": "", "metadata": {}, "score": "38.78614"}
{"text": "The supertags allow the agreement module 57 to quickly identify whether the extracted tokens fail to agree , or whether they may agree .In particular , a supertag is created for each extracted word contained within the identified noun phrase by logically OR'ing together all the agreement tags associated with each identified token in the noun phrase .", "label": "", "metadata": {}, "score": "38.78614"}
{"text": "13 .Lines 32 - 35 illustrate a separate modular element for determining an applicable transform based on prefixation .Lines 32 - 35 first identifies whether the current morphological transform has the prefix flag set , as described in the discussion of FIB .", "label": "", "metadata": {}, "score": "38.787624"}
{"text": "13 .Lines 32 - 35 illustrate a separate modular element for determining an applicable transform based on prefixation .Lines 32 - 35 first identifies whether the current morphological transform has the prefix flag set , as described in the discussion of FIB .", "label": "", "metadata": {}, "score": "38.787624"}
{"text": "A computerized data processing method according to claim 25 , further comprising the steps of selecting said candidate token from said set of tokens as a function of a contextual analysis of the lexical and non - lexical characters surrounding a selected character in the parsed stream of text .", "label": "", "metadata": {}, "score": "39.049072"}
{"text": "The steps can be implemented by processor 30 accessing the FIG .3 representative entry of the candidate word and identifying whether the fields 46 , 48 , 50 identify a valid morphological paradigm .Lines 5 - 9 of the pseudocode of FIG .", "label": "", "metadata": {}, "score": "39.053467"}
{"text": "The steps can be implemented by processor 30 accessing the FIG .3 representative entry of the candidate word and identifying whether the fields 46 , 48 , 50 identify a valid morphological paradigm .Lines 5 - 9 of the pseudocode of FIG .", "label": "", "metadata": {}, "score": "39.053467"}
{"text": "The noun - phrase analyzer 13 disambiguates tokens within the stream of natural language text by performing further contextual analysis .In particular , the disambiguator analyzes a window of at most four sequential tokens to disambiguate part - of - speech of a candidate token .", "label": "", "metadata": {}, "score": "39.059914"}
{"text": "The noun - phrase analyzer 13 disambiguates tokens within the stream of natural language text by performing further contextual analysis .In particular , the disambiguator analyzes a window of at most four sequential tokens to disambiguate part - of - speech of a candidate token .", "label": "", "metadata": {}, "score": "39.059914"}
{"text": "The second FOR - LOOP of lines 10 and 53 provide a logical construct for processing each of the paradigms contained in \" LIST \" .Lines 11 and 52 form a third nested FOR - LOOP that processes each candidate word once for each part - of - speech tag of the candidate word ( identified as \" POS tag \" in FIG .", "label": "", "metadata": {}, "score": "39.119762"}
{"text": "The second FOR - LOOP of lines 10 and 53 provide a logical construct for processing each of the paradigms contained in \" LIST \" .Lines 11 and 52 form a third nested FOR - LOOP that processes each candidate word once for each part - of - speech tag of the candidate word ( identified as \" POS tag \" in FIG .", "label": "", "metadata": {}, "score": "39.119762"}
{"text": "The tag typically identifies the additional linguistic processing suited for the selected candidate token .In addition , a plurality of tags can be associated with a plurality of tokens as a function of a candidate token being selected for additional linguistic processing .", "label": "", "metadata": {}, "score": "39.193996"}
{"text": "FIG .14 depicts a processing sequence for the uninflection module 5 for generating inflectional baseforms that begins at step 300 .At step 302 the candidate word for the inflectional analysis is obtained .Preferably , the candidate word is obtained from a stream of natural language text by tokenizer 43 as described in connection with FIG .", "label": "", "metadata": {}, "score": "39.295685"}
{"text": "FIG .14 depicts a processing sequence for the uninflection module 5 for generating inflectional baseforms that begins at step 300 .At step 302 the candidate word for the inflectional analysis is obtained .Preferably , the candidate word is obtained from a stream of natural language text by tokenizer 43 as described in connection with FIG .", "label": "", "metadata": {}, "score": "39.295685"}
{"text": "The parameters associated with each token include the part - of - speech tags , the grammatical features , and the noun - phrase member tags .With this data , processor 30 in digital computer 12 is able to output to display 20 the identified noun phrases contained within the input stream of natural language text .", "label": "", "metadata": {}, "score": "39.318153"}
{"text": "The parameters associated with each token include the part - of - speech tags , the grammatical features , and the noun - phrase member tags .With this data , processor 30 in digital computer 12 is able to output to display 20 the identified noun phrases contained within the input stream of natural language text .", "label": "", "metadata": {}, "score": "39.318153"}
{"text": "A computerized data processing method according to claim 35 , further comprising the step of associating with a plurality of tokens , as a function of said candidate token , a plurality of tags identifying additional linguistic processing for said plurality of tokens .", "label": "", "metadata": {}, "score": "39.70443"}
{"text": "3 - 5 .For example , a representative lexical expression equivalent to the extracted token can be located in the word data table 31 of FIG .2 .As shown in FIG .2-FIG .5 , module 49 can then follow the pointer , contained in bytes 16 - 18 of the representative expression in word table 31 , to an index 64 in the part - of - speech combination table 62 .", "label": "", "metadata": {}, "score": "40.27021"}
{"text": "3 - 5 .For example , a representative lexical expression equivalent to the extracted token can be located in the word data table 31 of FIG .2 .As shown in FIG .2-FIG .5 , module 49 can then follow the pointer , contained in bytes 16 - 18 of the representative expression in word table 31 , to an index 64 in the part - of - speech combination table 62 .", "label": "", "metadata": {}, "score": "40.27021"}
{"text": "In operation , the morphological file 71 of FIG .4C describes how to produce a morphological transform given a baseform .The morphological transforms identified by columns 75 , 77 and 79 are all similarly structured .For example , each transform contains at least two functional elements that indicate one character string to be removed and one character string to be added to a candidate word .", "label": "", "metadata": {}, "score": "40.336716"}
{"text": "The noun - phrase analyzer 13 is a contextual analysis system that identifies noun phrases based on a window of token containing a candidate token and at least one token preceding the candidate token and one token following the candidate token in the stream of text .", "label": "", "metadata": {}, "score": "40.827286"}
{"text": "The noun - phrase analyzer 13 is a contextual analysis system that identifies noun phrases based on a window of token containing a candidate token and at least one token preceding the candidate token and one token following the candidate token in the stream of text .", "label": "", "metadata": {}, "score": "40.827286"}
{"text": "In addition , module 53 marks those tokens forming the noun phrase by tagging tokens contained within the noun phrase .Thus , module 53 of processor 47 identifies those tokens that it determines are members of a noun phrase as either \" the beginning \" , \" the middle \" , or \" the end \" of the noun phrase .", "label": "", "metadata": {}, "score": "40.866093"}
{"text": "In addition , module 53 marks those tokens forming the noun phrase by tagging tokens contained within the noun phrase .Thus , module 53 of processor 47 identifies those tokens that it determines are members of a noun phrase as either \" the beginning \" , \" the middle \" , or \" the end \" of the noun phrase .", "label": "", "metadata": {}, "score": "40.866093"}
{"text": "Typically , the plurality of tags is formed as a function of a selected candidate token .For example , based upon a particular character in the stream of text , a token including the particular character and the surrounding tokens could be identified as potential candidate for additional noun phrase analysis .", "label": "", "metadata": {}, "score": "40.983448"}
{"text": "MORPHOLOGICAL ANALYZER / GENERATOR .FIG .13 illustrates a pseudocode listing for implementing a morphological analyzer / generator 2 .In particular , the morphological analyzer can contain a processor 30 implementing the pseudocode listing of FIG .13 as stored in memory 12 .", "label": "", "metadata": {}, "score": "41.239388"}
{"text": "For example , the processor 30 can compare the suffix of a candidate word with the second finctional element of the selected morphological transform , wherein the second functional element generally denotes the suffix to strip from the candidate word to form an intermediate baseform .", "label": "", "metadata": {}, "score": "41.241108"}
{"text": "As a result , at the end of step 249 each token has a part - of - speech tag or part - of - speech index that in turn refers to either single or multiple part - of - speech tags .", "label": "", "metadata": {}, "score": "41.279896"}
{"text": "As a result , at the end of step 249 each token has a part - of - speech tag or part - of - speech index that in turn refers to either single or multiple part - of - speech tags .", "label": "", "metadata": {}, "score": "41.279896"}
{"text": "Each morphological transform can thus be described as containing a number of functional elements listed in sequence , as shown in FIG .4C.In particular , the first functional element specifies the part - of - speech tag of the baseform of the candidate word , and the second functional element identifies the suffix to strip from the candidate word to form an intermediate baseform .", "label": "", "metadata": {}, "score": "41.33744"}
{"text": "For example , the processor 30 can compare the suffix of a candidate word with the second functional element of the selected morphological transform , wherein the second functional element generally denotes the suffix to strip from the candidate word to form an intermediate baseform .", "label": "", "metadata": {}, "score": "41.452625"}
{"text": "This advantageously allows the databases to change without affecting the source code of the application program interface 11 , the noun - phrase analyzer 13 , or the morphological analyzer / generator 2 .Thus , in effect the source code becomes independent of the language being processed .", "label": "", "metadata": {}, "score": "41.98289"}
{"text": "This advantageously allows the databases to change without affecting the source code of the application program interface 11 , the noun - phrase analyzer 13 , or the morphological analyzer / generator 2 .Thus , in effect the source code becomes independent of the language being processed .", "label": "", "metadata": {}, "score": "41.98289"}
{"text": "Many text processing systems utilize crude affix stripping methods called \" stemmers \" to analyze natural language text .Other more sophisticated , linguistically based morphological systems reduce all word forms to the same constant length character string , which is itself not necessarily a word .", "label": "", "metadata": {}, "score": "42.246666"}
{"text": "Although not shown in FIG .3 , addresses to these additional grammatical features of a word can be stored in a representative entry 33 .The preferred implementation is for the byte values in the 32-byte prefix to be encoded in a compressed form .", "label": "", "metadata": {}, "score": "42.375"}
{"text": "Data .The data consists primarily of three Arabic - English lexicon files : prefixes ( 299 entries ) , suffixes ( 618 entries ) , and stems ( 82,158 entries representing 38,600 lemmas ) .The lexicons are supplemented by three morphological compatibility tables used for controlling prefix - stem combinations ( 1,648 entries ) , stem - suffix combinations ( 1,285 entries ) , and prefix - suffix combinations ( 598 entries ) .", "label": "", "metadata": {}, "score": "42.44922"}
{"text": "The part - of - speech tags of the candidate word ( i.e. \" POS tag \" ) are identified by the POS Combination Index Field 44 of FIG .3 that is associated with the candidate word .In one aspect of the invention , lines 12 - 18 include steps for identifying morphological transforms of the candidate word given a part - of - speech tag for the candidate word and given a morphological paradigm for the candidate word .", "label": "", "metadata": {}, "score": "42.464046"}
{"text": "The part - of - speech tags of the candidate word ( i.e. \" POS tag \" ) are identified by the POS Combination Index Field 44 of FIG .3 that is associated with the candidate word .In one aspect of the invention , lines 12 - 18 include steps for identifying morphological transforms of the candidate word given a part - of - speech tag for the candidate word and given a morphological paradigm for the candidate word .", "label": "", "metadata": {}, "score": "42.464046"}
{"text": "4A-4C , necessary for the implementation of morphological analyzer / generator 2 can also be stored in memory element 12 .Lines 1 and 54 of the pseudocode listing in FIG .13 form a first FOR - LOOP that is operational until the noun form , the verb form , and the adverb / adjective form of the candidate word are each processed .", "label": "", "metadata": {}, "score": "42.678333"}
{"text": "At action box 250 , the grammatical feature identification module 51 of the processor 9 determines the grammatical features for the tokens 21 contained in the token list 17 .The grammatical features for each token can be obtained by identifying a representative entry for the token in the word data table 31 of FIG .", "label": "", "metadata": {}, "score": "42.831413"}
{"text": "13 ) matches the part - of - speech tag of the candidate word .If a match is found , then the morphological transform is marked as a possible morphological transform for the candidate word , and the candidate word can be identified as a baseform .", "label": "", "metadata": {}, "score": "43.09678"}
{"text": "13 ) matches the part - of - speech tag of the candidate word .If a match is found , then the morphological transform is marked as a possible morphological transform for the candidate word , and the candidate word can be identified as a baseform .", "label": "", "metadata": {}, "score": "43.09678"}
{"text": "4B illustrates a Suffix table 70 having a list of suffixes 72 and having a list of POS indexes 74 to the part - of - speech combination table 62 .Thus , each entry in table 70 has a suffix 72 associated with a POS index 74 .", "label": "", "metadata": {}, "score": "43.1418"}
{"text": "At action box 250 , the grammatical feature identification module 51 of the processor 47 determines the grammatical features for the tokens 21 contained in the token list 17 .The grammatical features for each token can be obtained by identifying a representative entry for the token in the word data table 31 of FIG .", "label": "", "metadata": {}, "score": "43.292595"}
{"text": "Next , Database block is accessed in order to initialize a language database .The language databases provide linguistic information for processing text in a particular language and are used by the noun - phrase analyzer 13 and the morphological analyzer / generator 2 .", "label": "", "metadata": {}, "score": "43.34723"}
{"text": "FIG .13 illustrates a pseudocode listing for implementing a morphological analyzer / generator 2 .In particular , the morphological analyzer can contain a processor 30 implementing the pseudocode listing of FIG .13 as stored in memory 12 .Additional tables , as illustrated in FIG .", "label": "", "metadata": {}, "score": "43.431717"}
{"text": "This morphological analyzer is written in Haskell , while the interfaces in Perl .ElixirFM is inspired by the methodology of functional morphology ( Forsberg and Ranta [ 7 ] ) and initially relied on the reprocessed Buckwalter lexicon as discussed by Buckwalter [ 8 ] .", "label": "", "metadata": {}, "score": "43.54447"}
{"text": "A computerized data processing method according to claim 25 , wherein said selecting step further comprises the steps of . comparing a selected character in the parsed stream of text with entries in a character table , and . associating a first tag with a first token located proximal to said selected character , when said selected character has an equivalent entry in the character table .", "label": "", "metadata": {}, "score": "43.815388"}
{"text": "3 illustrates a word data table 31 used in conjunction with the multilingual text processor 10 .Word data table 31 includes digital codings representative of a list of expressions labeled Exp .N 1 through Exp .N m .The word data table acts as a dictionary of expressions , wherein each expression contains a pointer to an entry , such as the representative entry 33 .", "label": "", "metadata": {}, "score": "43.82611"}
{"text": "3 under the Is Derivation Field 38 .Morphological file 71 of FIG .4C also illustrates the use of portmanteau paradigms .Portmanteau paradigms provide a structure capable of mapping the morphological changes associated with words having complicated morphological patterns .", "label": "", "metadata": {}, "score": "43.94966"}
{"text": "3 under the Is Derivation Field 38 .Morphological file 71 of FIG .4C also illustrates the use of portmanteau paradigms .Portmanteau paradigms provide a structure capable of mapping the morphological changes associated with words having complicated morphological patterns .", "label": "", "metadata": {}, "score": "43.94966"}
{"text": "A computerized data processing method according to claim 30 , further comprising the steps of . comparing a selected non - lexical character with entries in the character table , and . associating said first tag with a token preceding said selected non - lexical character , when said selected non - lexical character has an equivalent entry in the character table .", "label": "", "metadata": {}, "score": "44.13823"}
{"text": "Lines 1 and 54 of the pseudocode listing in FIG .13 form a first FOR - LOOP that is operational until the noun form , the verb form , and the adverb / adjective form of the candidate word are each processed .", "label": "", "metadata": {}, "score": "44.236378"}
{"text": "4A. Similarly , the word in the stream of text having a suffix am ( as in m'am ) can be associated with a part - of - speech tag of NN through tables 62 and 70 .FIG .4C illustrates an exemplary morphological file 71 where each horizontal line shown in the morphological file 71 is a separate morphological paradigm having one or more morphological transforms .", "label": "", "metadata": {}, "score": "44.350098"}
{"text": "For example , expression N 2 in data table 31 points to a representative entry 33 having a noun inflection pattern 46 , a verb inflection pattern 48 , and an adjective / adverb inflection pattern 50 .In addition , the patterns 46 , 48 , and 50 each point to a paradigm in a morphological file 71 , as illustrated in FIG .", "label": "", "metadata": {}, "score": "44.422035"}
{"text": "For example , expression N 2 in data table 31 points to a representative entry 33 having a noun inflection pattern 46 , a verb inflection pattern 48 , and an adjective / adverb inflection pattern 50 .In addition , the patterns 46 , 48 , and 50 each point to a paradigm in a morphological file 71 , as illustrated in FIG .", "label": "", "metadata": {}, "score": "44.422035"}
{"text": "Each of the functional elements , i.e. , App , Database , Word , and Buffer , contained in interface 11 have associated data structures used to pass information to the noun - phrase analyzer 13 , the morphological analyzer / generator 2 , and the tokenizer 1 , before processing .", "label": "", "metadata": {}, "score": "44.43957"}
{"text": "The uniformity in the actions of processor 30 , regardless of the transform being considered , allows for quick and easy processing .As shown in FIG .4C , every morphological transform identified in columns 75 , 77 and 79 is structured as follows : . second character string to add to the candidate word -- part - of - speech tag of morphological transform .", "label": "", "metadata": {}, "score": "44.50722"}
{"text": "Thus , all words contained within the word data table are associated with one or more part - of - speech tag 66 .If the part - of - speech tag entry 66 includes multiple part - of - speech tags , the most probable tag is the first tag in the entry 66 .", "label": "", "metadata": {}, "score": "44.56987"}
{"text": "Thus , all words contained within the word data table are associated with one or more part - of - speech tag 66 .If the part - of - speech tag entry 66 includes multiple part - of - speech tags , the most probable tag is the first tag in the entry 66 .", "label": "", "metadata": {}, "score": "44.56987"}
{"text": "Unfortunately , this method remains very limited to this type of challenges .Consequently , they do not give good results .A second method of representation , which is widely used , is offered by the artificial intelligence .Accordingly , a morphological analyzer serves as an intelligent system able to infer the morphological nature of the analysed sentence from a certain knowledge - base which consists of data and morphological rules as discussed by Shaalan [ 11 ] .", "label": "", "metadata": {}, "score": "44.60927"}
{"text": "4A , each entry in part - of - speech combination table 62 contains an index 64 having one or more associated part - of - speech tags 66 and having an associated , simpler OEM part - of - speech tag 68 used for display to users of the system .", "label": "", "metadata": {}, "score": "44.640305"}
{"text": "FIG .18 is a detailed block diagram of the tokenizer shown in FIG .1 . DETAILED DESCRIPTION OF THE DRAWINGS .FIG .1 illustrates a multilingual text processor 10 in accordance with the invention .The text processor 10 includes a digital computer 12 , an external memory 14 , a source of text 16 , a keyboard 18 , a display 20 , an application program interface 11 , a tokenizer 1 , a morphological analyzer / generator 2 , and a noun - phrase analyzer 13 .", "label": "", "metadata": {}, "score": "44.7218"}
{"text": "If a match is found for the suffix of the extracted word , then the word can be associated with a part - of - speech tag 66 in part - of - speech table 62 through POS index 74 .For example , if a word in the stream of text contains a suffix , le ( as in o'le ) , that word can be identified in table 70 and be associated with a part - of - speech index \" 001 \" .", "label": "", "metadata": {}, "score": "44.725266"}
{"text": "If a match is found for the suffix of the extracted word , then the word can be associated with a part - of - speech tag 66 in part - of - speech table 62 through POS index 74 .For example , if a word in the stream of text contains a suffix , le ( as in o'le ) , that word can be identified in table 70 and be associated with a part - of - speech index \" 001 \" .", "label": "", "metadata": {}, "score": "44.725266"}
{"text": "3 representative entry 33 associated with the candidate word .The representative entry 33 includes a noun pattern field 46 , a verb pattern field 48 , and an adjective / adverb pattern field 50 .Each of the fields ( e.g. , 46 , 48 , and 50 ) identifies a particular morphological transform in FIG .", "label": "", "metadata": {}, "score": "44.822227"}
{"text": "3 representative entry 33 associated with the candidate word .The representative entry 33 includes a noun pattern field 46 , a verb pattern field 48 , and an adjective / adverb pattern field 50 .Each of the fields ( e.g. , 46 , 48 , and 50 ) identifies a particular morphological transform in FIG .", "label": "", "metadata": {}, "score": "44.822227"}
{"text": "6 , in the form of a text stream consisting of alternating lexical and non - lexical matter ; accordingly , lexical tokens are separated by non - lexical matter .Lexical matter can be broadly defined as information that can be found in a lexicon or dictionary , and is relevant for Information Retrieval Processes .", "label": "", "metadata": {}, "score": "44.920094"}
{"text": "Alternatively , the candidate token can be selected based upon a contextual analysis .For instance , the lexical and non - lexical characters surrounding a selected character in the stream of text to determine whether a token located proximal to the selected character is suitable for additional linguistic processing .", "label": "", "metadata": {}, "score": "44.93457"}
{"text": "The index 64 allows module 49 to access a field 66 containing one or more part - of - speech tags .The part - of - speech identification module 49 can then retrieve these part - of - speech tags or store the index to the part - of - speech tags with the extracted token .", "label": "", "metadata": {}, "score": "44.96881"}
{"text": "The index 64 allows module 49 to access a field 66 containing one or more part - of - speech tags .The part - of - speech identification module 49 can then retrieve these part - of - speech tags or store the index to the part - of - speech tags with the extracted token .", "label": "", "metadata": {}, "score": "44.96881"}
{"text": "The attributes associated with each token are identified by the pAttrib flag discussed above .One sub - group of attributes identify the lexical attributes of the token .In particular , this sub - groups includes the internal character attribute , the special processing attribute , the end of sentence attribute , and the noun phrase attribute .", "label": "", "metadata": {}, "score": "45.076096"}
{"text": "In operation , module 53 in conjunction with processor 47 applies each rule in Table I to each token extracted from the stream of natural language text .These rules allow module 53 to identify those tokens which are members of a noun phrase , and the relative position of each token in the noun phrase .", "label": "", "metadata": {}, "score": "45.46927"}
{"text": "The Compound Info Field 54 indexes another lookup table identifying rules regarding the compounding characteristics of the word .The lookup table contains fields , including a left - most compound component , a right - most compound component , that identify possible positions where the word can be used as a component in a compound word .", "label": "", "metadata": {}, "score": "45.498245"}
{"text": "The Compound Info Field 54 indexes another lookup table identifying rules regarding the compounding characteristics of the word .The lookup table contains fields , including a left - most compound component , a right - most compound component , that identify possible positions where the word can be used as a component in a compound word .", "label": "", "metadata": {}, "score": "45.498245"}
{"text": "In accordance with another aspect , a disambiguation rule is triggered and the primary part - of - speech tag of the ambiguous token is coerced into a new part - of - speech tag , not necessarily found amongst the secondary part - of - speech tags .", "label": "", "metadata": {}, "score": "45.574966"}
{"text": "In accordance with another aspect , a disambiguation rule is triggered and the primary part - of - speech tag of the ambiguous token is coerced into a new part - of - speech tag , not necessarily found amongst the secondary part - of - speech tags .", "label": "", "metadata": {}, "score": "45.574966"}
{"text": "FIG .4B illustrates a Suffix table 70 having a list of suffixes 72 and having a list of POS indexes 74 to the part - of - speech combination table 62 .Thus , each entry in table 70 has a suffix 72 associated with a POS index 74 .", "label": "", "metadata": {}, "score": "45.677677"}
{"text": "For instance , the matching step can require that the baseform part - of - speech tag associated with a particular morphological pattern match the part - of - speech of the portmanteau paradigm currently under consideration .Further aspects of the invention include systems for morphologically transforming a candidate word by altering character strings located at any position within the candidate word .", "label": "", "metadata": {}, "score": "45.72568"}
{"text": "Thus , for example , a set of four rules in pseudocode for identifying noun phrase is set forth in Table I below .TABLE I _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 1 If the token is a member of Noun Phrase Tags 2 start to form a Noun Phrase .", "label": "", "metadata": {}, "score": "45.823494"}
{"text": "Thus , both the first and second expression in the stream of text become associated with the part - of - speech tag of NN .FIG .6 shows a block diagram of a noun - phrase analyzer 13 for identifying noun phrases contained within a stream of natural language text .", "label": "", "metadata": {}, "score": "45.98146"}
{"text": "The other grammar ( atbP3FactoredBuckwalter.ser.gz or atb3FactoredBuckwalter.ser.gz ) is trained on a decimation of the ATBp3 treebank data .( That is , heading sentence - by - sentence through the trees , you put 8 sentences in training , 1 in development , and then 1 in test , and then repeat . )", "label": "", "metadata": {}, "score": "46.10294"}
{"text": "For example , new tables can be easily downloaded into external memory 14 or memory 22 of the noun - phrase system without changing any other sections of the multilingual text processor 10 .In accordance with the suffix - matching aspect of the invention , the part - of - speech tag of a token can be determined using the tables shown in FIGS .", "label": "", "metadata": {}, "score": "46.22716"}
{"text": "For example , new tables can be easily downloaded into external memory 14 or memory 22 of the noun - phrase system without changing any other sections of the multilingual text processor 10 .In accordance with the suffix - matching aspect of the invention , the part - of - speech tag of a token can be determined using the tables shown in FIGS .", "label": "", "metadata": {}, "score": "46.22716"}
{"text": "An apparatus for generating morphologically related forms of a candidate word , said apparatus comprising : .A ) a digital memory element , including .a first addressable table having a list of lexical expressions , .a second addressable table having a list of paradigms , each paradigm having at least one morphological transform that includes at least a first morphological pattern and a second morphological pattern , and .", "label": "", "metadata": {}, "score": "46.265907"}
{"text": "Thus , for example , a set of four rules in pseudocode for identifying noun phrase is set forth in Table I below ._ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ .", "label": "", "metadata": {}, "score": "46.327248"}
{"text": "LINGUIST List 13.2968 .Fri Nov 15 2002 .Software : New LDC Publications .Directory .The Buckwalter Arabic Morphological Analyzer Version 1.0 was created by Tim Buckwalter at Qamus for POS - tagging Arabic text .The analyzer consists primarily of three Arabic - English lexicon files : prefixes , suffixes , and stems .", "label": "", "metadata": {}, "score": "46.481323"}
{"text": "1 further illustrates a morphological analyzer / generator 2 that includes an inflection module 4 , an uninflection ( inflection reduction ) module 5 , a derivation expansion module 6 , and an underivation ( derivation reduction ) module 7 .The inflection module 4 and the uninflection module 5 contain structural features that allow the morphological analyzer / generator 2 to produce all inflected forms of a word given its baseform and to produce all baseforms of a word given an inflection .", "label": "", "metadata": {}, "score": "46.711063"}
{"text": "1 further illustrates a morphological analyzer / generator 2 that includes an inflection module 4 , an uninflection ( inflection reduction ) module 5 , a derivation expansion module 6 , and an underivation ( derivation reduction ) module 7 .The inflection module 4 and the uninflection module 5 contain structural features that allow the morphological analyzer / generator 2 to produce all inflected forms of a word given its baseform and to produce all baseforms of a word given an inflection .", "label": "", "metadata": {}, "score": "46.711063"}
{"text": "The other part - of - speech tags that follow the primary part - of - speech tag in column 66 of table 62 are called the secondary part - of - speech tags .The secondary part - of - speech tags are so named because they have a lower probability of occurrence than the primary part - of - speech tag .", "label": "", "metadata": {}, "score": "46.75614"}
{"text": "The other part - of - speech tags that follow the primary part - of - speech tag in column 66 of table 62 are called the secondary part - of - speech tags .The secondary part - of - speech tags are so named because they have a lower probability of occurrence than the primary part - of - speech tag .", "label": "", "metadata": {}, "score": "46.75614"}
{"text": "A computerized data processing method according to claim 37 , further comprising the step of merging said candidate token with another token in the stream of text .A computerized data processing method according to claim 35 , further comprising the steps of . storing in a first location of a memory element attributes of said candidate token , said attributes identifying the additional linguistic processing suitable for said candidate token , and . causing the tag to point to the first location .", "label": "", "metadata": {}, "score": "46.800507"}
{"text": "13 provides a system capable of morphologically transforming words found within natural language text .For example , the multilingual text processor 10 of FIG .1 can extract the candidate word drinks from a stream of text and forward the candidate word to analyzer / generator 2 through interface 11 .", "label": "", "metadata": {}, "score": "47.078403"}
{"text": "13 provides a system capable of morphologically transforming words found within natural language text .For example , the multilingual text processor 10 of FIG .1 can extract the candidate word drinks from a stream of text and forward the candidate word to analyzer / generator 2 through interface 11 .", "label": "", "metadata": {}, "score": "47.078403"}
{"text": "These rules allow module 53 to identify those tokens which are members of a noun phrase , and the relative position of each token in the noun phrase .The rules illustrated in Table I are not language - specific .However , other tables exist which contain language - specific rules for identifying noun phrases .", "label": "", "metadata": {}, "score": "47.177437"}
{"text": "As far as we are aware , ATB tokenization has only an extensional definition ; it is n't written down anywhere .Segmentation is done based on the morphological analyses generated by the Buckwalter analyzer .The segmentation can be characterized thus : .", "label": "", "metadata": {}, "score": "47.201366"}
{"text": "This process is implemented by removing a first character string from the candidate word and adding a second character string to the candidate word in accordance with the derivational transform .At box 382 , the newly transformed word is marked as a derivational root .", "label": "", "metadata": {}, "score": "47.236618"}
{"text": "This process is implemented by removing a first character string from the candidate word and adding a second character string to the candidate word in accordance with the derivational transform .At box 382 , the newly transformed word is marked as a derivational root .", "label": "", "metadata": {}, "score": "47.236618"}
{"text": "4C.In particular , the first functional element specifies the part - of - speech tag of the baseform of the candidate word , and the second functional element identifies the suffix to strip from the candidate word to form an intermediate baseform .", "label": "", "metadata": {}, "score": "47.40318"}
{"text": "The prefix table can be identified through the representative word entry 33 for the candidate word .The prefix table will provide a list of baseform and inflection prefix pairs .To handle prefixation , the processor 30 will locate the longest matching prefix from one column in the prefix table , remove it , and replace it with the prefix from the other column .", "label": "", "metadata": {}, "score": "47.469887"}
{"text": "The prefix table can be identified through the representative word entry 33 for the candidate word .The prefix table will provide a list of baseform and inflection prefix pairs .To handle prefixation , the processor 30 will locate the longest matching prefix from one column in the prefix table , remove it , and replace it with the prefix from the other column .", "label": "", "metadata": {}, "score": "47.469887"}
{"text": "The next step was the actual design of a comprehensive model that best represented all of the lexicons in detail .A large panel of 60 experts contributed a wide range of requirements for LMF that covered many types of NLP lexicons .", "label": "", "metadata": {}, "score": "47.662697"}
{"text": "For example , module 49 at processor 47 can identify a representative suffix consisting of the last end characters of the extracted token in suffix table 70 of FIG .4B. Once a matching suffix is identified in suffix table 70 , module 49 can follow the pointer in column 74 to an index 64 in part - of - speech combination table 62 .", "label": "", "metadata": {}, "score": "47.68845"}
{"text": "For example , module 49 at processor 47 can identify a representative suffix consisting of the last end characters of the extracted token in suffix table 70 of FIG .4B. Once a matching suffix is identified in suffix table 70 , module 49 can follow the pointer in column 74 to an index 64 in part - of - speech combination table 62 .", "label": "", "metadata": {}, "score": "47.68845"}
{"text": "4B illustrates a suffix table for referencing entries in the part - of - speech combination table of FIG .4A ; .FIG .4C illustrates a morphological pattern file referenced by the word data table of FIG .3 ; .", "label": "", "metadata": {}, "score": "47.712055"}
{"text": "Module 49 at processor 47 can then retrieve these part - of - speech tags or store the index to the part - of - speech tags with the extracted token .This table - driven approach for identifying the part - of - speech tags of extracted words advantageously provides a fast and efficient way of identifying and associating parts - of - speech with each extracted word .", "label": "", "metadata": {}, "score": "47.742516"}
{"text": "Module 49 at processor 47 can then retrieve these part - of - speech tags or store the index to the part - of - speech tags with the extracted token .This table - driven approach for identifying the part - of - speech tags of extracted words advantageously provides a fast and efficient way of identifying and associating parts - of - speech with each extracted word .", "label": "", "metadata": {}, "score": "47.742516"}
{"text": "In particular , as illustrated by pseudocode lines 28 - 31 , processor 30 identifies an appropriate morphological transform based upon whether a parameter of the candidate word matches a morphological pattern contained within a selected morphological transform .For instance , line 28 of the pseudocode determines whether the part - of - speech tag of the candidate word matches the part - of - speech tag of the morphological transform .", "label": "", "metadata": {}, "score": "47.776096"}
{"text": "A method in accordance with claim 21 , wherein said step of forming an intermediate baseform further comprises stripping a prefix character from the front of the candidate word .A method in accordance with claim 18 , wherein said derivational pattern matching step further comprises identifying a derivational pattern that matches an infix pattern in the candidate word .", "label": "", "metadata": {}, "score": "47.805717"}
{"text": "FIG .4C illustrates a morphological pattern file referenced by the word data table of FIG .3 ; .FIG .5 illustrates possible associations between the tables of FIG .3 , FIG .4A , and FIG .4B ; .", "label": "", "metadata": {}, "score": "47.888935"}
{"text": "Various word data tables exist , each being representative of either different languages , dialects , technical language fields , or any subgroup of lexical expressions that can be processed by text processor 30 .The word data table 31 can be an addressable table , such as an 11 byte RAM table stored in a portion of either the external memory 14 or in the memory 12 .", "label": "", "metadata": {}, "score": "48.14199"}
{"text": "Their segmenter marks proclitics and enclitics with ' # ' and ' + ' .These need to be removed for parsing , but we do provide an escaper which does this . ]Two of the 3 grammars ( arabicFactored.ser.gz and arabicFactoredBuckwalter.ser.gz ) are trained on the training data of the \" Mona Diab \" ( a.k.a . \"", "label": "", "metadata": {}, "score": "48.322216"}
{"text": "The morphological extension model allows representing the morphological information of lexicons .They defined two strategies to describe the morphology of a word .The first one is to represent explicitly all inflected forms , and the second strategy is to use an inflectional paradigm as discussed by Francopoulo and George [ 13 ] .", "label": "", "metadata": {}, "score": "48.49642"}
{"text": "An apparatus according to claim 32 wherein the second addressable table includes part - of - speech tags associated with each transform and the selected morphological pattern is the part - of - speech tag associated with each transform , the second processing means further comprising : . means for identifying a part - of - speech tag of the candidate word , and .", "label": "", "metadata": {}, "score": "48.502625"}
{"text": "The Restricted / Word - Frequency Field 40 is used to store the word - frequency information about words in the word data table .The POS Combination Index Field 44 stores an index into the part - of - speech combination table 62 , as illustrated in FIG .", "label": "", "metadata": {}, "score": "48.522243"}
{"text": "The Restricted / Word - Frequency Field 40 is used to store the word - frequency information about words in the word data table .The POS Combination Index Field 44 stores an index into the part - of - speech combination table 62 , as illustrated in FIG .", "label": "", "metadata": {}, "score": "48.522243"}
{"text": "In accordance with another embodiment of the invention , as shown in pseudocode lines 28 - 29 of FIG .13 , the processor 30 can identify an appropriate morphological transform based upon various parameter of the candidate word matching various morphological patterns contained within a selected morphological transform .", "label": "", "metadata": {}, "score": "48.610558"}
{"text": "In accordance with another embodiment of the invention , as shown in pseudocode lines 28 - 29 of FIG .13 , the processor 30 can identify an appropriate morphological transform based upon various parameter of the candidate word matching various morphological patterns contained within a selected morphological transform .", "label": "", "metadata": {}, "score": "48.610558"}
{"text": "In particular , as illustrated by pseudocode lines 28 - 31 , processor 30 identifies an appropriate morphological transform based upon whether a parameter of the candidate word matches a morphological pattern contained within a selected morphological transform , .For instance , line 28 of the pseudocode determines whether the part - of - speech tag of the candidate word matches the part - of - speech tag of the morphological transform .", "label": "", "metadata": {}, "score": "48.666122"}
{"text": "13 contains pseudocode for the morphological analyzer of FIG .1 ; .FIG .14 is a flow chart for the uninflection ( inflection reduction ) module of FIG .1 ; .FIG .15 is a flow chart for the inflection expansion module of FIG .", "label": "", "metadata": {}, "score": "48.77175"}
{"text": "At action box 249 , the part - of - speech identification module 49 of processor 47 determines the part - of - speech tags for tokens extracted from the stream of text .The part - of - speech tag for each token can be determined by various approaches , including : table - driven , suffix - matching , and default tagging methods .", "label": "", "metadata": {}, "score": "48.875267"}
{"text": "At action box 249 , the part - of - speech identification module 49 of processor 47 determines the part - of - speech tags for tokens extracted from the stream of text .The part - of - speech tag for each token can be determined by various approaches , including : table - driven , suffix - matching , and default tagging methods .", "label": "", "metadata": {}, "score": "48.875267"}
{"text": "In the above example , we have two morphological rules ; each one generates a morphological automaton .We used the union operation to associate the first automaton which represents the rule identified by \" rule_1 \" with the second automaton which represents the rule identified by \" rule_2 \" .", "label": "", "metadata": {}, "score": "48.937523"}
{"text": "3-FIG .5 , the disambiguation tables can differ from language to language .Advantageously , the tables can be added to the system 10 or removed from the system 10 to accommodate various languages without modifying the source code or hardware utilized in constructing the multilingual text processor 10 in accordance with the invention .", "label": "", "metadata": {}, "score": "49.035515"}
{"text": "3-FIG .5 , the disambiguation tables can differ from language to language .Advantageously , the tables can be added to the system 10 or removed from the system 10 to accommodate various languages without modifying the source code or hardware utilized in constructing the multilingual text processor 10 in accordance with the invention .", "label": "", "metadata": {}, "score": "49.035515"}
{"text": "4C illustrates an exemplary morphological file 71 where each horizontal line shown in the morphological file 71 is a separate morphological paradigm having one or more morphological transforms .Vertical column 73 identifies the numbering of the morphological paradigms , and columns 75 , 77 , and 79 identify vertical columns containing different morphological transforms associated with any particular morphological paradigm .", "label": "", "metadata": {}, "score": "49.072582"}
{"text": "In the example above , the left - most compound component Versicherung has a Link Field of 1 since the single character s is used as its compound link .The Field of Interest Field 60 describes the topic or domain of the given entry .", "label": "", "metadata": {}, "score": "49.072605"}
{"text": "In the example above , the left - most compound component Versicherung has a Link Field of 1 since the single character s is used as its compound link .The Field of Interest Field 60 describes the topic or domain of the given entry .", "label": "", "metadata": {}, "score": "49.072605"}
{"text": "The stream of natural language text is obtained from text source 16 through the application program interface 11 .Systems capable of removing and identifying white - space delimited strings are known in the art and can be used herein as part of the noun - phrase analyzer 13 .", "label": "", "metadata": {}, "score": "49.095566"}
{"text": "The stream of natural language text is obtained from text source 16 through the application program interface 11 .Systems capable of removing and identifying white - space delimited strings are known in the art and can be used herein as part of the noun - phrase analyzer 13 .", "label": "", "metadata": {}, "score": "49.095566"}
{"text": "B ) a digital data processing element coupled with said digital memory element , said digital data processor including .first processing means for identifying a first paradigm for the candidate word by locating a lexical expression representative of the candidate word in said first addressable table , . second processing means for matching a first morphological transform in the first paradigm with the candidate word , . third processing means for forming an intermediate baseform by stripping a first character string from the candidate word , the first character string being defined by the first morphological pattern included with the matched transform , and .", "label": "", "metadata": {}, "score": "49.0987"}
{"text": "Input / Output controllers are known in the art , and frequently are an integral part of standard digital computers sold in the market today .Application Program Interface 11 includes a set of closely related finctions , data types , and operations used in interfacing the computer 12 with the noun - phrase analyzer 13 and with the morphological analyzer / generator 2 .", "label": "", "metadata": {}, "score": "49.153297"}
{"text": "FIG .12 illustrates an example of noun - phrase analysis in accordance with the invention ; .FIG .13 contains pseudocode for the morphological analyzer of FIG .1 ; .FIG .14 is a flow chart for the uninflection ( inflection reduction ) module of FIG .", "label": "", "metadata": {}, "score": "49.157837"}
{"text": "Pictorially , given a series of tokens with their associated agreement tags as shown below , where all tokens shown are valid candidates for being in the noun phrase , it would be possible to form a noun phrase that started with the token i-2 !", "label": "", "metadata": {}, "score": "49.199"}
{"text": "Pictorially , given a series of tokens with their associated agreement tags as shown below , where all tokens shown are valid candidates for being in the noun phrase , it would be possible to form a noun phrase that started with the token i-2 !", "label": "", "metadata": {}, "score": "49.199"}
{"text": "The software modules further include software elements , alternatively called \" lexicon modules \" , \" dictionaries \" , or \" databases \" , that contain words and related linguistic knowledge for understanding and representing natural language text .The processing module can contain a plurality of analyzing modules .", "label": "", "metadata": {}, "score": "49.23439"}
{"text": "In particular , these steps form a variable called \" LIST \" that identifies the locations of paradigms . \" LIST \" can include one location in column 73 of FIG .4C , or \" LIST \" can include a portmanteau rule identifying a plurality of locations in column 73 .", "label": "", "metadata": {}, "score": "49.316696"}
{"text": "In particular , these steps form a variable called \" LIST \" that identifies the locations of paradigms . \" LIST \" can include one location in column 73 of FIG .4C , or \" LIST \" can include a portmanteau rule identifying a plurality of locations in column 73 .", "label": "", "metadata": {}, "score": "49.316696"}
{"text": "Other aspects of the tokenizer provide for an associative processing element that associates a tag with the selected candidate token .The associated tag is used to identify additional linguistic processes applicable to the selected candidate token .The applicable processes can be stored in a memory element that is located using the tag .", "label": "", "metadata": {}, "score": "49.356506"}
{"text": "Other languages fall within this range .The Noun Inflection Pattern Field 46 , the Verb Inflection Pattern Field 48 , and the Adjective / Adverb Inflection Pattern Field 50 give the respective pattern numbers used in inflecting or uninflecting noun , verb , and adjective / adverb forms .", "label": "", "metadata": {}, "score": "49.35847"}
{"text": "FIGS .4A , 4B , and 4C illustrate other tables used by the multilingual text processor and stored in portions of either external memory 14 or internal memory 22 .These tables can be modified according to particular languages , such that the tables can provide linguistic information for processing text in a particular language .", "label": "", "metadata": {}, "score": "49.36237"}
{"text": "Further in accordance with the invention , the character analyzer 440 scans the stream of text for selected characters and identifies tokens having the selected characters as candidate tokens for additional linguistic processing .The character analyzer 440 utilizes a comparator and an associator for achieving this analysis .", "label": "", "metadata": {}, "score": "49.409027"}
{"text": "FIG .3 illustrates a word data table 31 used in conjunction with the multilingual text processor 10 .Word data table 31 includes digital codings representative of a list of expressions labeled Exp .N 1 through Exp .N m .", "label": "", "metadata": {}, "score": "49.553223"}
{"text": "Steps 124 - 132 are equivalent to steps 98 - 106 .For instance , at steps 124 - 132 the tokenizer identifies patterns in the stream of text and modifies tokens and token attributes in view of the identified patterns .", "label": "", "metadata": {}, "score": "49.672417"}
{"text": "In particular , App Block preferably processes one word at a time when the morphological analyzer / generator 2 is called and App Block preferably processes an entire buffer of text when noun - phrase analyzer 13 is called .Next , Database block is accessed in order to initialize a language database .", "label": "", "metadata": {}, "score": "49.684868"}
{"text": "These comparison steps indicate that only the second inflectional transform matched the noun plural part - of - speech of the candidate word , and that therefore only the second inflectional transform contained within the noun paradigm is applied .Analyzer / generator 2 then continues to process the candidate word by applying the inflectional transforms contained within the identified verb paradigm and the identified adjective / adverb paradigm .", "label": "", "metadata": {}, "score": "49.75316"}
{"text": "These comparison steps indicate that only the second inflectional transform matched the noun plural part - of - speech of the candidate word , and that therefore only the second inflectional transform contained within the noun paradigm is applied .Analyzer / generator 2 then continues to process the candidate word by applying the inflectional transforms contained within the identified verb paradigm and the identified adjective / adverb paradigm .", "label": "", "metadata": {}, "score": "49.75316"}
{"text": "Entry 33 also contains a column , labeled item 37 , that identifies which bytes , out of a possible 32-byte prefix position , identify a particular characteristic of the word .Characteristics of a word stored in representative entry 33 include the part - of - speech combination index of a word , and the grammatical features of the word .", "label": "", "metadata": {}, "score": "49.806217"}
{"text": "Module 53 of processor 47 contextually analyzes the candidate token by applying a set of rules or functions to the window of sequential tokens surrounding the candidate token , and the respective characteristics of the window of sequential tokens .By applying these rules , module 53 identifies those candidate tokens which are members of noun phrases contained within the stream of text .", "label": "", "metadata": {}, "score": "49.807446"}
{"text": "Module 53 of processor 47 contextually analyzes the candidate token by applying a set of rules or functions to the window of sequential tokens surrounding the candidate token , and the respective characteristics of the window of sequential tokens .By applying these rules , module 53 identifies those candidate tokens which are members of noun phrases contained within the stream of text .", "label": "", "metadata": {}, "score": "49.807446"}
{"text": "The system thus provides structures and method steps for identifying a plurality of paradigms associated with a lexical expression .In addition , the portmanteau paradigms can include the location of noun paradigms , verb paradigms , and adjective / adverb paradigms .", "label": "", "metadata": {}, "score": "49.889038"}
{"text": "To solve it , we will keep the current design of morphological analysis .Our idea is to use a lexicon of any existing morphological analyzer ( e.g. , Buckwalter 's analyzer , Xerox analyzer , etc . ) and try to eliminate the invalid words generated by the morphological automaton and reconstruct it without these errors .", "label": "", "metadata": {}, "score": "49.893433"}
{"text": "This analyzer is considered as one of the most referenced in the literature , well documented and available for evaluation .It is also used by linguistic data consortium ( LDC ) for POS tagging of Arabic texts , Penn Arabic Treebank , and the Prague Arabic Dependency Treebank as discussed by Atwell et al .", "label": "", "metadata": {}, "score": "49.899567"}
{"text": "In particular , processor 47 can validate agreement between a candidate token and a token immediately adjacent ( i.e. , either immediately preceding or immediately following ) the candidate token in the stream of text .Agreement analysis prior to step 253 , wherein the noun phrase is identified , operates in a single match mode that returns a success immediately after the first successful match .", "label": "", "metadata": {}, "score": "49.96495"}
{"text": "In particular , processor 47 can validate agreement between a candidate token and a token immediately adjacent ( i.e. , either immediately preceding or immediately following ) the candidate token in the stream of text .Agreement analysis prior to step 253 , wherein the noun phrase is identified , operates in a single match mode that returns a success immediately after the first successful match .", "label": "", "metadata": {}, "score": "49.96495"}
{"text": "FIG .4A , 4B , and 4C illustrate other tables used by the multilingual text processor and stored in portions of either external memory 14 or internal memory 22 .These tables can be modified according to particular languages , such that the tables can provide linguistic information for processing text in a particular language .", "label": "", "metadata": {}, "score": "49.971878"}
{"text": "Thus , both the first and second expression in the stream of text become associated with the part - of - speech tag of NN .THE NOUN PHRASE ANALYZER .FIG .6 shows a block diagram of a noun - phrase analyzer 13 for identifying noun phrases contained within a stream of natural language text .", "label": "", "metadata": {}, "score": "50.103127"}
{"text": "Our corpus contains 975 words divided into 481 nouns , 362 verbs , and 132 particles .Table 4 shows the number of words which are not found when they are analyzed using the three morphological analyzers .We note that an update of our morphological database could resolve these errors seen in Table 4 .", "label": "", "metadata": {}, "score": "50.1146"}
{"text": "The documentation consists of a readme file with a description of the lexicon files , the morphological compatibility tables , the morphology analysis algorithm , a summary of stem morphological categories , and a table with the author 's Arabic transliteration system .", "label": "", "metadata": {}, "score": "50.27529"}
{"text": "A method in accordance with claim 18 , wherein said derivational pattern matching step further comprises identifying a derivational pattern that matches a suffix pattern in the candidate word .A method in accordance with claim 19 , wherein said step of forming an intermediate baseform further comprises stripping a suffix character string from the end of the candidate word .", "label": "", "metadata": {}, "score": "50.299385"}
{"text": "All the tokens from token i-2 !to token i+1 ! had at least one agreement tag in common , and thus passed the agreement test .In a further embodiment , the agreement checker 57 of the processor 47 creates a \" supertag \" when checking agreement in accordance with action box 255 of FIG .", "label": "", "metadata": {}, "score": "50.518105"}
{"text": "All the tokens from token i-2 !to token i+1 ! had at least one agreement tag in common , and thus passed the agreement test .In a further embodiment , the agreement checker 57 of the processor 47 creates a \" supertag \" when checking agreement in accordance with action box 255 of FIG .", "label": "", "metadata": {}, "score": "50.518105"}
{"text": "Gimnez , J. , Mrquez , L. : Svmtool : A general pos tagging generator based on support vector machines .In : LERC 2004 .pp .573 - 580 ( 2004 ) .Maamouri , M. , Bies , A. , Buckwalter , T. , Mekki , W. : The penn arabic treebank : Building a large - scale annotated arabic corpus .", "label": "", "metadata": {}, "score": "50.5205"}
{"text": "This invention improves information retrieval by providing a tokenizing apparatus and method that parses natural language text in a manner that increases the throughput of an information retrieval or natural language analysis system .The tokenizer includes a parser that extracts characters from the stream of text , an identifying element for identifying a token formed of characters in the stream of text that include lexical matter , and a filter for assigning tags to those tokens requiring further linguistic analysis .", "label": "", "metadata": {}, "score": "50.538986"}
{"text": "The digital signals representing morphological transforms are stored within a memory element and are organized as a list of paradigms , wherein each paradigm contains a grouping of one or more of morphological transforms .Each morphological transform in the paradigm can include a first character string that is stripped from the candidate word and a second string that is added to the character word to morphologically transform the candidate word .", "label": "", "metadata": {}, "score": "50.630188"}
{"text": "6 is a detailed block diagram of a noun - phrase analyzer contained within the text processor of FIG .1 ; .FIGS .7A-7D show flow charts for the tokenizer illustrated in FIG .1 ; .FIG .8 is a flow chart for the processor shown in FIG .", "label": "", "metadata": {}, "score": "50.656414"}
{"text": "In addition to the operation of concatenation used to concatenate morphemes or morphological automatons together , we used the union operation to associate two or several morphological automatons generated by the first operation , each one represent a definite morphological rule .", "label": "", "metadata": {}, "score": "50.70136"}
{"text": "However , to ensure accurate identification of the part - of - speech for each token , this probabilistic method is not always reliable .Accordingly , in a preferred aspect , the invention provides for a disambiguator module 59 that can disambiguate those tokens having multiple part - of - speech tags through contextual analysis of the ambiguous token .", "label": "", "metadata": {}, "score": "50.710342"}
{"text": "However , to ensure accurate identification of the part - of - speech for each token , this probabilistic method is not always reliable .Accordingly , in a preferred aspect , the invention provides for a disambiguator module 59 that can disambiguate those tokens having multiple part - of - speech tags through contextual analysis of the ambiguous token .", "label": "", "metadata": {}, "score": "50.710342"}
{"text": "For example , a first expression in stream of text might contain a suffix ole , and can be identified in suffix table 70 as representative entry 63 .A second expression in the stream of text might contain the suffix ole , and can be identified in suffix table 70 as representative entry 65 .", "label": "", "metadata": {}, "score": "50.84205"}
{"text": "[ GALE ROSETTA : This is precisely the mapping that the IBM ar_normalize_v5.pl script does for you . ]The parser uses an \" augmented Bies \" tag set .The so - called \" Bies mapping \" maps down the full morphological analyses from the Buckwalter analyzer that appear in the LDC Arabic Treebanks to a subset of the POS tags used in the Penn English Treebank ( but some with different meanings ) .", "label": "", "metadata": {}, "score": "50.848526"}
{"text": "The tokenizer manages to achieve this increased throughput across multiple languages and during a single pass through the incoming stream of text .BRIEF DESCRIPTION OF THE DRAWINGS .FIG .1 is a block diagram of a programmable multilingual text processor according to the present invention ; .", "label": "", "metadata": {}, "score": "50.883587"}
{"text": "Special attention was paid to the morphology in order to provide powerful mechanisms for handling problems in several languages that were known as difficult to handle .It allows instantiation of monolingual , bilingual , or multilingual lexical resources and works at a small scale or large scale .", "label": "", "metadata": {}, "score": "50.929226"}
{"text": "Lines 3 - 7 , in Table I , represent a second rule .The second rule provides for identifying as an \" end of the noun phrase \" those candidate tokens having a part - of - speech tag selected from the group consisting of stoplist nouns and adjectives .", "label": "", "metadata": {}, "score": "51.00103"}
{"text": "Thus , a candidate word matched with the expression N 2 can become associated with a plurality of paradigms .FIG .4C illustrates a further aspect of the invention wherein the applicants ' system departs dramatically from the prior art .", "label": "", "metadata": {}, "score": "51.004997"}
{"text": "Thus , a candidate word matched with the expression N 2 can become associated with a plurality of paradigms .FIG .4C illustrates a further aspect of the invention wherein the applicants ' system departs dramatically from the prior art .", "label": "", "metadata": {}, "score": "51.004997"}
{"text": "Input / Output controllers are known in the art , and frequently are an integral part of standard digital computers sold in the market today .Application Program Interface 11 includes a set of closely related functions , data types , and operations used in interfacing the computer 12 with the noun - phrase analyzer 13 and with the morphological analyzer / generator 2 .", "label": "", "metadata": {}, "score": "51.023903"}
{"text": "The two tokens agree and Single Match mode processing is complete .After Step 252 , logical flow proceeds to Step 253 .At step 253 , the noun - phrase identifier module 53 of processor 47 identifies the boundaries of noun phrases contained within the stream of natural language text , and marks those tokens forming the noun phrase .", "label": "", "metadata": {}, "score": "51.08347"}
{"text": "A computerized tokenizer for identifying a token formed of a string of lexical characters found in a stream of digitized natural language text , the computerized tokenizer comprising : . parsing means for extracting lexical and non - lexical characters from the stream of digitized text , . identifying means coupled with said parsing means for identifying a set of tokens , each token being formed of a string of parsed lexical characters bounded by non - lexical characters , and .", "label": "", "metadata": {}, "score": "51.117054"}
{"text": "5 illustrates a database system stored in various portions of memory elements 14 and 22 showing a connection between tables 31 , 62 , and 70 for associating part - of - speech tags with various lexical expressions contained within a stream of text .", "label": "", "metadata": {}, "score": "51.274673"}
{"text": "5 illustrates a database system stored in various portions of memory elements 14 and 22 showing a connection between tables 31 , 62 , and 70 for associating part - of - speech tags with various lexical expressions contained within a stream of text .", "label": "", "metadata": {}, "score": "51.274673"}
{"text": "1 illustrates a multilingual text processor 10 in accordance with the invention .The text processor 10 includes a digital computer 12 , an external memory 14 , a source of text 16 , a keyboard 18 , a display 20 , an application program interface 11 , a noun - phrase analyzer 13 , and a morphological analyzer / generator 2 .", "label": "", "metadata": {}, "score": "51.316986"}
{"text": "15 depicts a processing sequence for the inflection module 4 of the morphological analyzer of FIG .1 .The inflection analysis begins at step 340 and logical control proceeds to action box 342 .At action box 342 the inflection module 4 obtains an inflectional baseform of a candidate word .", "label": "", "metadata": {}, "score": "51.34367"}
{"text": "15 depicts a processing sequence for the inflection module 4 of the morphological analyzer of FIG .1 .The inflection analysis begins at step 340 and logical control proceeds to action box 342 .At action box 342 the inflection module 4 obtains an inflectional baseform of a candidate word .", "label": "", "metadata": {}, "score": "51.34367"}
{"text": "The primary part - of - speech tag can be identified because it is the first part - of - speech tag in the list of possible part - of - speech tags , as illustrated in FIG .4A. If the disambiguator 59 determines that no disambiguation rules apply , the primary part - of - speech tag remains the first part - of - speech tag in the list .", "label": "", "metadata": {}, "score": "51.382515"}
{"text": "The primary part - of - speech tag can be identified because it is the first part - of - speech tag in the list of possible part - of - speech tags , as illustrated in FIG .4A. If the disambiguator 59 determines that no disambiguation rules apply , the primary part - of - speech tag remains the first part - of - speech tag in the list .", "label": "", "metadata": {}, "score": "51.382515"}
{"text": "Further aspects of the invention provide for a data processor having various processing modules .The morphological system can also identify a paradigm representative of a candidate word found in natural language text by locating a first lexical expression in the first addressable table equivalent to the candidate word and by identifying a paradigm as a function of the located first lexical expression .", "label": "", "metadata": {}, "score": "51.397312"}
{"text": "Thus , in one aspect the tokenizer extracts tokens from the stream of text one token at a time while in a second aspect the tokenizer tokenizes an entire stream of text without interruption .Decision box 246 branches logical control depending upon whether or not three sequential tokens have been extracted from the stream of text by tokenizer 43 .", "label": "", "metadata": {}, "score": "51.465168"}
{"text": "Thus , in one aspect the tokenizer extracts tokens from the stream of text one token at a time while in a second aspect the tokenizer tokenizes an entire stream of text without interruption .Decision box 246 branches logical control depending upon whether or not three sequential tokens have been extracted from the stream of text by tokenizer 43 .", "label": "", "metadata": {}, "score": "51.465168"}
{"text": "Following the call , noun - phrase analyzer , the morphological analyzer , or the tokenizer scans the input buffer , and creates a stream of tokens in the output buffer and an array that correlates the input and output buffers .", "label": "", "metadata": {}, "score": "51.49889"}
{"text": "For example , a first expression in stream of text might contain a suffix 61e , and can be identified in suffix table 70 as representative entry 63 .A second expression in the stream of text might contain the suffix ole , and can be identified in suffix table 70 as representative entry 65 .", "label": "", "metadata": {}, "score": "51.518623"}
{"text": "They help us combine some morphological components ( morphemes ) together to generate correct language words .They use the different morphological components classes as well as the morphological properties classes .The morphological rules classes allow us the possibility to add new morphological descriptors which do not belong to the union of morphological descriptors of components of rules .", "label": "", "metadata": {}, "score": "51.6078"}
{"text": "After Step 252 , logical flow proceeds to Step 253 .At step 253 , the noun - phrase identifier module 53 of processor 47 identifies the boundaries of noun phrases contained within the stream of natural language text , and marks those tokens forming the noun phrase .", "label": "", "metadata": {}, "score": "51.62991"}
{"text": "In the Section 4 , we present our Arabic Morphological Analyzer .In the Section 5 , we evaluate the proposed technique .In the Section 6 , we discuss the obtained results .Finally , in the Section 7 , we draw some conclusions and future works to be done .", "label": "", "metadata": {}, "score": "51.63401"}
{"text": "Related to Tables 1 , 2 , and 3 which represented the results of ten different Arabic words analyzed using the three morphological analyzers , we note that our morphological analyzer provides more information and more precision about the word analyzed compared to the others .", "label": "", "metadata": {}, "score": "51.689976"}
{"text": "4A. Similarly , the word in the stream of text having a suffix am ( as in m'am ) can be associated with a part - of - speech tag of NN through tables 62 and 70 .THE MORPHOLOGICAL TABLE .", "label": "", "metadata": {}, "score": "51.7994"}
{"text": "At this point , all of the POS maps in the token i-1 ! have been exhausted , and no successful match has been bound .The second POS tag in the token i ! must now be compared with all of the POS tags in the token i-1 !", "label": "", "metadata": {}, "score": "51.856937"}
{"text": "Morphological processing involves two different tasks according to the operation type : generation and analysis .In generation , we produce correct forms using given morphemes , while in analysis , we try to identify morphemes for a given word .A lot of research has been done in the development of morphological analyzers for Arabic ; some of them are available for research and evaluation , while the rest have a commercial purpose .", "label": "", "metadata": {}, "score": "51.85742"}
{"text": "An apparatus according to claim 31 , wherein the third processing means forms an intermediate baseform that varies as a function of the first morphological transform matching the candidate word .An apparatus according to claim 31 , further comprising : . portmanteau paradigm means stored in the second addressable table for identifying the location of a plurality of paradigms , and .", "label": "", "metadata": {}, "score": "51.863224"}
{"text": "The selected candidate token is modified based upon the additional linguistic processing determined as suitable for the candidate token and identified by the tag associated with the selected candidate token .Additional features of the invention include a modifying step that either splits the candidate token into multiple tokens , strips a character from the candidate token , ignores a non - lexical character surrounding the candidate token , or merges the candidate token with another token .", "label": "", "metadata": {}, "score": "51.90262"}
{"text": "At action box 257 , the truncator module 61 of the processor 47 truncates the identified noun phrases .In one aspect of the invention , as illustrated by the pseudocode listing of FIG .11 , truncator 61 truncates noun phrases exceeding two words in length which satisfy a specific set of rules .", "label": "", "metadata": {}, "score": "51.971714"}
{"text": "At action box 257 , the truncator module 61 of the processor 47 truncates the identified noun phrases .In one aspect of the invention , as illustrated by the pseudocode listing of FIG .11 , truncator 61 truncates noun phrases exceeding two words in length which satisfy a specific set of rules .", "label": "", "metadata": {}, "score": "51.971714"}
{"text": "Furthermore , this index 64 can identify an entry having multiple part - of - speech tags in column 66 of table 62 .Thus , the first token can be associated with multiple part - of - speech tags and be identified as ambiguous by processor 47 .", "label": "", "metadata": {}, "score": "51.972763"}
{"text": "Furthermore , this index 64 can identify an entry having multiple part - of - speech tags in column 66 of table 62 .Thus , the first token can be associated with multiple part - of - speech tags and be identified as ambiguous by processor 47 .", "label": "", "metadata": {}, "score": "51.972763"}
{"text": "In particular , entry 33 contains a column , labeled item 35 , that describes a particular characteristic of a word .Entry 33 also contains a column , labeled item 37 , that identifies which bytes , out of a possible 32-byte prefix position , identify a particular characteristic of the word .", "label": "", "metadata": {}, "score": "51.989113"}
{"text": "A computerized data processing method according to claim 43 , further comprising the step of selecting the non - lexical attributes from the group consisting of : contains white space , single new line , and multiple new line .A computerized tokenizer for identifying a token formed of a string of lexical characters found in a stream of digitized natural language text , the computerized tokenizer comprising : . parsing means for extracting lexical and non - lexical characters from the stream of digitized text , . identifying means coupled with said parsing means for identifying a set of tokens , each token being formed of a string of parsed lexical characters bounded by non - lexical characters , . filtering means coupled with said identifying means for selecting a candidate token from said set of tokens , said candidate token being suitable for additional linguistic processing , and .", "label": "", "metadata": {}, "score": "52.062004"}
{"text": "Thus , there is an index to the noun inflection pattern of the word , an index to the verb inflection pattern of the word , and an index to the inflection pattern representative of the inflections of both the adjective and adverbial forms of the word .", "label": "", "metadata": {}, "score": "52.16853"}
{"text": "Thus , there is an index to the noun inflection pattern of the word , an index to the verb inflection pattern of the word , and an index to the inflection pattern representative of the inflections of both the adjective and adverbial forms of the word .", "label": "", "metadata": {}, "score": "52.16853"}
{"text": "Following the call , the analyzer called ( i.e. , noun - phrase or morphological ) scans the input buffer , and creates a stream of tokens in the output buffer and an array that correlates the input and output buffers .", "label": "", "metadata": {}, "score": "52.24002"}
{"text": "This analyzer is developed using three principal components .( i )A morphological database constructed using the XMODEL language based on XML language integrating all the data suitable for Arabic language .Its regroups three packages : package of morphological components that contains verbs , nouns , particles , and affixes .", "label": "", "metadata": {}, "score": "52.269173"}
{"text": "Output buffer 404 contains a list of the lexical expressions found in the input buffer 400 , and box 406 contains the identified noun phrases cash flow and dividend yield .FIG .12 demonstrates the ability of the noun - phrase analyzer 10 to identify groups of words having a specific meaning when combined .", "label": "", "metadata": {}, "score": "52.42784"}
{"text": "The character analyzer scans the stream of text for apostrophes because they can indicate pre - clitics , post - clitics , and contractions .The contextual analyzer determines whether the apostrophe causes a token to be appropriate for additional linguistic because if the apostrophe occurs at the beginning or end of a token , it is stripped off , and the appropriate flag is set .", "label": "", "metadata": {}, "score": "52.49755"}
{"text": "At step 322 , uninflection module 5 implements a strip and add algorithm to form the inflectional baseform of the candidate word .The strip and add algorithm is obtained from the inflectional transform currently being processed .The transform currently being processed indicates a particular character string to be removed from the candidate word and a subsequent character string to be added to the character word to form the inflectional baseform .", "label": "", "metadata": {}, "score": "52.50968"}
{"text": "At step 322 , uninflection module 5 implements a strip and add algorithm to form the inflectional baseform of the candidate word .The strip and add algorithm is obtained from the inflectional transform currently being processed .The transform currently being processed indicates a particular character string to be removed from the candidate word and a subsequent character string to be added to the character word to form the inflectional baseform .", "label": "", "metadata": {}, "score": "52.50968"}
{"text": "It also represents the accepting states of the morphological automaton for Arabic .This latter has a very important role , because it permits to give us a set of information of the Arabic words analyzed .This information is called the morphological descriptors and they also characterize these words .", "label": "", "metadata": {}, "score": "52.57627"}
{"text": "14 , the uninflectional module 5 compares the part - of - speech tags associated with the inflectional transform and the candidate word , and the uninflectional module 5 compares the character strings associated with the inflectional transform and the candidate word .", "label": "", "metadata": {}, "score": "52.603127"}
{"text": "14 , the uninflectional module 5 compares the part - of - speech tags associated with the inflectional transform and the candidate word , and the uninflectional module 5 compares the character strings associated with the inflectional transform and the candidate word .", "label": "", "metadata": {}, "score": "52.603127"}
{"text": "For example , a user may chose to treat semantically vague generic nouns such as use and type as stoplist nouns .In addition , lines 8 - 10 represent a third rule .The fourth rule , represented by lines 11 - 12 in Table I , provides for identifying as a \" middle of the noun phrase \" those selected tokens having a part - of - speech tag functionally related to noun word forms and following an extracted token identified as part of the noun phrase .", "label": "", "metadata": {}, "score": "52.676437"}
{"text": "Our system relies on automatic correction , morphological analysis , part of speech tagging and out of vocabulary diacritization components .The system shows improved results over the best reported systems in terms of full - form diacritization , and comparable results on the level of morphological diacritization .", "label": "", "metadata": {}, "score": "52.75596"}
{"text": "3 identifies whether the candidate word is a derivational root .If the candidate word is marked as a derivational root , logical flow proceeds to action box 394 , otherwise logical flow proceeds to action box 376 .Action box 376 begins a logical FOR - LOOP for processing each derivational transform in the subparadigm .", "label": "", "metadata": {}, "score": "52.8159"}
{"text": "In one aspect , disambiguator 59 can determine that no disambiguation rules apply to the ambiguous token and can thus choose to not change the ordering of the plurality of part - of - speech tags associated with the ambiguous token .", "label": "", "metadata": {}, "score": "52.86689"}
{"text": "In one aspect , disambiguator 59 can determine that no disambiguation rules apply to the ambiguous token and can thus choose to not change the ordering of the plurality of part - of - speech tags associated with the ambiguous token .", "label": "", "metadata": {}, "score": "52.86689"}
{"text": "After step 249 , each token 21 in token list 17 preferably contains the most probable part - of - speech tag and contains a pointer to an address in a memory element containing a list of other potential part - of - speech tags .", "label": "", "metadata": {}, "score": "52.87232"}
{"text": "After step 249 , each token 21 in token list 17 preferably contains the most probable part - of - speech tag and contains a pointer to an address in a memory element containing a list of other potential part - of - speech tags .", "label": "", "metadata": {}, "score": "52.87232"}
{"text": "The characteristics associated with the tokens include , either separately or in combination , the part - of - speech tags of the tokens and the grammatical features of the tokens .Once the disambiguator module 59 of the processor 47 has identified the most accurate part - of - speech tag , the processor places this part - of - speech tag in the position of the primary part - of - speech tag , i.e. , first in the list of the plurality of part - of - speech tags associated with the ambiguous token .", "label": "", "metadata": {}, "score": "52.990387"}
{"text": "The characteristics associated with the tokens include , either separately or in combination , the part - of - speech tags of the tokens and the grammatical features of the tokens .Once the disambiguator module 59 of the processor 47 has identified the most accurate part - of - speech tag , the processor places this part - of - speech tag in the position of the primary part - of - speech tag , i.e. , first in the list of the plurality of part - of - speech tags associated with the ambiguous token .", "label": "", "metadata": {}, "score": "52.990387"}
{"text": "For example , memory element 14 can store tokens generated by tokenizer 43 , and can store various attributes identified with a particular token by processor 47 .In another aspect of the invention , memory element 14 provides a place for storing a sequence of tokens along with their associated characteristics , called a window of tokens .", "label": "", "metadata": {}, "score": "53.014328"}
{"text": "For example , memory element 14 can store tokens generated by tokenizer 43 , and can store various attributes identified with a particular token by processor 47 .In another aspect of the invention , memory element 14 provides a place for storing a sequence of tokens along with their associated characteristics , called a window of tokens .", "label": "", "metadata": {}, "score": "53.014328"}
{"text": "After step 110 , logical flow proceeds to step 112 .Steps 112 - 134 illustrate various steps for identifying tokens within the stream of text .In general , steps 112 - 134 include steps for determining those characters forming the beginning of a token , the end of a token , and the middle of a token .", "label": "", "metadata": {}, "score": "53.060127"}
{"text": "The data stored and retrieved by the tokenizer can include digital signals representative of the stream of natural language text and digital signals representative of the parameters of each token .The lexical attributes can include internal character attributes of the token , special processing for the token , end of sentence attributes of the token , and noun phrase attributes of the token .", "label": "", "metadata": {}, "score": "53.090263"}
{"text": "Tokenizer 43 identifies the lexical matter as a token , and assigns the attributes of the token into a bit map .The attributes of the non - lexical matter following the lexical token are mapped into another bit map and associated with the token .", "label": "", "metadata": {}, "score": "53.09822"}
{"text": "This single disc publication is comprised of speech and . transcript files , and is separated into training and evaluation data .The training data consists of 2048 voicemail messages and the .corresponding transcript files ; the evaluation data consists of 50 .", "label": "", "metadata": {}, "score": "53.227814"}
{"text": "A computerized data processing method for identifying a token formed of a string of lexical characters found in a stream of digitized natural language text , said method comprising the steps of .extracting lexical and non - lexical characters from the stream of text , . identifying a set of tokens , each token being formed of a string of extracted lexical characters bounded by extracted non - lexical characters , and . using a filter to select a candidate token from said set of tokens , said candidate token being suitable for linguistic processing beyond the identification of tokens .", "label": "", "metadata": {}, "score": "53.23195"}
{"text": "The App Block initiates an application instance , assigns an identification number to it , and passes user processing options to the Noun - phrase Analyzer 13 , the morphological analyzer / generator 2 , and the tokenizer 1 .The Database Block initializes a database that provides linguistic information about a language .", "label": "", "metadata": {}, "score": "53.339546"}
{"text": "These token parameters and attributes advantageously aid in identifying additional linguistic processing suitable to a selected candidate token .The invention further comprises a method for tokenizing natural language text in order to achieve higher throughput , efficiency , and accuracy .", "label": "", "metadata": {}, "score": "53.35196"}
{"text": "It takes the stem as the base form and root information is provided .This analyzer contains over 77800 stem entries which represent 45000 lexical items .However , the number of lexical items and stems makes the lexicon voluminous , and as a result , the process of analyzing an Arabic text becomes long .", "label": "", "metadata": {}, "score": "53.364197"}
{"text": "Typically the processing of natural language text begins with the processing module fetching a continuous stream of electronic text from the input buffer .The processing module then decomposes the stream of natural language text into individual words , sentences , and messages .", "label": "", "metadata": {}, "score": "53.39929"}
{"text": "At action box 98 , the tokenizer caps the token string and then executes a for - loop starting with box 100 and ending with box 106 .The for - loop modifies attributes of the token or the token itself as a function of each significant pattern identified within the token .", "label": "", "metadata": {}, "score": "53.43605"}
{"text": "These part - of - speech tags aid in identifying appropriate morphological transforms contained within a particular paradigm for application to the candidate word .The morphological analysis system of the invention further provides for a processor capable of stripping character strings and adding character strings to candidate words to form baseforms of variable length .", "label": "", "metadata": {}, "score": "53.442867"}
{"text": "The disambiguator module 59 of the processor 47 identifies tokens having multiple part - of - speech tags as ambiguous and disambiguates the identified ambiguous tokens .Accordingly , action box 252 disambiguates those tokens identified as having multiple part - of - speech tags .", "label": "", "metadata": {}, "score": "53.492558"}
{"text": "They may return if there is interest . )The parsers are trained on unvocalized Arabic .One grammar ( atbP3FactoredBuckwalter.ser.gz or atb3FactoredBuckwalter.ser.gz ) is trained on input represented exactly as it is found in the Penn Arabic Treebank .The other grammars ( arabicFactored.ser.gz and arabicFactoredBuckwalter.ser.gz ) are trained on a more normalized form of Arabic .", "label": "", "metadata": {}, "score": "53.539993"}
{"text": "12 illustrates an example of the operation of the noun - phrase analyzer 13 having an input buffer 400 , a token list 402 , an output buffer 404 , and identified noun phrases 406 .In particular , input buffer 400 contains a natural language text stream reading The cash flow is strong , the dividend yield is high , and .", "label": "", "metadata": {}, "score": "53.54243"}
{"text": "12 illustrates an example of the operation of the noun - phrase analyzer 13 having an input buffer 400 , a token list 402 , an output buffer 404 , and identified noun phrases 406 .In particular , input buffer 400 contains a natural language text stream reading The cash flow is strong , the dividend yield is high , and .", "label": "", "metadata": {}, "score": "53.54243"}
{"text": "The attributes of the non - lexical matter following the lexical token are mapped into another bit map and associated with the token .Tokenizer 1 also filters or identifies those tokens that are candidates for further linguistic processing .This filtering effect by the tokenizer reduces the amount of data processed and increases the overall system throughput .", "label": "", "metadata": {}, "score": "53.602264"}
{"text": "Thus , the inflectional transform contained within the second rule of the verb inflectional paradigm is applied to the candidate word .After the application of the noun paradigm and the verb paradigm , the analyzer 2 processes the transforms contained within the adjective / adverb paradigm .", "label": "", "metadata": {}, "score": "53.640625"}
{"text": "Thus , the inflectional transform contained within the second rule of the verb inflectional paradigm is applied to the candidate word .After the application of the noun paradigm and the verb paradigm , the analyzer 2 processes the transforms contained within the adjective / adverb paradigm .", "label": "", "metadata": {}, "score": "53.640625"}
{"text": "At steps 312 and 314 the system determines whether the part - of - speech of the candidate word is in the same class as the current paradigm .For example , the processor determines whether the part - of - speech of the candidate word is the same as the part - of - speech of the paradigm identified by either the noun field 46 , the verb field 48 , or the adjective / adverb field 50 in the representative entry 33 .", "label": "", "metadata": {}, "score": "53.680374"}
{"text": "At steps 312 and 314 the system determines whether the part - of - speech of the candidate word is in the same class as the current paradigm .For example , the processor determines whether the part - of - speech of the candidate word is the same as the part - of - speech of the paradigm identified by either the noun field 46 , the verb field 48 , or the adjective / adverb field 50 in the representative entry 33 .", "label": "", "metadata": {}, "score": "53.680374"}
{"text": "A method in accordance with claim 1 , further comprising the step of extracting the first lexical expression from a stream of natural language text prior to said locating step .locating in the first addressable table a first lexical expression substantially equivalent to the candidate word , . identifying a first paradigm in the second addressable table as a function of the located first lexical expression , . matching an inflectional transform in the identified first paradigm with the candidate word , . forming an intermediate baseform by stripping a first character string from the candidate word , the first character string being defined by the first inflectional pattern included with the matched transform , and .", "label": "", "metadata": {}, "score": "53.733006"}
{"text": "In accordance with this process , the processor selects the first part - of - speech tag from token i ! , and tries to match it with each tag for the token i-1 ! until success is reached or all of the part - of - speech tags in token i-1 ! are exhausted .", "label": "", "metadata": {}, "score": "53.735653"}
{"text": "In accordance with this process , the processor selects the first part - of - speech tag from token i ! , and tries to match it with each tag for the token i-1 ! until success is reached or all of the part - of - speech tags in token i-1 ! are exhausted .", "label": "", "metadata": {}, "score": "53.735653"}
{"text": "The 1997 HUB5 German .Evaluation is a single disc publications and contains nine hours of . speech data .Transcripts are not included .Institutions that have membership in the LDC during the 2002 Membership .Year will be able to receive this corpus free of charge .", "label": "", "metadata": {}, "score": "53.867546"}
{"text": "These extra tags start with \" DT \" , and appear for all parts of speech that can be preceded by \" Al \" , so we have DTNN , DTCD , etc .This is an early definition of the Bies mapping .", "label": "", "metadata": {}, "score": "53.932114"}
{"text": "If the end of buffer is not reached , then logical flow branches to step 110 .When an end of buffer is identified in step 86 , the tokenizer identifies whether a token is currently under construction , at step 88 .", "label": "", "metadata": {}, "score": "53.966385"}
{"text": "( ii )A set of morphological automatons for the Arabic language each of which represents a very specific morphological category .( iii )A program handling the morphological database and the morphological automaton .It is developed through the use of Java language .", "label": "", "metadata": {}, "score": "54.01081"}
{"text": "For example , the invention provides a system that identifies the form and formation of words in the source of text , including inflectional and derivational analysis and generation .This allows a database query to be easily expanded to include morphologically related terms .", "label": "", "metadata": {}, "score": "54.05002"}
{"text": "Information associated with each particular token can include the part - of - speech of the token , the capitalization code of the token , the noise - word status of the token , and whether the token is a member of a noun phrase .", "label": "", "metadata": {}, "score": "54.08354"}
{"text": "The fifth functional element is an optional element indicating whether prefixation occurs .FIG .4C illustrates , in particular , a morphological file suited to inflection and uninflection .For example , inflection transform 001 ( as identified by column 73 ) contains three transformations shown in columns 75 , 77 and 79 , respectively .", "label": "", "metadata": {}, "score": "54.152054"}
{"text": "The fifth functional element is an optional element indicating whether prefixation occurs .FIG .4C illustrates , in particular , a morphological file suited to inflection and uninflection .For example , inflection transform 001 ( as identified by column 73 ) contains three transformations shown in columns 75 , 77 and 79 , respectively .", "label": "", "metadata": {}, "score": "54.152054"}
{"text": "Let us clarify how we can use these two operations to generate a morphological automaton for a definite morphological rule .So , we consider the following rule : .Therefore , the morphological automaton that represents this morphological rule is the following shown in Figure 9 .", "label": "", "metadata": {}, "score": "54.170033"}
{"text": "4C can be constructed for derivation expansion and underivation ( derivation reduction ) .A derivational file , however , will not contain a functional element in the transform identifying part - of - speech information used in specifying whether a candidate word is a derivation or a derivational baseform .", "label": "", "metadata": {}, "score": "54.19011"}
{"text": "4C can be constructed for derivation expansion and underivation ( derivation reduction ) .A derivational file , however , will not contain a functional element in the transform identifying part - of - speech information used in specifying whether a candidate word is a derivation or a derivational baseform .", "label": "", "metadata": {}, "score": "54.19011"}
{"text": "5 illustrates possible associations between the tables of FIG .3 , FIG .4A , and FIG .4B ; .FIG .6 is a detailed block diagram of a noun - phrase analyzer contained within the text processor of FIG .", "label": "", "metadata": {}, "score": "54.235443"}
{"text": "A representative entry 33 contains data such as the part - of - speech combination index , the noun inflection paradigms , the verb inflection paradigms , and the adjective / adverb inflection paradigms .The data obtained from representative entry 33 can also identify portmanteau paradigms that act as branching points to multiple numbers of other paradigms .", "label": "", "metadata": {}, "score": "54.296368"}
{"text": "A representative entry 33 contains data such as the part - of - speech combination index , the noun inflection paradigms , the verb inflection paradigms , and the adjective / adverb inflection paradigms .The data obtained from representative entry 33 can also identify portmanteau paradigms that act as branching points to multiple numbers of other paradigms .", "label": "", "metadata": {}, "score": "54.296368"}
{"text": "3 identifies whether the candidate word is a derivational route .If the candidate word is marked as a derivational route , logical flow proceeds to action box 394 , otherwise logical flow proceeds to action box 376 .Action box 376 begins a logical FOR - LOOP for processing each derivational transform in the subparadigm .", "label": "", "metadata": {}, "score": "54.30372"}
{"text": "A method in accordance with claim 18 wherein said identifying step further comprises : . locating a first lexical expression substantially equivalent to the candidate word in a second table containing a list of lexical expressions , and . identifying the first derivational paradigm in the first addressable table as a function of the located first lexical expression .", "label": "", "metadata": {}, "score": "54.306366"}
{"text": "This process continues until either a match is reached , or all of the part - of - speech tags in both token i ! and token i-1 ! have been checked with each other .A successful agreement found between two tokens indicates that the two tokens are to be treated as part of a noun phrase .", "label": "", "metadata": {}, "score": "54.39495"}
{"text": "This process continues until either a match is reached , or all of the part - of - speech tags in both token i ! and token i-1 ! have been checked with each other .A successful agreement found between two tokens indicates that the two tokens are to be treated as part of a noun phrase .", "label": "", "metadata": {}, "score": "54.39495"}
{"text": "The word data table 31 can be an addressable table , such as an 11 byte RAM table stored in a portion of either the external memory 14 or in the memory 12 .Each representative entry 33 in the word data table describes the characteristics of one or more words .", "label": "", "metadata": {}, "score": "54.517654"}
{"text": "7A. If the character analyzer , in step 142 , identifies that the current character is not modifying tokens to the left , then logical flow branches to step 146 .Steps 146 - 152 are identical to steps 116 - 122 as shown in FIG .", "label": "", "metadata": {}, "score": "54.53556"}
{"text": "The second rule provides for identifying as an \" end of the noun phrase \" those candidate tokens having a part - of - speech tag selected from the group consisting of stoplist nouns and adjectives .The default implementation of the second rule contains the two stoplist nouns ( i.e. , one and ones ) and one stoplist adjective ( i.e. , such ) .", "label": "", "metadata": {}, "score": "54.588882"}
{"text": "A method in accordance with claim 1 , wherein said step of forming an intermediate baseform further comprises stripping a suffix character string from the end of the candidate word .A method in accordance with claim 1 , wherein said step of forming an intermediate baseform further comprises stripping a prefix character string from the front of the candidate word .", "label": "", "metadata": {}, "score": "54.59369"}
{"text": "Information associated with each particular token can include , for example , the part - of - speech of the token , the capitalization code of the token , the noise - word status of the token , and whether the token is a member of a noun phrase .", "label": "", "metadata": {}, "score": "54.59485"}
{"text": "The method operates such that the candidate token selected is suitable for additional linguistic processing .The candidate token can be selected in accordance with the invention by comparing a selected character in the parsed stream of text with entries in a character table .", "label": "", "metadata": {}, "score": "54.604645"}
{"text": "After step 82 , logical flow proceeds to step 84 .At step 84 , the parser module 430 of tokenizer 1 , gets an input character from the stream of natural language text .After which , at step 86 , the tokenizer identifies whether the end of the text buffer is reached .", "label": "", "metadata": {}, "score": "54.6336"}
{"text": "The candidate token may be modified based upon the tag or based upon the additional linguistic processing associated with the candidate token through the tag .This modifying processor can include processing modules that either : split tokens , strip tokens of particular characters , ignore characters in the token or surround non - lexical matter , or merge tokens in the stream of text .", "label": "", "metadata": {}, "score": "54.671844"}
{"text": "The part - of - speech combination table contains a list of parts - of - speech that a word can take .The parts - of - speech are stored with the most frequent part - of - speech tag listed first in the part - of - speech combination table .", "label": "", "metadata": {}, "score": "54.69234"}
{"text": "This attribute is specified in the \" component \" tag .The components that are conjugated forms will use this code as an attribute of that tag ( the \" key \" attribute ) to indicate this reference .Morphological Rules Class .", "label": "", "metadata": {}, "score": "54.718273"}
{"text": "A method in accordance with claim 18 , wherein said identifying step further comprises : . locating a first lexical expression substantially equivalent to the candidate word in a second table containing a list of lexical expressions , . determining the inflectional baseform of the first lexical expression , and . identifying the first derivational paradigm in the first addressable table as a function of the determined inflectional baseform .", "label": "", "metadata": {}, "score": "54.76905"}
{"text": "On the one hand , the first remark when we compare the three morphological analyzers is about the information giving by each one .Used an innovative language ( XMODEL ) for representing the morphological knowledge and the notion of the morphological automaton for Arabic language , our morphological analyzer gives more information about each word analyzed and more precision compared to Xerox Arabic morphological analyzer and Smrz 's analyzer .", "label": "", "metadata": {}, "score": "54.807182"}
{"text": "2 illustrates a group of data structures formed by the processor of FIG .1 according to one practice of the invention ; .FIG .3 shows a word data table utilized by the processor of FIG .1 ; .", "label": "", "metadata": {}, "score": "54.862038"}
{"text": "The user selected options control certain processing steps within the noun - phrase analyzer as detailed below .At step 244 , the user also specifies the text to be processed .The specified text is generally input from source text 16 , although the text can additionally be internally generated within the digital computer 12 .", "label": "", "metadata": {}, "score": "54.86924"}
{"text": "The user selected options control certain processing steps within the noun - phrase analyzer as detailed below .At step 244 , the user also specifies the text to be processed .The specified text is generally input from source text 16 , although the text can additionally be internally generated within the digital computer 12 .", "label": "", "metadata": {}, "score": "54.86924"}
{"text": "For example , lines 1 - 5 recite a rule for identifying the beginning and the middle of a noun phrase .TABLE VI______________________________________French and Spanish and Italian Noun - Phrase Rules______________________________________1 If the token is an adjective AND2 the preceding token is a noun AND3 the following token is a noun4 break the Noun Phrase _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ .", "label": "", "metadata": {}, "score": "54.983414"}
{"text": "For example , lines 1 - 5 recite a rule for identifying the beginning and the middle of a noun phrase .TABLE VI______________________________________French and Spanish and Italian Noun - Phrase Rules______________________________________1 If the token is an adjective AND2 the preceding token is a noun AND3 the following token is a noun4 break the Noun Phrase _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ .", "label": "", "metadata": {}, "score": "54.983414"}
{"text": "Processor 47 , as illustrated in FIG .6 , operates on the extracted tokens with various modules to form noun phrases .These modules can be hard - wired digital circuitry performing functions or they can be software instructions implemented by a data processing unit performing the same functions .", "label": "", "metadata": {}, "score": "55.003414"}
{"text": "Processor 47 , as illustrated in FIG .6 , operates on the extracted tokens with various modules to form noun phrases .These modules can be hard - wired digital circuitry performing functions or they can be software instructions implemented by a data processing unit performing the same functions .", "label": "", "metadata": {}, "score": "55.003414"}
{"text": "However , other tables exist which contain language - specific rules for identifying noun phrases .Table II - VI , as set forth below , contain language - specific rules ._ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ .", "label": "", "metadata": {}, "score": "55.013283"}
{"text": "Finally , we can consider that using the new and innovative language ( XMODEL ) is one of the strengths of this work .We note that the two approaches are extensible , because they use XML to represent the lexical entry .", "label": "", "metadata": {}, "score": "55.096977"}
{"text": "Memory element 45 , as illustrated in FIG .5 , can be a separate addressable memory element dedicated to the noun - phrase analyzer 13 , or it can be a portion of either internal memory element 22 or external memory element 14 .", "label": "", "metadata": {}, "score": "55.134956"}
{"text": "Memory element 45 , as illustrated in FIG .5 , can be a separate addressable memory element dedicated to the noun - phrase analyzer 13 , or it can be a portion of either internal memory element 22 or external memory element 14 .", "label": "", "metadata": {}, "score": "55.134956"}
{"text": "The combined attributes of the lexical and non - lexical matter associated with any particular token are referred to as the parameters of the particular token .These parameters of the tokens forming the stream of natural language text are processed by the language analysis system , thereby providing for increased efficiency , throughput , and accuracy in the language analysis system .", "label": "", "metadata": {}, "score": "55.167236"}
{"text": "A tokenizer according to claim 45 , wherein said end of sentence attributes are selected from the group consisting of probable sentence termination , attached end of word period , stripped end of word period , capcode high , capcode low , and definite non sentence termination .", "label": "", "metadata": {}, "score": "55.190178"}
{"text": "The App Block initiates an application instance , assigns an identification number to it , and passes user processing options to the Noun - phrase Analyzer 13 and to the morphological analyzer / generator 2 .The Database Block initializes a database that provides linguistic information about a language .", "label": "", "metadata": {}, "score": "55.23089"}
{"text": "A stochastic arabic diacritizer based on a hybrid of factorized and unfactorized textual features .IEEE Transactions on Audio , Speech , and Language Processing 19 , 166 - 175 ( 2011 ) CrossRef .Habash , N. , Rambow , O. : Arabic diacritization through full morphological tagging .", "label": "", "metadata": {}, "score": "55.23354"}
{"text": "The first set , Arabic Text Recognition ( ATR ) data , which is generated from an OCR system developed at KFUPM .The second set , a Computer Generated ( CG ) data , which is prepared by taking a normal correct text and randomly introducing three types of errors ( insert , delete and replace ) .", "label": "", "metadata": {}, "score": "55.268204"}
{"text": "This implementation of tokenizer 1 has several benefits .Moreover , tokenizer 1 allows the non - lexical matter following each token to be processed in one call .Additionally , tokenizer 1 achieves these goals while simultaneously storing the properties of the non - lexical string in less space than is required to store the actual string .", "label": "", "metadata": {}, "score": "55.277714"}
{"text": "Concerning the number of the entries generated by our system , it is about 5961 entries , which represent a remarkable reduction of the number of the entries and makes our system as one of the best existing systems .These obtained results confirm what we explained before about our new language ( XMODEL ) to represent the Arabic morphological knowledge with an optimal way .", "label": "", "metadata": {}, "score": "55.33098"}
{"text": "The parts - of - speech are stored with the most frequent part - of - speech tag listed first in the part - of - speech combination table .The order of the other parts - of - speech in this table is unspecified , but implied to be in reverse frequency order .", "label": "", "metadata": {}, "score": "55.34782"}
{"text": "FIG .3 shows a word data table utilized by the processor of FIG .1 ; .FIG .4A illustrates a part - of - speech combination table referenced by the word data table of FIG .3 ; .", "label": "", "metadata": {}, "score": "55.349823"}
{"text": "Rather , it is preferable to design a tokenizer that identifies as tokens only those character strings forming words that are relevant to information processing .Prior art tokenizers have the additional drawback that each token extracted from the stream of text must be processed by each higher level linguistic processor in the automated language analysis system .", "label": "", "metadata": {}, "score": "55.3582"}
{"text": "This system results in an extensive amount of unnecessary higher level linguistic processing on inappropriate tokens .Clearly , there is a need in the art for a tokenizer capable of more advanced processing that reduces the overall amount of data being processed by higher level linguistic processors and increases the overall system throughput .", "label": "", "metadata": {}, "score": "55.43209"}
{"text": "The baseform can be obtained from the uninflection module 5 .After action box 362 , control proceeds to box 364 .Decision box 364 identifies whether the derivation paradigm is an empty set or whether it contains morphological transforms .In particular , if derivational paradigms do not exist for this baseform , logical flow proceeds to action box 396 ending the underivation ( derivation reduction ) process .", "label": "", "metadata": {}, "score": "55.46099"}
{"text": "The baseform can be obtained from the uninflection module 5 .After action box 362 , control proceeds to box 364 .Decision box 364 identifies whether the derivation paradigm is an empty set or whether it contains morphological transforms .In particular , if derivational paradigms do not exist for this baseform , logical flow proceeds to action box 396 ending the underivation ( derivation reduction ) process .", "label": "", "metadata": {}, "score": "55.46099"}
{"text": "This determines whether the tokenizer will process a partial token , or request more text before processing a partial token.pCharsProcd Output : The number of characters that the tokenizer processed on this call .This is the total number of characters that define the current token ; this includes the length of the token and the non - lexical matter that follows it .", "label": "", "metadata": {}, "score": "55.465324"}
{"text": "This filtering effect by the tokenizer 43 reduces the amount of data processed and increases the overall system throughput .This implementation of tokenizer 28 has several benefits .Moreover , tokenizer 28 allows the non - lexical matter following each token to be processed in one call .", "label": "", "metadata": {}, "score": "55.473785"}
{"text": "A second alternative method for identifying the part - of - speech tags for the token involves default tagging .Generally , default tagging is only applied when the token was not identified in the word data table 31 and was not identified in suffix table 70 .", "label": "", "metadata": {}, "score": "55.50924"}
{"text": "A second alternative method for identifying the part - of - speech tags for the token involves default tagging .Generally , default tagging is only applied when the token was not identified in the word data table 31 and was not identified in suffix table 70 .", "label": "", "metadata": {}, "score": "55.50924"}
{"text": "A method in accordance with claim 2 , wherein the second addressable table includes part - of - speech tags associated with each transform and said matching step further comprises : . identifying the parameter of the candidate word as a part - of - speech tag of the candidate word , . selecting a part - of - speech tag as the morphological pattern for each transform and .", "label": "", "metadata": {}, "score": "55.553703"}
{"text": "4A illustrates a part - of - speech combination table referenced by the word data table of FIG .3 ; .FIG .4B illustrates a suffix table for referencing entries in the part - of - speech combination table of FIG .", "label": "", "metadata": {}, "score": "55.736656"}
{"text": "14 .After action box 342 , logical flow proceeds to action box 344 .Box 344 begins a logical FOR - LOOP that is applied to each inflectional transform in the paradigm associated with the candidate word .At action box 346 and 348 the inflection module attends to prefixing if prefixing processing was requested by the user of the text processing system 10 .", "label": "", "metadata": {}, "score": "55.800686"}
{"text": "14 .After action box 342 , logical flow proceeds to action box 344 .Box 344 begins a logical FOR - LOOP that is applied to each inflectional transform in the paradigm associated with the candidate word .At action box 346 and 348 the inflection module attends to prefixing if prefixing processing was requested by the user of the text processing system 10 .", "label": "", "metadata": {}, "score": "55.800686"}
{"text": "FIG .2 illustrates one potential operation of multilingual processor 10 .In particular , FIG .2 shows an input buffer 15 , a token list 17 , and an output buffer 19 .The source of text 16 supplies a stream of natural language text to input / output controller 26 that in turn routes the text to processor 30 .", "label": "", "metadata": {}, "score": "55.83281"}
{"text": "Preferably , this operation is achieved by the truncator module 61 operating in conjunction with the agreement checking module 57 .For example , agreement module 57 identifies those tokens within the noun phrase that are in agreement and those tokens that are not in agreement , and truncator module 61 re - examines which tokens belong in the noun phrase based upon the agreement analysis of agreement checking module 57 .", "label": "", "metadata": {}, "score": "55.848904"}
{"text": "Preferably , this operation is achieved by the truncator module 61 operating in conjunction with the agreement checking module 57 .For example , agreement module 57 identifies those tokens within the noun phrase that are in agreement and those tokens that are not in agreement , and truncator module 61 re - examines which tokens belong in the noun phrase based upon the agreement analysis of agreement checking module 57 .", "label": "", "metadata": {}, "score": "55.848904"}
{"text": "It should be noted that our system could provide more information about the word analyzed according to the user needs .On the other hands , let us see the evaluation process from another view .So , we have selected a corpus of 975 words containing different type of the word in Arabic ( verbs , nouns , and particles ) .", "label": "", "metadata": {}, "score": "55.958286"}
{"text": "This window of sequential tokens provides a basis for contextually analyzing the candidate token to determine whether or not it is a member of a noun phrase .The module 53 analyses characteristics of the window of sequential tokens to determine whether the candidate token is a member of a noun phrase .", "label": "", "metadata": {}, "score": "55.984085"}
{"text": "This window of sequential tokens provides a basis for contextually analyzing the candidate token to determine whether or not it is a member of a noun phrase .The module 53 analyses characteristics of the window of sequential tokens to determine whether the candidate token is a member of a noun phrase .", "label": "", "metadata": {}, "score": "55.984085"}
{"text": "An apparatus according to claim 31 , wherein said second processing means further comprises : . identifying means for identifying a parameter of the candidate word , . selecting means for selecting a morphological pattern for each transform , and . comparing means for comparing the parameter of the candidate word with the selected morphological pattern such that a transform is matched with the candidate word .", "label": "", "metadata": {}, "score": "56.07999"}
{"text": "Parsed 8 words in 1 sentences ( 5.87 wds / sec ; 0.73 sents / sec ) .You can ask for dependencies output , with the -outputFormat dependencies option .At present , there is no typed dependencies ( grammatical relations ) analysis available for Arabic , and so asking for typedDependencies will throw an UnsupportedOperationException .", "label": "", "metadata": {}, "score": "56.109333"}
{"text": "FIGS .7A-7I show flow charts for the tokenizer module illustrated in FIG .6 ; .FIG .8 is a flow chart for the processor shown in FIG .6 ; .FIG .9 is a representative table of rules for the disambiguator shown in FIG .", "label": "", "metadata": {}, "score": "56.13413"}
{"text": "In Table I , lines 1 - 2 represent a first rule and provide for identifying as a \" beginning of a noun phrase \" those candidate tokens having a part - of - speech tag functionally related to noun word forms .", "label": "", "metadata": {}, "score": "56.271645"}
{"text": "FIG .9 thus illustrates one embodiment of the invention wherein the disambiguator 59 of the processor 47 modifies the ambiguous target token in accordance with a rule table .FIG .9 further illustrates an embodiment wherein the ambiguous target token is modified as a function of the primary part - of - speech tag and the secondary part - of - speech tags of the ambiguous target token , and the part - of - speech tags of the other token surrounding the target token .", "label": "", "metadata": {}, "score": "56.33229"}
{"text": "FIG .9 thus illustrates one embodiment of the invention wherein the disambiguator 59 of the processor 47 modifies the ambiguous target token in accordance with a rule table .FIG .9 further illustrates an embodiment wherein the ambiguous target token is modified as a function of the primary part - of - speech tag and the secondary part - of - speech tags of the ambiguous target token , and the part - of - speech tags of the other token surrounding the target token .", "label": "", "metadata": {}, "score": "56.33229"}
{"text": "( i ) Develop the syntactic analyzer : our morphological database holds a lot of syntactic information , which makes it very useful for syntactic analysis .( ii ) Develop the semantic analyzer : our morphological database holds semantic information , which makes it very useful in semantic analysis .", "label": "", "metadata": {}, "score": "56.501045"}
{"text": "The morphological system can additionally provide for the use of portmanteau paradigms in the second addressable table .The portmanteau paradigms , in comparison to other paradigms , do not necessarily contain inflectional transforms .Rather , the portmanteau paradigms can contain the locations of a plurality of paradigms .", "label": "", "metadata": {}, "score": "56.518246"}
{"text": "In operation , processor 47 sequentially applies each rule to an ambiguous token in the stream of text and alters the primary part - of - speech tag in accordance with any applicable rule contained within the table .For example , rule 1 has a requirement and result labeled as item 268 in FIG .", "label": "", "metadata": {}, "score": "56.695713"}
{"text": "In operation , processor 47 sequentially applies each rule to an ambiguous token in the stream of text and alters the primary part - of - speech tag in accordance with any applicable rule contained within the table .For example , rule 1 has a requirement and result labeled as item 268 in FIG .", "label": "", "metadata": {}, "score": "56.695713"}
{"text": "A method in accordance with claim 18 wherein said intermediate derivational baseform varies as a function of the derivational patterns contained within an identified derivational paradigm .A method in accordance with claim 25 wherein applying the list of derivational transforms further comprises : . forming a second intermediate derivational baseform by stripping a first derivational character string from the generated derivational baseform in accordance with a selected derivational transform , and .", "label": "", "metadata": {}, "score": "56.80918"}
{"text": "That is , the first rule tags as the beginning of a noun phrase those tokens having a part - of - speech tag selected from the group of part - of - speech tags , including : singular common noun , adjective , ordinal number , cardinal number .", "label": "", "metadata": {}, "score": "56.84947"}
{"text": "Computer 12 then outputs to interface 11 a buffer of text 15 , an empty output buffer 19 , and the specific operations to be performed on the buffer of text .Noun - phrase analyzer 13 then performs the specified operations on the buffer of text 15 and places the generated output into the output buffer 19 and places the token list 17 that correlates the input buffer of text 15 with the output buffer 19 into the application program interface 11 .", "label": "", "metadata": {}, "score": "56.935345"}
{"text": "Computer 12 then outputs to interface 11 a buffer of text 15 , an empty output buffer 19 , and the specific operations to be performed on the buffer of text .Noun - phrase analyzer 13 then performs the specified operations on the buffer of text 15 and places the generated output into the output buffer 19 and places the token list 17 that correlates the input buffer of text 15 with the output buffer 19 into the application program interface 11 .", "label": "", "metadata": {}, "score": "56.935345"}
{"text": "First , the first POS tag from each token in checked for agreement .# # STR1 # # If this fails , the second POS tag from the token i-1 ! is checked for a match : # # STR2 # # At this point , all of the POS maps in the token i-1 ! have been exhausted , and no successful match has been bound .", "label": "", "metadata": {}, "score": "57.08157"}
{"text": "FIG .2 illustrates the operation of multilingual processor 10 .In particular , FIG .2 shows an input buffer 15 , a token list 17 , and an output buffer 19 .The source of text 16 supplies a stream of natural language text to input / output controller 26 that in turn routes the text to processor 30 .", "label": "", "metadata": {}, "score": "57.12715"}
{"text": "9 , illustrate the promotion of a secondary part - of - speech tag to the primary part - of - speech tag as a function of a window of token surrounding the ambiguous token i !In particular , rule 2 promotes the secondary part - of - speech tag of singular common noun to the primary part - of - speech tag if : the token i-2 !", "label": "", "metadata": {}, "score": "57.134617"}
{"text": "9 , illustrate the promotion of a secondary part - of - speech tag to the primary part - of - speech tag as a function of a window of token surrounding the ambiguous token i !In particular , rule 2 promotes the secondary part - of - speech tag of singular common noun to the primary part - of - speech tag if : the token i-2 !", "label": "", "metadata": {}, "score": "57.134617"}
{"text": "The filter 434 selects a candidate token from the tokens generated by the identifier 432 .The candidate tokens selected by the filter 434 are suited for additional linguistic processing .Typically , the Tokenizer 1 is the first module to process input text in the multilingual text processor 10 .", "label": "", "metadata": {}, "score": "57.19937"}
{"text": "The above identified attributes are detailed below .The detailed descriptions of the attributes identify both the operations of the modifying processor 438 and the associating processor 436 .In particular , the descriptions identify how the associating processor 436 identifies when a plurality of tokens becomes associated with a plurality of tags identifying additional linguistic processing .", "label": "", "metadata": {}, "score": "57.27856"}
{"text": "The source of text 16 can be another application program , a keyboard , a communications link , or a data storage device .In either case , the source of text generates and outputs to the digital computer 12 a stream of natural language text .", "label": "", "metadata": {}, "score": "57.2937"}
{"text": "The source of text 16 can be another application program , a keyboard , a communications link , or a data storage device .In either case , the source of text generates and outputs to the digital computer 12 a stream of natural language text .", "label": "", "metadata": {}, "score": "57.2937"}
{"text": "A form of agreement is possible if the required number , gender , and case parameters agree or contain potential agreements between each of the supertags .If the required number , gender , and case parameters contained in the supertags do not agree , then agreement is not possible .", "label": "", "metadata": {}, "score": "57.308792"}
{"text": "A form of agreement is possible if the required number , gender , and case parameters agree or contain potential agreements between each of the supertags .If the required number , gender , and case parameters contained in the supertags do not agree , then agreement is not possible .", "label": "", "metadata": {}, "score": "57.308792"}
{"text": "For instance , the filter 434 may use both the character analyzer 440 and the contextual processor 442 when filtering text that includes : ( 1 . ) apostrophes , ( 2 . ) parenthesis , ( 3 . ) dots / periods , ( 4 . ) slashes , ( 5 . ) ellipsis , and ( 6 . ) a series of hyphens .", "label": "", "metadata": {}, "score": "57.414394"}
{"text": "Box 396 indicates the end of the underivation ( derivation reduction ) module .FIG .17 illustrates a processing sequence of derivation expansion module 6 for generating derivatives of the candidate word .Operation of the derivation expansion module begins at step 400 , after which logical control proceeds to action box 402 .", "label": "", "metadata": {}, "score": "57.415543"}
{"text": "Box 396 indicates the end of the underivation ( derivation reduction ) module .FIG .17 illustrates a processing sequence of derivation expansion module 6 for generating derivatives of the candidate word .Operation of the derivation expansion module begins at step 400 , after which logical control proceeds to action box 402 .", "label": "", "metadata": {}, "score": "57.415543"}
{"text": "Representative entry 33 encodes the information contained in a 32-byte prefix , of which bytes 16 - 18 contain a code found in the part - of - speech combination table 62 .This table in its turn relates this particular part - of - speech combination with index 343 in table 62 , thereby associating the part - of - speech tags of ABN ( pre - qualifier ) , NN ( noun ) , QL ( qualifying adverb ) , and RB ( adverb ) with Expression N 2 .", "label": "", "metadata": {}, "score": "57.518806"}
{"text": "Representative entry 33 encodes the information contained in a 32-byte prefix , of which bytes 16 - 18 contain a code found in the part - of - speech combination table 62 .This table in its turn relates this particular part - of - speech combination with index 343 in table 62 , thereby associating the part - of - speech tags of ABN ( pre - qualifier ) , NN ( noun ) , QL ( qualifying adverb ) , and RB ( adverb ) with Expression N 2 .", "label": "", "metadata": {}, "score": "57.518806"}
{"text": "The parser assumes precisely the tokenization of Arabic used in the Penn Arabic Treebank ( ATB ) .You must provide input to the parser that is tokenized in this way or the resulting parses will be terrible .We do now have a software component for segmenting Arabic , but you have to download and run it first ; it is n't included in the parser ( see at the end of this answer ) .", "label": "", "metadata": {}, "score": "57.531303"}
{"text": "The first POS tag from the token i-1 ! and the second tag from the token i ! are checked for a match : # # STR3 # # If it fails , the second POS tag from the token i-1 ! is checked for agreement : # # STR4 # # At this point , a match has successfully been made , and all agreement processing stops .", "label": "", "metadata": {}, "score": "57.557915"}
{"text": "In this paper , we will be presenting a morphological analyzer based on morphological automaton developed using a new approach for the production of a morphological database .To develop the morphological analyzer and product the morphological database , we used the particularities of Arabic that is concretized on multilevel : verbs and nouns are also characterized by a specific representation named the matrix \" root scheme \" .", "label": "", "metadata": {}, "score": "57.568016"}
{"text": "13 .The morphological analyzer / generator 2 first addresses the noun inflectional paradigm , and determines that the noun paradigm has only one paradigm .Analyzer / generator 2 then processes the candidate word by applying the inflectional transforms contained within the identified noun paradigm to each part - of - speech of the candidate word drinks .", "label": "", "metadata": {}, "score": "57.632908"}
{"text": "13 .The morphological analyzer / generator 2 first addresses the noun inflectional paradigm , and determines that the noun paradigm has only one paradigm .Analyzer / generator 2 then processes the candidate word by applying the inflectional transforms contained within the identified noun paradigm to each part - of - speech of the candidate word drinks .", "label": "", "metadata": {}, "score": "57.632908"}
{"text": "Related to the example above and the description of our approach seen before , the main remark that we make when we compare the two approaches is concerning the representation of any Arabic word .Our approach permits a remarkable reduction of the lexical entries in the morphological database , because the main idea of our approach is to represent Arabic words by their schemes and not by their roots and schemes as we saw in the LMF model .", "label": "", "metadata": {}, "score": "57.643036"}
{"text": "Rule 3 promotes the secondary part - of - speech tag of singular common noun to the primary part - of - speech tag if : the token i-1 ! has a part - of - speech tag of verb infinitive or singular common noun , as shown by entry 274 ; and the token i ! has a primary part - of - speech tag of verb or second possessive pronoun or exclamation or verb past tense form and has a secondary part - of - speech tag of singular common noun , as shown by entry 276 .", "label": "", "metadata": {}, "score": "57.67572"}
{"text": "Rule 3 promotes the secondary part - of - speech tag of singular common noun to the primary part - of - speech tag if : the token i-1 ! has a part - of - speech tag of verb infinitive or singular common noun , as shown by entry 274 ; and the token i ! has a primary part - of - speech tag of verb or second possessive pronoun or exclamation or verb past tense form and has a secondary part - of - speech tag of singular common noun , as shown by entry 276 .", "label": "", "metadata": {}, "score": "57.67572"}
{"text": "In morphological analysis , Buckwalter Arabic morphological analyzer and Xerox Arabic finite state morphology are two of the best known morphological analyzers for MSA , and they are available and well documented .Concerning the production of Arabic lexicon resource , the LMF approach is became as one of the most used for representing the lexicon resource .", "label": "", "metadata": {}, "score": "57.755356"}
{"text": "7A. If the current character can start a token , then at step 178 the current character is identified as the beginning of a token .After step 178 , control returns to step 84 of FIG .7A. FIG .7C shows steps 180 - 210 in the operation of tokenizer 1 .", "label": "", "metadata": {}, "score": "57.759945"}
{"text": "A method in accordance with claim 16 , further comprising the step of creating the inflected forms of the generated inflected baseform by applying the list of transforms in the identified first paradigm to the generated inflectional baseform .A programmed data processing method for generating a derivationally related word from a candidate word using a first addressable table containing a list of derivational paradigms , each derivational paradigm having at least one derivational transform and an associated derivational pattern , said method comprising the steps of : . identifying a first derivational paradigm in the first addressable table as a function of the candidate word , . matching a derivational pattern in the identified first derivational paradigm with the candidate word , . forming an intermediate derivational baseform by stripping a first character string from the candidate word in accordance with a first derivational transform associated with the matched derivational pattern , and .", "label": "", "metadata": {}, "score": "57.77229"}
{"text": "These attributes include : numbers , possible pre - clitic , possible post - clitic , and unicode error .The end of sentence and noun phrase attributes are used by both the Sentence Boundary Determiners and the Noun Phrase Analyzer .", "label": "", "metadata": {}, "score": "57.788754"}
{"text": "THE DISAMBIGUATOR .The disambiguator module 59 of the processor 47 identifies tokens having multiple part - of - speech tags as ambiguous and disambiguates the identified ambiguous tokens .Accordingly , action box 252 disambiguates those tokens identified as having multiple part - of - speech tags .", "label": "", "metadata": {}, "score": "57.900177"}
{"text": "If the user did request application of the agreement rules , logical control proceeds to action box 255 wherein the agreement rules are applied .At action box 255 the agreement checking module 57 of the processor 47 ensures that the tokens within the identified noun phrase are in agreement .", "label": "", "metadata": {}, "score": "57.972946"}
{"text": "If the user did request application of the agreement rules , logical control proceeds to action box 255 wherein the agreement rules are applied .At action box 255 the agreement checking module 57 of the processor 47 ensures that the tokens within the identified noun phrase are in agreement .", "label": "", "metadata": {}, "score": "57.972946"}
{"text": "Further embodiments of the invention include identifying a part - of - speech tag of the candidate word and matching a morphological pattern in the identified paradigm with the candidate word when the morphological pattern has a part - of - speech tag equivalent to the part - of - speech tag associated with the candidate word .", "label": "", "metadata": {}, "score": "58.017765"}
{"text": "We note that this set of information has an important role especially in future works like for example the building of a syntactic analyzer , a semantic analyzer , machine translation , and so forth .Finally , the development of our morphological analyzer for Arabic language has many advantages such as the following .", "label": "", "metadata": {}, "score": "58.06373"}
{"text": "A method in accordance with claim 13 wherein applying the list of transforms further comprises : . forming a second intermediate baseform by stripping a first inflectional character string from the generated inflectional baseform in accordance with a selected transform , and .", "label": "", "metadata": {}, "score": "58.09778"}
{"text": "Relying on the notion of scheme / ealwazn / ( \u0627\u0644\u0648\u0632\u0646 ) , this class allows us a better optimization , hence a considerable reduction of morphological entries .By doing so , we need not represent all the language items but only their schemes .", "label": "", "metadata": {}, "score": "58.113102"}
{"text": "If a token is currently under construction at step 88 , then the logical flow of the tokenizer proceeds to decision box 92 .At decision box 92 , the tokenizer queries whether the end of the document has been reached .", "label": "", "metadata": {}, "score": "58.198006"}
{"text": "FIG .10 illustrates pseudocode for the agreement checker of FIG .6 ; .FIG .11 contains pseudocode for the noun - phrase truncator of FIG .6 ; .FIG .12 illustrates an example of noun - phrase analysis in accordance with the invention ; .", "label": "", "metadata": {}, "score": "58.201996"}
{"text": "Part of the IDEALX \" OpenTrust \" suite ( IDX - PKI , IMC , IDX - smbldap - tools ... ) , it provides confidentiality and security through X.509-PKCS certificates .Languages : .Based on the Buckwalter Morphological Analyzer ( Version 1.0 ) for doing Arabic stemming and POS tagging .", "label": "", "metadata": {}, "score": "58.38141"}
{"text": "These individual words identified by the processor are actually just \" tokens \" that may be found as entries in the lexicon module .This first stage of processing by the processing module is referred to as tokenization and the processor module at this stage is referred to as a tokenizer .", "label": "", "metadata": {}, "score": "58.385963"}
{"text": "This revised version now includes a few new tags that are not in the English PTB tag set ( NOUN_QUANT , ADJ_NUM , and VN ) .We also include them now .The parser download does not include components for normalizing or segmenting Arabic text .", "label": "", "metadata": {}, "score": "58.427708"}
{"text": "The column 75 transform of paradigm 004 produces a baseform having no characters removed while the column 77 and 79 transforms of paradigm 004 produce baseforms having ay character removed from the candidate word .Thus , when processor 30 acts in accordance with the instructions of paradigms 001 or 004 to form all possible baseforms of a candidate word , the processor will form baseforms that vary in length .", "label": "", "metadata": {}, "score": "58.462017"}
{"text": "The column 75 transform of paradigm 004 produces a baseform having no characters removed while the column 77 and 79 transforms of paradigm 004 produce baseforms having ay character removed from the candidate word .Thus , when processor 30 acts in accordance with the instructions of paradigms 001 or 004 to form all possible baseforms of a candidate word , the processor will form baseforms that vary in length .", "label": "", "metadata": {}, "score": "58.462017"}
{"text": "That is , if the candidate word matches the subparadigm 's baseform no uninflection is necessary .In many situations , however , the candidate word will not match the paradigm baseform .When the candidate word differs from the paradigm baseform , logical flow proceeds to action box 318 .", "label": "", "metadata": {}, "score": "58.466972"}
{"text": "That is , if the candidate word matches the subparadigm 's baseform no uninflection is necessary .In many situations , however , the candidate word will not match the paradigm baseform .When the candidate word differs from the paradigm baseform , logical flow proceeds to action box 318 .", "label": "", "metadata": {}, "score": "58.466972"}
{"text": "If the selected character and entry match , then additional linguistic processing is appropriate .After a successful match , the associator associates a tag with a token located proximal to the selected character , the tag identifying the appropriate additional linguistic processing .", "label": "", "metadata": {}, "score": "58.48204"}
{"text": "In general , noun phrases are formed by concatenating together two or more contiguous tokens having parts - of - speech functionally related to nouns .Those parts - of - speech functionally related to nouns include the following parts - of - speech : singular common noun ( NN ) , adjective ( JJ ) , ordinal number ( ON ) , cardinal number ( CD ) .", "label": "", "metadata": {}, "score": "58.4912"}
{"text": "In general , noun phrases are formed by concatenating together two or more contiguous tokens having parts - of - speech functionally related to nouns .Those parts - of - speech functionally related to nouns include the following parts - of - speech : singular common noun ( NN ) , adjective ( JJ ) , ordinal number ( ON ) , cardinal number ( CD ) .", "label": "", "metadata": {}, "score": "58.4912"}
{"text": "Evaluation .In this section , we are going to evaluate Xerox Arabic morphological analyzer , the Arabic morphological analyzer by Otakar Smrz , and our system .We note that a standard annotated corpus for Arabic language is not yet available , and for this reason , the process of evaluation will be difficult .", "label": "", "metadata": {}, "score": "58.501305"}
{"text": "A method in accordance with claim 1 , wherein the intermediate baseform formed varies as a function of the matched transform .A method in accordance with claim 1 , further comprising the steps of : . locating a portmanteau paradigm in the second addressable table as a function of the first lexical expression , the portmanteau paradigm including the locations of a plurality of paradigms , and . identifying at least a first paradigm selected from the plurality of paradigms included in the portmanteau paradigm .", "label": "", "metadata": {}, "score": "58.505608"}
{"text": "A computerized data processing method according to claim 25 , wherein said identifying step further comprises the step of identifying a beginning of a first token as a function of the attributes associated with the first token .A computerized data processing method according to claim 25 , wherein said identifying step further comprises the step of identifying an end of a first token as a function of a pattern formed by a plurality of characters in the stream of digitized text .", "label": "", "metadata": {}, "score": "58.523346"}
{"text": "For example , a token having a part - of - speech tag functionally related to noun word forms and following a token that has been identified as the beginning of the noun phrase is identified as a token contained within the middle of the noun phrase .", "label": "", "metadata": {}, "score": "58.642693"}
{"text": "For example , lines 1 - 4 specify a rule for identifying the end of a noun phrase ._ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ .", "label": "", "metadata": {}, "score": "58.64924"}
{"text": "While in another embodiment the processor 30 compares the infix of the candidate word with the second functional element of the selected morphological transform .Following the comparison step , processor 30 then identifies those morphological transforms having morphological patterns matching the selected parameter of the candidate word as an appropriate transform for the candidate word .", "label": "", "metadata": {}, "score": "58.68607"}
{"text": "While in another embodiment the processor 30 compares the infix of the candidate word with the second functional element of the selected morphological transform .Following the comparison step , processor 30 then identifies those morphological transforms having morphological patterns matching the selected parameter of the candidate word as an appropriate transform for the candidate word .", "label": "", "metadata": {}, "score": "58.68607"}
{"text": "10 illustrates a pseudocode listing that processor 47 executes to ensure agreement between the various members contained within an identified noun phrase .In particular , processor 47 iteratively checks whether a first identified part of a noun phrase agrees with a second identified part of the noun phrase that immediately follows the first identified part in the stream of text .", "label": "", "metadata": {}, "score": "58.689064"}
{"text": "10 illustrates a pseudocode listing that processor 47 executes to ensure agreement between the various members contained within an identified noun phrase .In particular , processor 47 iteratively checks whether a first identified part of a noun phrase agrees with a second identified part of the noun phrase that immediately follows the first identified part in the stream of text .", "label": "", "metadata": {}, "score": "58.689064"}
{"text": "There has been a case mismatch in the manner by which six files were named in the data , compared with their names in the documentation and the script , which caused the analyzer to crash on case sensitive systems .This problem has been remedied and you can now download the fixed version of the analyzer .", "label": "", "metadata": {}, "score": "58.704536"}
{"text": "A computerized data processing method according to claim 37 , further comprising the step of splitting said candidate token into multiple tokens .A computerized data processing method according to claim 37 , further comprising the step of stripping a character from said candidate token .", "label": "", "metadata": {}, "score": "58.73506"}
{"text": "By utilizing baseforms of variable length , the invention removes many of the disadvantages associated with earlier natural language processing techniques , including the need for a large exception dictionary .The morphological file 71 includes transforms having a variable length baseform , such as paradigm numbers 001 and 004 .", "label": "", "metadata": {}, "score": "58.84639"}
{"text": "By utilizing baseforms of variable length , the invention removes many of the disadvantages associated with earlier natural language processing techniques , including the need for a large exception dictionary .The morphological file 71 includes transforms having a variable length baseform , such as paradigm numbers 001 and 004 .", "label": "", "metadata": {}, "score": "58.84639"}
{"text": "No .5,794,177 .BACKGROUND OF THE INVENTION .The present invention relates to automated language analysis systems , and relates to such systems embodied in the computer for receiving digitally encoded text composed in a natural language .In particular , it relates to systems for tokenizing and analyzing lexical matter found in a stream of natural language text .", "label": "", "metadata": {}, "score": "58.90422"}
{"text": "For example , lines 1 - 6 specify a rule for identifying the end of a noun phrase ._ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ .", "label": "", "metadata": {}, "score": "58.922646"}
{"text": "for example , lines 1 - 6 specify a rule for identifying the end of a noun phrase ._ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ .", "label": "", "metadata": {}, "score": "58.922646"}
{"text": "The implementation of the morphological rules class permits to put into practice all the possible concatenations between components ( Figure 7 ) .Figure 7 : Class of rules which represent the components prefixed by the prefix \" la \" and \" bi \" .", "label": "", "metadata": {}, "score": "58.94964"}
{"text": "At decision box 116 , the tokenizer queries whether the current character being processed is next in a pattern .The tokenizer performs these operations by relying on the character analyzer 440 and the contextual processor 442 .If the character is not in a pattern , then logical flow branches to action box 124 .", "label": "", "metadata": {}, "score": "59.007553"}
{"text": "The modifying processor 438 is associated with step 104 .In particular , the character analyzer and the contextual processor identify significant patterns formed by characters in the input stream of text .While , the modifying processor provides the tokenizer with the capability to modify the token and/or the token attributes as a function of significant patterns associated with the token currently being processed .", "label": "", "metadata": {}, "score": "59.06781"}
{"text": "A tokenizer according to claim 45 , wherein said internal character attributes are selected from the group consisting of leading apostrophe , internal apostrophe , trailing apostrophe , leading hyphen , internal hyphen , trailing hyphen , internal slash , and internal parentheses .", "label": "", "metadata": {}, "score": "59.112946"}
{"text": "No .5,680,628 .BACKGROUND OF THE INVENTION .This invention relates to methods and apparatus of automated language analysis systems .It provides systems embodied in a computer for receiving digitally encoded text composed in a natural language , and it provides systems for the grammatical analysis and generation of encoded text .", "label": "", "metadata": {}, "score": "59.155193"}
{"text": "In the following paragraphs , we present a detail of how to construct all the morphological automatons of the Arabic language and technique used in this constructing .So as to build a morphological automaton of the Arabic language , we have classified words of the Arabic language in to two categories : the first category is that which submits to the derivation process , while the second one does not .", "label": "", "metadata": {}, "score": "59.161583"}
{"text": "The set \u03c4 also represents the transition function of the morphological automaton .Consequently , the building of the morphological automaton of the Arabic language needs to use the XMODEL database discussed before .We have to extract all the morphological rules from this database and construct a morphological automaton of each rule .", "label": "", "metadata": {}, "score": "59.18715"}
{"text": ", token i-1 ! , and token i ! all have the above listed agreement tags in common , the contents of the temp2 area are copied to temp1 , and the next token is retrieved ._ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ temp1 Singular , Plural , Feminine Masculinetemp2 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ .", "label": "", "metadata": {}, "score": "59.26654"}
{"text": ", token i-1 ! , and token i ! all have the above listed agreement tags in common , the contents of the temp2 area are copied to temp1 , and the next token is retrieved ._ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ temp1 Singular , Plural , Feminine Masculinetemp2 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ .", "label": "", "metadata": {}, "score": "59.26654"}
{"text": "The advantages of this analyzer are , on the one hand , the ability of a large coverage .On the other hand , it is based on rules and also provides an English glossary for each word .ElixirFM : An Arabic Morphological Analyzer by Otakar Smrz .", "label": "", "metadata": {}, "score": "59.361557"}
{"text": "FIGS .7A-7D are flow charts illustrating the operation of tokenizer 1 .FIG .7A generally illustrates the main trunk of the tokenization operation , FIG .7B illustrates the token identification steps , FIG .7C illustrates the token lengthening steps , and FIG .", "label": "", "metadata": {}, "score": "59.502716"}
{"text": "Output buffer 404 contains a list of the lexical expressions found in the input buffer 400 , and box 406 contains the identified noun phrases cashflow and dividendyield .FIG .12 demonstrates the ability of the noun - phrase analyzer 10 to identify groups of words having a specific meaning when combined .", "label": "", "metadata": {}, "score": "59.61516"}
{"text": "In addition , they are important in correcting errors in OCR .In this thesis , a successful spell checking and correction prototype for Arabic text is designed and developed .This work consists of collecting Arabic text corpus from different topics such as news , short stories , and books .", "label": "", "metadata": {}, "score": "59.68042"}
{"text": "The contextual processor selects the candidate token as a function of the lexical and nonlexical characters surrounding a character in the stream of text .Both the character analyzer and the contextual analyzer operate effectively under many languages .For instance , the character analyzer and the contextual analyzer operate in English , French , Catalan , Spanish , Italian , Portuguese , German , Danish , Norwegian , Swedish , Dutch , Finish , Russian , and Czech .", "label": "", "metadata": {}, "score": "59.832607"}
{"text": "The tokens are converted back to stream format upon output to the application program interface 11 .The filter can be implemented in either electronic hardware or software instructions executed by a multi - purpose computer .Flow charts and descriptions of the software sufficient to enable one skilled in the art to generate a filter 434 are described below .", "label": "", "metadata": {}, "score": "59.990654"}
{"text": "Laerty , J. : Conditional random fields : Probabilistic models for segmenting and labeling sequence data .In : The Eighteenth International Conference on Machine Learning , pp .282 - 289 ( 2001 ) .Jurafsky , D. , Martin , J.H. : Speech and Language Processing ; an Introduction to Natural Language Processing , Computational Linguistics , and Speech Processing .", "label": "", "metadata": {}, "score": "60.10363"}
{"text": "The parser 430 parses the stream of natural language text and extracts lexical and non - lexical characters from the stream of text .The identifier 432 identifies a set of tokens in the parsed stream of text output by the parser 430 .", "label": "", "metadata": {}, "score": "60.1412"}
{"text": "In one case , the text within the parentheses is disregarded , and in the second form , the text is included In order to simplify the processing for the Output Manager , only tokens that contain parentheses in this form are marked .", "label": "", "metadata": {}, "score": "60.189636"}
{"text": "The table below shows the parser 's performance on the development test data sets , as defined above .Here , \" factF1 \" is the Parseval F1 of Labeled Precision and Recall , and \" factDA \" is the dependency accuracy of the factored parser ( based on untyped dependencies imputed from \" head rules \" ) .", "label": "", "metadata": {}, "score": "60.228394"}
{"text": "English lists about 650 entries in this table , French about 1900 , Swedish about 2000 .Other languages fall within this range .The Noun Inflection Pattern Field 46 , the Verb Inflection Pattern Field 48 , and the Adjective / Adverb Inflection Pattern Field 50 give the respective pattern numbers used in inflecting or uninflecting noun , verb , and adjective / adverb forms .", "label": "", "metadata": {}, "score": "60.27941"}
{"text": "First , the first POS tag from each token in checked for agreement ._ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _", "label": "", "metadata": {}, "score": "60.407265"}
{"text": "Our system shows a word error rate ( WER ) of 4.4 % on the morphological diacritization , ignoring the last letter diacritics , and 11.4 % on the full - form diacritization including case ending diacritics .This means an absolute 1.1 % reduction on the word error rate ( WER ) over the best reported system .", "label": "", "metadata": {}, "score": "60.489014"}
{"text": "The tokenizer operates such that the filter selects out those candidate tokens suitable for additional linguistic processing from the stream of natural language text .The filter element found in the tokenizer can include a character analyzer for selecting a candidate token from various tokens found in the stream of text .", "label": "", "metadata": {}, "score": "60.595146"}
{"text": "Another object of the invention is to provide a system having a strip and add processor that accurately constructs variable - length inflectional and derivational bases of words contained in natural language text .SUMMARY OF THE INVENTION .The invention attains these and other objects by providing a unique system for organizing , utilizing , and analyzing morphological data associated with a candidate word obtained from a stream of natural language text .", "label": "", "metadata": {}, "score": "60.606934"}
{"text": "FIG .16 is a flow chart for the underivation ( derivation reduction ) module of FIG .1 ; and .FIG .17 is a flow chart for the derivation expansion module of FIG .1 . DETAILED DESCRIPTION OF THE DRAWINGS .", "label": "", "metadata": {}, "score": "60.61682"}
{"text": "Further in accordance with this aspect , the window of sequential tokens includes a token currently undergoing analysis , called a candidate token , and tokens preceding and following the candidate token in the stream of text .Preferably , the window of tokens includes the candidate token and one token immediately following the candidate token in the stream of text and one token immediately preceding the candidate token in the stream of text .", "label": "", "metadata": {}, "score": "60.62842"}
{"text": "Further in accordance with this aspect , the window of sequential tokens includes a token currently undergoing analysis , called a candidate token , and tokens preceding and following the candidate token in the stream of text .Preferably , the window of tokens includes the candidate token and one token immediately following the candidate token in the stream of text and one token immediately preceding the candidate token in the stream of text .", "label": "", "metadata": {}, "score": "60.62842"}
{"text": "Action box 356 ends the FOR - LOOP begun at action box 344 .FIG .16 depicts a further processing sequence for the underivation ( derivation reduction ) module 7 of the morphological analyzer 2 , that begins at step 360 .", "label": "", "metadata": {}, "score": "60.650215"}
{"text": "Action box 356 ends the FOR - LOOP begun at action box 344 .FIG .16 depicts a further processing sequence for the underivation ( derivation reduction ) module 7 of the morphological analyzer 2 , that begins at step 360 .", "label": "", "metadata": {}, "score": "60.650215"}
{"text": "[ 15 ] ) .At the graphical level , a scheme generally constitutes of the following .We have grouped in the first category of words the following items : ( i ) derived nouns \" ealaSmAe ealmu . taqqa \" /\u0627\u0644\u0623\u0633\u0645\u0627\u0621", "label": "", "metadata": {}, "score": "60.724144"}
{"text": "The work presented is developed using Java language .Therefore , our analyzer can be run in any platform such as Windows , Linux , UNIX , and Mac OS .( v )The facility of maintenance : it is easy to add some new features to our system if the user or the linguist needs them for his Arabic morphological analysis .", "label": "", "metadata": {}, "score": "60.761505"}
{"text": "Include the undiacritized texts .( iv ) Develop a system for Arabic learning .( v )The help of the correction and the generation of texts .( vi ) Automatic understanding of the texts : classification of texts , automatic summary , and automatic extraction of the key words .", "label": "", "metadata": {}, "score": "60.82235"}
{"text": "For instance , the candidate word contains a part - of - speech of noun plural which must first be matched with particular inflectional transforms contained within the noun paradigm .The matching can be accomplished , in one embodiment , by comparing the parts - of - speech associated with a particular transform to the part - of - speech of the candidate words .", "label": "", "metadata": {}, "score": "60.845627"}
{"text": "For instance , the candidate word contains a part - of - speech of noun plural which must first be matched with particular inflectional transforms contained within the noun paradigm .The matching can be accomplished , in one embodiment , by comparing the parts - of - speech associated with a particular transform to the part - of - speech of the candidate words .", "label": "", "metadata": {}, "score": "60.845627"}
{"text": "This set of information is about the following .( i )The gender of the word : masculine or feminine .( ii )The person of the word : first , second , or third person .( iii )", "label": "", "metadata": {}, "score": "60.86017"}
{"text": "As illustrated in FIGS .7A-7I , tokenizer 43 can comprise a system for extracting lexical matter from the stream of text and a system for filtering the stream of text .Tokenizer 43 receives input from input line 41 in the form of a text stream consisting of alternating lexical and non - lexical matter ; accordingly , lexical tokens are separated by non - lexical matter .", "label": "", "metadata": {}, "score": "60.88931"}
{"text": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _Agreement Tags Agreement Tags Agreement Tags______________________________________i-1 Plural , Masculine Singular , Masculinei Singular , Feminine Singular , Masculine Plural , Masculine______________________________________(Tag1 & Tag2 & Number Map ) & ( Tag1 & Tag2 & GenderMap)passes passes _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ .", "label": "", "metadata": {}, "score": "60.897972"}
{"text": "The future works which will be done on the construction of Arabic lexicon using LMF will prove this remark .The second advantage of our approach concerns the grammatical features that characterize every lexical entry in the lexicon which will be useful especially in the future works to be done .", "label": "", "metadata": {}, "score": "60.949417"}
{"text": "On the other hands , it gives the information about the word analyzed using a list of morphological descriptors which permits to characterize every Arabic word .Our system has some disadvantages compared to some other systems .Firstly , it can not handle undiacritized texts .", "label": "", "metadata": {}, "score": "61.007313"}
{"text": "Accordingly , many in the field have concluded that current stemming procedures can not significantly improve coverage of the stemming algorithm without reducing their accuracy .Another drawback of these prior systems is their inability to generate all the variant forms from a given stem .", "label": "", "metadata": {}, "score": "61.01554"}
{"text": "BRIEF DESCRIPTION OF THE DRAWINGS .FIG .1 is a block diagram of a programmable multilingual text processor according to the present invention ; .FIG .2 illustrates a group of data structures formed by the processor of FIG .", "label": "", "metadata": {}, "score": "61.029236"}
{"text": "At action box 118 , the tokenizer obtains an additional character .At decision box 120 , the tokenizer queries whether the pattern is now completed .If the pattern is completed , then the tokenizer modifies the appropriate token attributes at action box 122 .", "label": "", "metadata": {}, "score": "61.03145"}
{"text": "In particular applications , however , the user may introduce user - defined stoplist nouns and adjectives .For example , a user may chose to treat semantically vague generic nouns such as use and type as stoplist nouns .In addition , lines 8 - 10 represent a third rule .", "label": "", "metadata": {}, "score": "61.250046"}
{"text": "Many of the elements of the multilingual text processor 10 can be selected from any of numerous commercially available devices .In operation , keyboard 18 and display 20 provide structural elements for interfacing with a user of the multilingual text processor 10 .", "label": "", "metadata": {}, "score": "61.28161"}
{"text": "Many of the elements of the multilingual text processor 10 can be selected from any of numerous commercially available devices .In operation , keyboard 18 and display 20 provide structural elements for interfacing with a user of the multilingual text processor 10 .", "label": "", "metadata": {}, "score": "61.28161"}
{"text": "App Block initiates a session in the noun - phrase analyzer 13 or in the morphological analyzer / generator 2 , and assigns a number to the session that uniquely identifies the session .The identifying number is used to track the allocated memory and execution status and to automatically free the memory once the session ends .", "label": "", "metadata": {}, "score": "61.340126"}
{"text": "The advantage of this analyzer is that it gives to the user four different modes of operation ( resolve , inflect , derive and lookup ) for analyzing an Arabic word or text .But the system has limited coverage , because it analyzes only words in the modern written arabic .", "label": "", "metadata": {}, "score": "61.360947"}
{"text": "comparing means for comparing a selected character in the parsed stream of text with entries in a character table , and . associating means for associating a first tag with a first token located proximal to said selected character , when said selected character has an equivalent entry in the character table .", "label": "", "metadata": {}, "score": "61.37694"}
{"text": "The Has Mandatory Hyphen Field 36 stores information about words which change spelling when hyphenated at the ends of lines .In Germanic languages , the spelling of a word may change if it is hyphenated .This information can be encoded for both the hyphenated and unhyphenated forms of a word .", "label": "", "metadata": {}, "score": "61.396637"}
{"text": "The Has Mandatory Hyphen Field 36 stores information about words which change spelling when hyphenated at the ends of lines .In Germanic languages , the spelling of a word may change if it is hyphenated .This information can be encoded for both the hyphenated and unhyphenated forms of a word .", "label": "", "metadata": {}, "score": "61.396637"}
{"text": "FIG .7B shows steps 136 - 178 in the operation of tokenizer 1 .In particular , at decision box 136 the tokenizer queries whether the token is complete .If the token is complete , logical flow proceeds to decision box 138 .", "label": "", "metadata": {}, "score": "61.412098"}
{"text": "The token i-2 ! , identified as the \" beginning of the noun phrase \" has all of its agreement tags copied to a temporary area , temp1 ._ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ temp1 Plural , Singular , Singular , Masculine Masculine Femininetemp2 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ .", "label": "", "metadata": {}, "score": "61.42223"}
{"text": "After boxes 346 and 348 , logical flow proceeds to box 350 .At step 350 characters are removed from the baseform to form an intermediate baseform , and at step 352 characters are added to the intermediate baseform to form the inflected pattern .", "label": "", "metadata": {}, "score": "61.461258"}
{"text": "After boxes 346 and 348 , logical flow proceeds to box 350 .At step 350 characters are removed from the baseform to form an intermediate baseform , and at step 352 characters are added to the intermediate baseform to form the inflected pattern .", "label": "", "metadata": {}, "score": "61.461258"}
{"text": "4C , every morphological transform identified in columns 75 , 77 and 79 is structured as follows : ._ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ .", "label": "", "metadata": {}, "score": "61.467598"}
{"text": "FIG .9 is a representative table of rules for the disambiguator shown in FIG .6 ; .FIG .10 illustrates pseudocode for the agreement checker of FIG .6 ; .FIG .11 contains pseudocode for the noun - phrase truncator of FIG .", "label": "", "metadata": {}, "score": "61.51645"}
{"text": "Property of Classes This one requires assigning a set of morphological components to the common morphological properties .For example , all components are masculine names .This type of property is known as property of classes .To realize this , we introduce the \" is \" tag ( Figure 4 ) .", "label": "", "metadata": {}, "score": "61.54102"}
{"text": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _Agreement Tags Agreement Tags Agreement Tags______________________________________i-1 Plural , Masculine Singular , Masculinei Singular , Feminine Singular , Feminine Plural , Masculine______________________________________(Tag1 & Tag2 & Number Map ) & ( Tag1 & Tag2 & GenderMap)fails passes _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ .", "label": "", "metadata": {}, "score": "61.56107"}
{"text": "The Linguistic Data Consortium is releasing this software under the GNU General Public License ; organizations interested in licensing the lexicon and/or morphological analyzer for commercial use should contact : QAMUS LLC 448 South 48th St. Philadelphia , PA 19143 ATTN :", "label": "", "metadata": {}, "score": "61.618187"}
{"text": "The novel tokenizer disclosed herein is a powerful software tool that hardware and software manufacturers can integrate into applications to help end - users find and retrieve information quickly and easily in multiple languages .The invention achieves this by providing a linguistically intelligent approach to index pre - processing , search pre - processing , and search expansion .", "label": "", "metadata": {}, "score": "61.720097"}
{"text": "A tokenizer according to claim 18 , wherein said parameters include a flag identifying the number of lexical characters forming a token .A tokenizer according to claim 18 , wherein said parameters include the lexical and non - lexical attributes of a token .", "label": "", "metadata": {}, "score": "61.85142"}
{"text": "A tokenizer according to claim 18 , wherein said parameters include an input stream flag identifying the location of a digitized stream of natural language text in said memory element .A tokenizer according to claim 18 , wherein said parameters include a flag identifying the number of lexical characters and non - lexical characters forming a token .", "label": "", "metadata": {}, "score": "61.917213"}
{"text": "If the part - of - speech tag of the candidate word agrees with the current paradigm , then logical flow proceeds to decision box 316 .Decision box 316 illustrates one preferred embodiment of the invention , wherein the candidate word is compared to the paradigm 's baseform .", "label": "", "metadata": {}, "score": "61.942146"}
{"text": "If the part - of - speech tag of the candidate word agrees with the current paradigm , then logical flow proceeds to decision box 316 .Decision box 316 illustrates one preferred embodiment of the invention , wherein the candidate word is compared to the paradigm 's baseform .", "label": "", "metadata": {}, "score": "61.942146"}
{"text": "In this part , we describe the Arabic morphological analyzer .This latter is based on using morphological automaton technology .The implementation of each morphological analyzer for any language needs a main resource .This resource is the morphological database , so the first task is the conception and the realization of a morphological database .", "label": "", "metadata": {}, "score": "62.12336"}
{"text": "These same algorithms convert all inflected forms of swim to sw because this is the longest common substring .Both stemming and more refined morphological analysis systems , however , have proven difficult to implement because of the special mechanisms required to deal with irregular morphological patterns .", "label": "", "metadata": {}, "score": "62.187225"}
{"text": "The invention can accommodate the various locations of affixes by using its unique strip and add algorithm .The invention provides a system which enables people to enhance the quality of their writing and to use information more effectively .The morphological analyzer and generator is a powerful software tool that hardware and software manufacturers can integrate into applications to help end - users find and retrieve information quickly and easily in multiple languages .", "label": "", "metadata": {}, "score": "62.290184"}
{"text": "Automated language analysis systems embedded in a computer typically include a lexicon module and a processing module .The lexicon module is a \" dictionary \" or database containing words and semantic knowledge related to each word .The processing module includes a plurality of analysis modules which operate upon the input text and the lexicon module in order to process the text and generate a computer understandable semantic representation of the natural language text .", "label": "", "metadata": {}, "score": "62.381683"}
{"text": "Morphological Properties Class .It permits to characterize the different morphological components represented by the morphological class : a morphological property class contains a set of morphological descriptors or morphological values of properties that would be assigned to the different morphological components .", "label": "", "metadata": {}, "score": "62.38892"}
{"text": "Input to the tokenizer 1 is in the form of a text stream form the application program interface 11 .The parser 430 of the tokenizer 1 converts the input stream of text to lexical and non - lexical characters , after which the identifier 432 converts the lexical and non - lexical characters to tokens .", "label": "", "metadata": {}, "score": "62.40625"}
{"text": "So , related to the example in Figure 11 , the automaton contains 19 states including 4 accepting states ( \" 19 \" , \" 16 \" , \" 17 \" , and \" 18 \" ) which represent the four schemes .", "label": "", "metadata": {}, "score": "62.426888"}
{"text": "So as to develop a morphological analyzer of the Arabic language , representing the morphological knowledge becomes very crucial .Besides this , it is viewed as one of the central problems of the automatic processing of the Arabic morphology .According to some works , in order to represent the morphological knowledge of the Arabic language , they have chosen to use the database concept as a basic support to store the morphological information as discussed elsewhere [ 5 , 10 ] .", "label": "", "metadata": {}, "score": "62.500675"}
{"text": "Abstract .We present an XML approach for the production of an Arabic morphological database for Arabic language that will be used in morphological analysis for modern standard Arabic ( MSA ) .Optimizing the production , maintenance , and extension of morphological database is one of the crucial aspects impacting natural language processing ( NLP ) .", "label": "", "metadata": {}, "score": "62.504707"}
{"text": "Processor 30 initiates operation of the noun - phrase analyzer 13 by making the calls to the interface 11 , as described above .Noun - phrase analyzer 13 operates upon the text contained in input buffer 15 and generates and places in the interface 11 the token list 17 and the output buffer 19 .", "label": "", "metadata": {}, "score": "62.62713"}
{"text": "Processor 30 initiates operation of the noun - phrase analyzer 13 by making the calls to the interface 11 , as described above .Noun - phrase analyzer 13 operates upon the text contained in input buffer 15 and generates and places in the interface 11 the token list 17 and the output buffer 19 .", "label": "", "metadata": {}, "score": "62.62713"}
{"text": "Using the new language helps direct search for information and determinism .It also enables us to represent the whole components , properties , and morphological rules with a very optimal way .Our language makes it possible for us to represent the Arabic morphology as morphological classes and rules .", "label": "", "metadata": {}, "score": "62.640903"}
{"text": "For instance , data processing systems using knowledge of lexical morphology can enhance indexing and searching techniques .Current natural language text processing systems known in the art attempt to effectively use natural language text by processing the natural language text with computer systems .", "label": "", "metadata": {}, "score": "62.67024"}
{"text": "Token list 17 contains a token 21 for each output word 23 .Each token 21 links an input word 25 with its corresponding output word 23 by pointing to both the input word 25 and the output word 23 .In addition to linking the input and output , each token describes the words they identify .", "label": "", "metadata": {}, "score": "62.676712"}
{"text": "Token list 17 contains a token 21 for each output word 23 .Each token 21 links an input word 25 with its corresponding output word 23 by pointing to both the input word 25 and the output word 23 .In addition to linking the input and output , each token describes the words they identify .", "label": "", "metadata": {}, "score": "62.676712"}
{"text": "The Period can either indicate the end of a sentence , abbreviations , or numeric tokens , depending on the context .Accordingly , the period is analyzed by both the character and contextual analyzer of the filter 434 .Slash .", "label": "", "metadata": {}, "score": "62.711647"}
{"text": "FIG .7A shows steps 80 - 134 in the operation of the tokenizer 1 .The operation of tokenizer 1 begins at step 80 .After step 80 , the operation proceeds to step 82 .At step 82 , the tokenizer reserves space in memory 12 for the token .", "label": "", "metadata": {}, "score": "62.715317"}
{"text": "A method in accordance with claim 1 , wherein said matching step further comprises : . identifying a parameter of the candidate word , . selecting a morphological pattern for each transform , and .matching a transform with the candidate word when the identified parameter of the candidate word matches the selected morphological pattern .", "label": "", "metadata": {}, "score": "62.804596"}
{"text": "Xerox Arabic morphological Analyzer is well known in the literature and available for evaluation and well documented .This analyzer is constructed using finite state technology ( FST ) as discussed by Beesley [ 4 , 5 ] .It adopts the root and pattern approach .", "label": "", "metadata": {}, "score": "62.827827"}
{"text": "FIG .15 is a flow chart for the inflection expansion module of FIG .1 ; .FIG .16 is a flow chart for the underivation ( derivation reduction ) module of FIG .1 ; .FIG .17 is a flow chart for the derivation expansion module of FIG .", "label": "", "metadata": {}, "score": "62.866924"}
{"text": "Logical flow proceeds from box 244 to box 245 .At action box 245 tokenizer 43 extracts a token from the stream of text specified by the user .In one embodiment , the tokenizer extracts a first token representative of the first lexical expression contained in the stream of natural language text and continues to extract tokens representative of each succeeding lexical expression contained in the identified stream of text .", "label": "", "metadata": {}, "score": "62.991867"}
{"text": "Logical flow proceeds from box 244 to box 245 .At action box 245 tokenizer 43 extracts a token from the stream of text specified by the user .In one embodiment , the tokenizer extracts a first token representative of the first lexical expression contained in the stream of natural language text and continues to extract tokens representative of each succeeding lexical expression contained in the identified stream of text .", "label": "", "metadata": {}, "score": "62.991867"}
{"text": "Steps 138 - 152 are performed within the confines of various token sub - processors .In particular , the modifying processor 438 , the character analyzer 440 , and the contextual processor 442 each play a part in performing steps 138 - 152 .", "label": "", "metadata": {}, "score": "63.039898"}
{"text": "This list of advanced linguistic processing is intended as an example of additional processing and not as a limitation on the invention .The filter 434 can also include a modifying processor 438 .The modifying processor changes a selected token based on the tags identifying further linguistic processing for the selected token .", "label": "", "metadata": {}, "score": "63.071533"}
{"text": "At step 158 , another sub - processor of the tokenizer acts .In particular , at step 158 the identifier 432 appends the current character to the token being formed .The identifier thus acts throughout the tokenizer process described in FIGS .", "label": "", "metadata": {}, "score": "63.32022"}
{"text": "We note that we have used an innovative language ( XMODEL ) to represent the Arabic morphological knowledge .The use of this new language helps us to reduce the number of the entries in the lexicon .It also makes our system very flexible and one of the best existing morphological analyzers for the Arabic language .", "label": "", "metadata": {}, "score": "63.46512"}
{"text": "The token i-2 ! , identified as the \" beginning of the noun phrase \" has all of its agreement tags copied to a temporary area , temp1 ._ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ Plural , Singular , Singular , temp1 Masculine Masculine Femininetemp2 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ .", "label": "", "metadata": {}, "score": "63.5466"}
{"text": "If the tokenizer is not at the end of the document , then control branches to action box 94 , otherwise control proceeds to action box 98 .At action box 94 , the tokenizer removes the space reserved for a token back in action box 82 .", "label": "", "metadata": {}, "score": "63.560196"}
{"text": "immediately preceding the token i-1 ! and identified with the label 260 .Accordingly , the table illustrated in FIG .9 represents a group of six disambiguation rules that are applied by disambiguator 59 , as part of the operations of the processor 47 , to a window of sequential tokens containing the ambiguous token i !", "label": "", "metadata": {}, "score": "63.597794"}
{"text": "immediately preceding the token i-1 ! and identified with the label 260 .Accordingly , the table illustrated in FIG .9 represents a group of six disambiguation rules that are applied by disambiguator 59 , as part of the operations of the processor 47 , to a window of sequential tokens containing the ambiguous token i !", "label": "", "metadata": {}, "score": "63.597794"}
{"text": "Arabic morphology is one of the essential needs in this domain , and lots of morphological analyzers are available now , some of them have a commercial purpose , and the others are available for research and evaluation as discussed by Attia [ 1 ] .", "label": "", "metadata": {}, "score": "63.609375"}
{"text": "A tokenizer according to claim 1 , wherein said filtering means further comprises an associative processing element for associating with said candidate token a tag identifying additional linguistic processing for said candidate token .A tokenizer according to claim 2 , wherein said associative processing element further includes a group processing element for associating with a plurality of tokens , as a function of said candidate token , a plurality of tags identifying additional linguistic processing for said plurality of tokens .", "label": "", "metadata": {}, "score": "63.625984"}
{"text": "But being given the wealth of the Arabic word 's structure and the problem of agglutination , the operation becomes more complex than in the other languages .We also note that diacritics are particularities for our language , and they are also considered as another source of difficulty for morphological analysis .", "label": "", "metadata": {}, "score": "63.654617"}
{"text": "At decision box 142 , the tokenizer queries whether the attributes of the current character modify tokens to the left .If the character analyzer identifies that the current character modifies tokens to the left , then logical flow proceeds to step 144 .", "label": "", "metadata": {}, "score": "63.660164"}
{"text": "At action box 258 , processor 47 outputs the tokens extracted from the input stream of natural language text into the output buffer 19 of the application program interface 11 .Processor 47 also generates the token list 17 that correlates the input buffer of text 15 with the output buffer 19 , and places the token list 17 into the application program interface .", "label": "", "metadata": {}, "score": "63.7445"}
{"text": "At action box 258 , processor 47 outputs the tokens extracted from the input stream of natural language text into the output buffer 19 of the application program interface 11 .Processor 47 also generates the token list 17 that correlates the input buffer of text 15 with the output buffer 19 , and places the token list 17 into the application program interface .", "label": "", "metadata": {}, "score": "63.7445"}
{"text": "Box 366 begins a logical FOR - LOOP for processing each derivational paradigm .After box 366 , control proceeds to decision box 368 .Decision box 368 examines whether the candidate word is a derivational route or not .Determination of the derivation route characteristics of the word can be performed by analyzing the information contained within the representative entry 33 associated with the candidate word .", "label": "", "metadata": {}, "score": "63.749603"}
{"text": "One alternative to using a large exception dictionary involves forming a system having a smaller , yet incomplete , exception dictionary .Although this alternative is not as cumbersome , the incomplete data structure rapidly forms inaccurate representations of the natural language text under consideration .", "label": "", "metadata": {}, "score": "64.072876"}
{"text": "For Arabic language , this new method is still in progress , and some works try to standardize it as discussed elsewhere [ 12 - 14 ] .As we discussed before , LMF covered all levels of linguistic description ( morphologic , syntactic , and semantic ) .", "label": "", "metadata": {}, "score": "64.09361"}
{"text": "7B. At step 112 , if a token is currently under construction , then control proceeds to decision box 114 .At decision box 114 , control branches to step 180 in FIG .7C if the current character is not a whitespace .", "label": "", "metadata": {}, "score": "64.16004"}
{"text": "7A. At step 154 , in FIG .7B , the tokenizer determines whether the current character is a whitespace .If the character is a whitespace , then control proceeds to step 156 .At step 156 , the token string is cleared and process returns to step 84 of FIG .", "label": "", "metadata": {}, "score": "64.16121"}
{"text": "But they are correct , really . )Much of the Arabic - specific code , including the ArabicHeadFinder and the ArabicTreebankLanguagePack is defined inside the edu.stanford.nlp.trees.international.arabic package .But parser - specific code and the top level entry to Arabic language resources is found in the edu.stanford.nlp.parser.lexparser package .", "label": "", "metadata": {}, "score": "64.184525"}
{"text": "In order to put them into practice , we have introduced the \" uses \" tag .This means that the different morphological descriptors defined by the property of components can be used by the different morphological components of the morphological class ( Figure 3 ) .", "label": "", "metadata": {}, "score": "64.21132"}
{"text": "Additional grammatical features of a word include the word length , the language code , whether the word is an abbreviation , and whether the word is a contraction .Although not shown in FIG .3 , addresses to these additional grammatical features of a word can be stored in a representative entry 33 .", "label": "", "metadata": {}, "score": "64.24994"}
{"text": "Institutions that have membership in the LDC during the 2002 Membership .Year will be able to receive this corpus free of charge .As a ' Members .Only ' publication , the corpus is not available to nonmembers .The 1997 Hub5", "label": "", "metadata": {}, "score": "64.31389"}
{"text": "Derivation patterns are much like inflection patterns .The derivation pattern is an index into a table of derivational endings and their parts - of - speech .The Is Derivation Field 38 described above tells whether the pattern should be used for deriving or underiving .", "label": "", "metadata": {}, "score": "64.34555"}
{"text": "Derivation patterns are much like inflection patterns .The derivation pattern is an index into a table of derivational endings and their parts - of - speech .The Is Derivation Field 38 described above tells whether the pattern should be used for deriving or underiving .", "label": "", "metadata": {}, "score": "64.34555"}
{"text": "53 - 56 ( 2007 ) .Zitouni , I. , Sorensen , J.S. , Sarikaya , R. : Maximum entropy based restoration of arabic diacritics .In : Proceedings of the 21stInternational Conference on Computational Linguistics and 44th Annual Meeting of the ACL , pp .", "label": "", "metadata": {}, "score": "64.41365"}
{"text": "An apparatus according to claim 31 , further comprising tokenizing means for extracting the candidate word from a stream of natural language text .Description .RELATED APPLICATION .This application is a continuation - in - part of the commonly - owned U.S. patent application Ser .", "label": "", "metadata": {}, "score": "64.43286"}
{"text": "89 - 94 , Association for Computational Linguistics , Copenhagen , Denmark , 1996 .K. R. Beesley , \" Finite - state non - concatenative morphotactics , \" in Proceedings of the 5th Workshop of the ACL Special Interest Group in Computational Phonology ( SIGPHON ' 00 ) , pp . 1 - 12 , Luxembourg , Luxembourg , August 2000 .", "label": "", "metadata": {}, "score": "64.51523"}
{"text": "89 - 94 , Association for Computational Linguistics , Copenhagen , Denmark , 1996 .K. R. Beesley , \" Finite - state non - concatenative morphotactics , \" in Proceedings of the 5th Workshop of the ACL Special Interest Group in Computational Phonology ( SIGPHON ' 00 ) , pp . 1 - 12 , Luxembourg , Luxembourg , August 2000 .", "label": "", "metadata": {}, "score": "64.51523"}
{"text": "Morphological transform 133 indicates that patterns \" 006 \" and \" 002 \" , as identified in column 73 , are used to inflect the candidate word associated with morphological transform 133 .Accordingly , a candidate word associated with inflection transform 133 becomes further associated with inflection transforms 002 and 006 .", "label": "", "metadata": {}, "score": "64.52763"}
{"text": "It becomes evident to mention that the same class of the morphological components can use one combination of the tags \" uses \" and \" is \" .Property of Reference Another strong point of the XMODEL language is the introducing of the notion of property of reference which has an important role to benefit from the specificities of the Arabic morphology .", "label": "", "metadata": {}, "score": "64.54701"}
{"text": "For spell checking , we used Buckwalter 's Arabic morphological analyzer ( BAMA ) , a dictionary look - up and a language model on character level ( character n - grams ) .For spell correction , we used edit distance technique , N - grams language models ( word n - grams ) and OCR confusion matrix .", "label": "", "metadata": {}, "score": "64.55839"}
{"text": "An analogous system can be created to address infixation .Prefixation and infixation morphology are particularly applicable in Germanic languages , such as German and Dutch .In these languages the morphology of the word can change based upon the alteration of a character string in the beginning , middle , or end of the word .", "label": "", "metadata": {}, "score": "64.591286"}
{"text": "An analogous system can be created to address infixation .Prefixation and infixation morphology are particularly applicable in Germanic languages , such as German and Dutch .In these languages the morphology of the word can change based upon the alteration of a character string in the beginning , middle , or end of the word .", "label": "", "metadata": {}, "score": "64.591286"}
{"text": "In this work , we presented an approach for representing the lexicon resource for Arabic language constructed using a flexible and extensible language ( XMODEL ) .This morphological database used to develop a morphological analyzer for Arabic language .The strength of our morphological analyzer is the portability and the reusability because we have used Java for the development and the XML technology .", "label": "", "metadata": {}, "score": "64.59426"}
{"text": "If this fails , the second POS tag from the token i-1 ! is checked for a match : ._ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _", "label": "", "metadata": {}, "score": "64.61016"}
{"text": "This invention improves information retrieval and the precision of language processing by providing an apparatus and method for organizing , utilizing , analyzing , and generating morphological data .Having described the invention , what is claimed as new and secured by Letters Patent is : . locating in the first addressable table a first lexical expression substantially equivalent to the candidate word , . identifying a first paradigm in the second addressable table as a function of the located first lexical expression , . matching a transform in the identified first paradigm with the candidate word , . forming an intermediate baseform by stripping a first character string from the candidate word , the first character string being defined by the first morphological pattern included with the matched transform , and .", "label": "", "metadata": {}, "score": "64.61716"}
{"text": "The method presented can be exploited by NLP applications such as syntactic analysis , semantic analysis , information retrieval , and orthographical correction .Introduction .Currently , Arabic faces many challenges due to a lot of reasons such as the increase of the Arabic web sites , Arabic media , and Arabic companies around the world using the Arabic language .", "label": "", "metadata": {}, "score": "64.711395"}
{"text": "There are some tools available that can do the necessary clitic segmentation : .The present release provides a grammar ( arabicFactored.ser.gz ) for real Arabic ( arabicFactored.ser.gz ) , for which the default encoding is UTF-8 , but for which another encoding ( such as legacy Arabic encodings ) can be specified on the commmand line with the -encoding charset flag .", "label": "", "metadata": {}, "score": "64.86214"}
{"text": "Property of Components A morphological class can use a list of morphological descriptors to define its components .Generally speaking , each morphological component can have its own morphological descriptors .As for the \" gender \" property , some components of this class can be masculine , while the others can be feminine .", "label": "", "metadata": {}, "score": "64.925476"}
{"text": "After the implementation of optional boxes 384 and 386 , logical flow proceeds on to box 392 .At box 392 , the FOR - LOOP which began with box 376 ends .Box 394 ends the logical FOR - LOOP associated with action box 366 .", "label": "", "metadata": {}, "score": "65.05762"}
{"text": "After the implementation of optional boxes 384 and 386 , logical flow proceeds on to box 392 .At box 392 , the FOR - LOOP which began with box 376 ends .Box 394 ends the logical FOR - LOOP associated with action box 366 .", "label": "", "metadata": {}, "score": "65.05762"}
{"text": "The Arabic Morphological Analyzer .First of all , because our morphological analyzer is based on the morphological automaton which is the main idea of this work , so this part it will be shorter than the part of the Arabic morphological automaton .", "label": "", "metadata": {}, "score": "65.065674"}
{"text": "Morphological transform 133 indicates that patterns \" 006 \" and \" 002 \" , as identified in 30 column 73 , are used to inflect the candidate word associated with morphological transform 133 .Accordingly , a candidate word associated with inflection transform 133 becomes further associated with inflection transforms 002 and 006 .", "label": "", "metadata": {}, "score": "65.141464"}
{"text": "For instance , the data structure can include the following parameters : ._ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ pInStream Input : A pointer to the null - terminated input stream from which the tokenizer creates a token .", "label": "", "metadata": {}, "score": "65.183945"}
{"text": "Parentheses are rendered -LRB- and -RRB- .Quotes are rendered as ( ASCII ) straight single and double quotes ( ' and \" ) , not as curly quotes or LaTeX - style quotes ( unlike the Penn English Treebank ) .", "label": "", "metadata": {}, "score": "65.18889"}
{"text": "Steps 190 - 196 are identical to steps 168 - 174 of FIG .7B. For instance , steps 190 - 196 identify patterns formed by characters in the stream of text and update token attributes effected by the identified patterns .", "label": "", "metadata": {}, "score": "65.3925"}
{"text": "Furthermore , these techniques are not linguistically general and require different algorithms and particular exception dictionaries for each natural language .Accordingly , it is an object of the invention to provide an improved computer system for analyzing natural language text and for improving the precision and recall of information retrieval systems .", "label": "", "metadata": {}, "score": "65.4424"}
{"text": "Buckwalter Arabic Morphological Analyzer can be downloaded for free from .the above link .If you would like a copy placed on CD - ROM , please note .that there is a $ 100 media charge .The Voicemail Corpus Part II is the second voicemail corpus created . by Mukund Padmanabhan , Brian Kingsbury et al . at International Business .", "label": "", "metadata": {}, "score": "65.46906"}
{"text": "The choice of the Lisp or Prolog language as a support of representing the morphological knowledge may not probably be the right option .This is due to the fact that the interpreter is not well adapted to this kind of problems .", "label": "", "metadata": {}, "score": "65.495926"}
{"text": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _Agreement Tags Agreement Tags Agreement Tags______________________________________i-2 Plural , Masculine Singular , Masculine Singular , Femininei-1 Plural , Masculine Singular , Feminine Plural , Femininei Singular , Feminine Singular , Masculine Plural , Masculinei + 1 Singular , Feminine _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ .", "label": "", "metadata": {}, "score": "65.52752"}
{"text": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _Agreement Tags Agreement Tags Agreement Tags______________________________________i-2 Plural , Masculine Singular , Masculine Singular , Femininei-1 Plural , Masculine Singular , Feminine Plural , Femininei Singular , Feminine Singular , Masculine Plural , Masculinei+1 Singular , Feminine _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ .", "label": "", "metadata": {}, "score": "65.52752"}
{"text": "Portmanteau paradigm 133 can also be used to inflect install , which can also be spelled instal .The illustrated portmanteau paradigms illustrate one possible structure used for applying multiple paradigms to any particular candidate word .Another possible structure for providing portmanteau paradigms can be formed using word data table 31 and a representative entry 33 , as shown in FIG .", "label": "", "metadata": {}, "score": "65.54885"}
{"text": "Portmanteau paradigm 133 can also be used to inflect install , which can also be spelled instal .The illustrated portmanteau paradigms illustrate one possible structure used for applying multiple paradigms to any particular candidate word .Another possible structure for providing portmanteau paradigms can be formed using word data table 31 and a representative entry 33 , as shown in FIG .", "label": "", "metadata": {}, "score": "65.54885"}
{"text": "It indicates to an external module to examine the token both preceding and following the current token .In particular , it indicates that the CapCode of the following token should be examined to see if the sentence has really terminated .", "label": "", "metadata": {}, "score": "65.73222"}
{"text": "Thus , after disambiguating , each token has a highly reliable part - of - speech tag identified as the primary part - of - speech tag .FIG .9 illustrates an exemplary rule table used for disambiguating an extracted token in the English language .", "label": "", "metadata": {}, "score": "65.73839"}
{"text": "Thus , after disambiguating , each token has a highly reliable part - of - speech tag identified as the primary part - of - speech tag .FIG .9 illustrates an exemplary rule table used for disambiguating an extracted token in the English language .", "label": "", "metadata": {}, "score": "65.73839"}
{"text": "This class of tokens is collectively referred to as tokens having \" ignore tags \" .The second embodiment thus ensures , by skipping or ignoring a class of irrelevant tokens , an accurate and rapid contextual analysis of the ambiguous token without having to expand the number of tokens in the window of sequential tokens .", "label": "", "metadata": {}, "score": "65.9045"}
{"text": "This class of tokens is collectively referred to as tokens having \" ignore tags \" .The second embodiment thus ensures , by skipping or ignoring a class of irrelevant tokens , an accurate and rapid contextual analysis of the ambiguous token without having to expand the number of tokens in the window of sequential tokens .", "label": "", "metadata": {}, "score": "65.9045"}
{"text": "Box 366 begins a logical FOR - LOOP for processing each derivational paradigm .After box 366 , control proceeds to decision box 368 .Decision box 368 examines whether the candidate word is a derivational root or not .Determination of the derivation root characteristics of the word can be performed by analyzing the information contained within the representative entry 33 associated with the candidate word .", "label": "", "metadata": {}, "score": "66.0117"}
{"text": "After that , the second task is the development of a set of morphological automatons for Arabic language each of which represents a very definite category of morphology .Arabic Morphological Automaton .To implement a morphological analyzer for any language , especially Arabic language , the use of morphological automaton is considered among the most efficient methods .", "label": "", "metadata": {}, "score": "66.02211"}
{"text": "In accordance with FIG .14 , logical flow proceeds from box 318 to decision box 320 .At decision box 320 two aspects of the invention and a preferred embodiment are illustrated .In particular , action box 320 indicates that the part - of - speech tag of the candidate word can be compared with the fourth functional element of the inflectional transform ( i.e. the functional element specifying the part - of - speech of the transform ) .", "label": "", "metadata": {}, "score": "66.05223"}
{"text": "In accordance with FIG .14 , logical flow proceeds from box 318 to decision box 320 .At decision box 320 two aspects of the invention and a preferred embodiment are illustrated .In particular , action box 320 indicates that the part - of - speech tag of the candidate word can be compared with the fourth functional element of the inflectional transform ( i.e. the functional element specifying the part - of - speech of the transform ) .", "label": "", "metadata": {}, "score": "66.05223"}
{"text": "Table III contains a group of rules , in pseudocode , specific to the German Language .For example , lines 1 - 4 specify a rule for identifying the end of a noun phrase ._ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ .", "label": "", "metadata": {}, "score": "66.29921"}
{"text": "Realize some specific applications such as machine translation , Q / R systems , information retrieval systems ; that is , these applications need morphological database and morphological analysis to be developed .The next step is to use this morphological database and morphological analyzer to develop a syntactic analyzer for Arabic language using especially the syntactic information given by our system .", "label": "", "metadata": {}, "score": "66.438324"}
{"text": "At action box 164 , the tokenizer modifies the token 's attributes in accordance with patterns associated with the token .Steps 160 - 166 are executed by sub - processors within the tokenizer called the character analyzer 440 , the contextual processor 442 and the modifying processor 438 .", "label": "", "metadata": {}, "score": "66.44444"}
{"text": "The example above shows the results of the morphological analysis of some verbs using our system .The example below will show the results of the morphological analysis of some nouns .We note that this work is very rich for the information giving about every noun analyzed which makes it one of the best Arabic morphological analyzers .", "label": "", "metadata": {}, "score": "66.47916"}
{"text": "Memory for these functional elements and their associated databases is supplied by the digital computer 12 through the utilization of memory in internal memory element 22 and in external memory element 14 .In operation , App Block is the first functional block called .", "label": "", "metadata": {}, "score": "66.651634"}
{"text": "The token is not split .The Post Noun Phrase Break flag is set .The Post Noun Phrase Break flag is set .The right parenthesis behaves exactly like the mirror image of the left parenthesis .Again , the key rule is that if matching left and right parentheses are found within a lexical token , neither of the parentheses are stripped .", "label": "", "metadata": {}, "score": "66.66672"}
{"text": "Sentence splitting per se is known in the art , and is disclosed in Kucera et al . , U.S. Pat .No .4,773,009 , entitled Method and Apparatus for Text Analysis .Preferably , the stream of natural language text with identified sentence boundaries enters the digital computer 12 at the Input / Output controller 26 .", "label": "", "metadata": {}, "score": "66.73021"}
{"text": "Sentence splitting per se is known in the art , and is disclosed in Kucera et al . , U.S. Pat .No .4,773,009 , entitled Method and Apparatus for Text Analysis .Preferably , the stream of natural language text with identified sentence boundaries enters the digital computer 12 at the Input / Output controller 26 .", "label": "", "metadata": {}, "score": "66.73021"}
{"text": "The filter selects a candidate token based upon an analysis of characters in the stream of text .The filter can either compare a particular character in the stream of text with entries in a character table , or the filter can analyze the particular character in the stream of text in view of the characters surrounding the particular characters in the stream of text .", "label": "", "metadata": {}, "score": "66.81179"}
{"text": "First , in this introduction , we discuss some challenges of Arabic language and the importance of the production of morphological database and morphological analyzers in natural language processing .After that , we present some morphological analyzers for Arabic language related to our work in the Section 2 .", "label": "", "metadata": {}, "score": "66.838554"}
{"text": "The IINTHYP bit is set if one of the following two conditions occur : .The hyphen is between two lexical characters .The hyphen immediately follows a valid form of an abbreviation , and is followed by a lexical character .", "label": "", "metadata": {}, "score": "66.886284"}
{"text": "The identified representative entry contains information pertaining to the grammatical features of the word in fields 32 , 34 , 36 , 38 , 40 , 42 , 46 , 48 , 50 , 52 , 54 , 56 , 58 and 60 .", "label": "", "metadata": {}, "score": "66.90645"}
{"text": "The identified representative entry contains information pertaining to the grammatical features of the word in fields 32 , 34 , 36 , 38 , 40 , 42 , 46 , 48 , 50 , 52 , 54 , 56 , 58 and 60 .", "label": "", "metadata": {}, "score": "66.90645"}
{"text": "Parsing [ sent .1 len . 8 ] : w n$r AlEdl mn xlAl qDA ' mstql .Parsed file : arabic-onesent-buck.txt [ 1 sentences].Parsed 8 words in 1 sentences ( 7.92 wds / sec ; 0.99 sents / sec ) .", "label": "", "metadata": {}, "score": "67.00681"}
{"text": "The separation between the task of the linguist and the developer .( ii )We can also reuse our programs in future works .( iii ) Development standardization means in our application that we have build all the applications with the same standards technologies ( Java language , XML technologies , SAX , DOM , etc . ) .", "label": "", "metadata": {}, "score": "67.10929"}
{"text": "The use of XMODEL language permit to reduce the number of the entries in the morphological database which present a big problem of the other morphological analyzers .( v )Represented as a set of XMODEL files , the process of updating the Arabic morphological database is very easy to develop .", "label": "", "metadata": {}, "score": "67.16452"}
{"text": "In accordance with rule 1 , the processor 47 coerces the primary part - of - speech tag of the ambiguous token to NN ( singular common noun ) if the ambiguous token i ! is at the beginning of a sentence and has a Capcode greater than 000 and does not have a part - of - speech tag of noun .", "label": "", "metadata": {}, "score": "67.16966"}
{"text": "In accordance with rule 1 , the processor 47 coerces the primary part - of - speech tag of the ambiguous token to NN ( singular common noun ) if the ambiguous token i ! is at the beginning of a sentence and has a Capcode greater than 000 and does not have a part - of - speech tag of noun .", "label": "", "metadata": {}, "score": "67.16966"}
{"text": "A tokenizer according to claim 15 , wherein said contextual processor includes a set of rules applicable in a plurality of languages such that said tokenizer operates in the plurality of languages .A tokenizer according to claim 16 , wherein the plurality of languages is selected from the group consisting of English , French , Catalan , Spanish , Italian , Portuguese , German , Danish , Norwegian , Swedish , Dutch , Finish , Russian , and Czech .", "label": "", "metadata": {}, "score": "67.220955"}
{"text": "Lexical matter is broadly defined as information that can be found in a lexicon or dictionary , and that is relevant for information retrieval processes .The tokenizer of the invention does not view the incoming stream of text as merely containing words separated by white space .", "label": "", "metadata": {}, "score": "67.288994"}
{"text": "At action box 326 the prefix is removed from the baseform in accordance with the inflectional transform .Logical flow then proceeds to box 328 .Steps 328 , 330 , 332 , and 334 are optional steps demonstrating one implementation of the coupling between the inflection module 4 , the uninflectional module 5 , the derivation expansion module 6 , and underivation ( derivation reduction ) module 7 .", "label": "", "metadata": {}, "score": "67.343445"}
{"text": "At action box 326 the prefix is removed from the baseform in accordance with the inflectional transform .Logical flow then proceeds to box 328 .Steps 328 , 330 , 332 , and 334 are optional steps demonstrating one implementation of the coupling between the inflection module 4 , the uninflectional module 5 , the derivation expansion module 6 , and underivation ( derivation reduction ) module 7 .", "label": "", "metadata": {}, "score": "67.343445"}
{"text": "If it occurs in the middle of a token , it does not cause the token to be split , and the punctuation is instead included within the token .The contextual analyzer can also select tokens for additional processing based upon the existence of similarly related characters .", "label": "", "metadata": {}, "score": "67.40634"}
{"text": "Once a representative entry is located , the text processor 10 can provide information concerning the word drinks , such as the parts - of - speech and inflectional paradigms .In particular , the text processor 10 determines the parts - of - speech of drinks to be noun plural and verb 3rd singular present ; and the text processor determines the locations of a noun inflectional paradigm , a verb inflectional paradigm , an adjective / adverb paradigm , and a derivational paradigm .", "label": "", "metadata": {}, "score": "67.42818"}
{"text": "Once a representative entry is located , the text processor 10 can provide information concerning the word drinks , such as the parts - of - speech and inflectional paradigms .In particular , the text processor 10 determines the parts - of - speech of drinks to be noun plural and verb 3rd singular present ; and the text processor determines the locations of a noun inflectional paradigm , a verb inflectional paradigm , an adjective / adverb paradigm , and a derivational paradigm .", "label": "", "metadata": {}, "score": "67.42818"}
{"text": "At action box 412 , a string of characters is added to the intermediate root formed in action box 410 in accordance with the current derivational transform .After box 412 control proceeds to box 414 .At action box 414 a part - of - speech tag is assigned to the newly generated derivational expansion in accordance with the derivational transform .", "label": "", "metadata": {}, "score": "67.46451"}
{"text": "At action box 412 , a string of characters is added to the intermediate root formed in action box 410 in accordance with the current derivational transform .After box 412 control proceeds to box 414 .At action box 414 a part - of - speech tag is assigned to the newly generated derivational expansion in accordance with the derivational transform .", "label": "", "metadata": {}, "score": "67.46451"}
{"text": "Buckwalter , T. : Issues in Arabic orthography and morphology analysis .In : Proceedings of the COLING 2004 Workshop on Computational Approaches to Arabic Script - Based Languages , pp .31 - 34 ( 2004 ) .Emam , O. , Fisher , V. : A hierarchical approach for the statistical vowelization of arabic text .", "label": "", "metadata": {}, "score": "67.47656"}
{"text": "Action box 420 ends the FOR - LOOP associated with action box 404 , thereby ending the derivation expansion processing .THE TOKENIZER .FIG .18 illustrates a detailed drawing of the advanced tokenizer 1 for extracting lexical matter from the stream of text and for filtering the stream of text .", "label": "", "metadata": {}, "score": "67.568016"}
{"text": "Now , let us first introduce the XMODEL language which permits to represent the morphological knowledge of Arabic and consists of the following three main parties .Morphological Component Class .It enables us represent all morphological components of the Arabic language .", "label": "", "metadata": {}, "score": "67.60211"}
{"text": "Other general and specific objects of the invention will be apparent and evident from the accompanying drawings and the following description .SUMMARY OF THE INVENTION .The invention attains the foregoing and other objects with an automated language analysis system that operates under a new paradigm for identifying relative information in a stream of natural language text .", "label": "", "metadata": {}, "score": "67.66501"}
{"text": ", token i-1 ! , token i ! , and token i+1 ! all have these agreement tags in common , the contents of the temp2 area are copied to temp1 , and the next token is retrieved ._ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ temp1 Singular , Feminine temp2 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ .", "label": "", "metadata": {}, "score": "67.732086"}
{"text": ", token i-1 ! , token i ! , and token i+1 ! all have these agreement tags in common , the contents of the temp2 area are copied to temp1 , and the next token is retrieved ._ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ temp1 Singular , Feminine temp2 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ .", "label": "", "metadata": {}, "score": "67.732086"}
{"text": "This invention improves information retrieval by providing a tokenizing apparatus and method that parses natural language text in a manner that increases the throughput of an information retrieval or natural language analysis system .Method and apparatus for improved tokenization of natural language text US 5890103 A .", "label": "", "metadata": {}, "score": "67.810486"}
{"text": "The identifying number is used to track the allocated memory and execution status and to automatically free the memory once the session ends .App Block can start a session to process a single word or an entire buffer of text .", "label": "", "metadata": {}, "score": "67.86486"}
{"text": "Lexical morphology involves the study and description of word formation in a language , and in particular emphasizes the examination of inflections , derivations , and compound and cliticized words .Derivational morphology refers to the study of the processes by which words are formed from existing words or bases by adding or removing affixes ( e.g. , singer from sing ) or by changing the shape of the word or base ( e.g. , song from sing ) .", "label": "", "metadata": {}, "score": "67.911095"}
{"text": "Suite 810 email : ldc ldc.upenn.edu .This invention improves information retrieval and the precision of language processing by providing an apparatus and method for organizing , utilizing , analyzing , and generating morphological data .Method and apparatus for morphological analysis and generation of natural language text US 5794177 A .", "label": "", "metadata": {}, "score": "68.05267"}
{"text": "The code for the finite state machine must keep track of the current state of the machine , and have a way of changing from state to state based on the input stream of text .The tokenizer must also include a memory space for storing the data concerning the processed stream of natural language text .", "label": "", "metadata": {}, "score": "68.05414"}
{"text": "References .M. Attia , \" An ambiguity - controlled morphological analyzer for modern standard Arabic modelling finite state networks , \" in The Challenge of Arabic for NLP / MT Conference , The British Computer Society , London , UK , 2006 .", "label": "", "metadata": {}, "score": "68.06192"}
{"text": "If the current character starts a token , then flow proceeds to action box 140 .If the current character does not start a token , then flow proceeds to decision box 142 .At action box 140 , the tokenizer backs up to the last whitespace and then branches to step 212 of FIG .", "label": "", "metadata": {}, "score": "68.11719"}
{"text": "While the second category of words contains three families of words : ( i ) the particular nouns \" ealasmAe ealxASSa\" /\u0627\u0644\u0623\u0633\u0645\u0627\u0621\u0627\u0644\u062e\u0627\u0635\u0629/ : these nouns comprise proper nouns , names of cities , names of countries , and so forth .", "label": "", "metadata": {}, "score": "68.215965"}
{"text": "The IINUMBER flag is set any time an IIDIGIT class character occurs within a lexical token .Numbers may contain periods , commas , and hyphens as in the case of catalog part numbers .An external module will handle all tokens with the IINUMBER flag set : they may be indexed , or may be treated as non - indexable terms .", "label": "", "metadata": {}, "score": "68.231415"}
{"text": "After box 106 , the tokenizer executes a return instruction .Steps 100 - 106 are executed by filtering element 434 of tokenizer 1 .The filter 434 can further include sub - processors called the character analyzer 440 , the contextual processor 442 and the modifying processor 438 .", "label": "", "metadata": {}, "score": "68.31799"}
{"text": "The IITRLHYP flag is set .The trailing hyphen is stripped .Internal Slash ( IINTSLASH ) .The IINTSLASH flag is set only if a slash occurs between 2 lexical characters .Internal Parentheses ( IINTPAREN ) .The IINTPAREN flag is set only if a LPAREN and a RPAREN occur in that order within a lexical token .", "label": "", "metadata": {}, "score": "68.346275"}
{"text": "Our morphological analyzer for the Arabic language has some advantages compared to the others analyzers .These advantages are the following .( i )Our morphological analyzer can be used in both analysis and generation .( ii )It handles diacritized texts which permit to reduce the rate of ambiguity .", "label": "", "metadata": {}, "score": "68.39096"}
{"text": "28 , no .4 , pp .600 - 612 , 1989 .View at Google Scholar .K. R. Beesley , \" Arabic finite - state morphological analysis and generation , \" in Proceedings of the 16th Conference on Computational Linguistics , vol .", "label": "", "metadata": {}, "score": "68.46164"}
{"text": "28 , no .4 , pp .600 - 612 , 1989 .View at Google Scholar .K. R. Beesley , \" Arabic finite - state morphological analysis and generation , \" in Proceedings of the 16th Conference on Computational Linguistics , vol .", "label": "", "metadata": {}, "score": "68.46164"}
{"text": "This for - loop is identical to the for - loop of steps 100 - 106 , of FIG .7A. After completing execution of the for - loop of steps 220 - 226 , the tokenizer executes a return instruction at step 228 .", "label": "", "metadata": {}, "score": "68.47884"}
{"text": "The four main functional elements contained in interface 11 perform operations on data structures formed by the application program interface 11 .Memory for these functional elements and their associated databases is supplied by the digital computer 12 through the utilization of memory in internal memory element 22 and in external memory element 14 .", "label": "", "metadata": {}, "score": "68.483826"}
{"text": "The results of combining the two techniques ( viz .Buckwalter 's Arabic morphological analyzer , dictionary look - up and language model on character level ) are presented and analyzed .The best method is the one which combine the Buckwalter 's Arabic morphological analyzer ( BAMA ) and the dictionary look - up .", "label": "", "metadata": {}, "score": "68.54764"}
{"text": "This latter is based on the notion of finite state automaton ( DFA ) .A word is accepted by the morphological automaton if it belongs to a correct word in Arabic and rejected in the contrary case .Generally , the Arabic morphological automaton will have the following features .", "label": "", "metadata": {}, "score": "68.60373"}
{"text": "Decision box 378 determines whether the derivational transform includes a character string matching the candidate word 's ending string .If no match is found , logical flow will proceed to action box 376 , otherwise logical flow will proceed onto box 380 .", "label": "", "metadata": {}, "score": "68.907135"}
{"text": "Decision box 378 determines whether the derivational transform includes a character string matching the candidate word 's ending string .If no match is found , logical flow will proceed to action box 376 , otherwise logical flow will proceed onto box 380 .", "label": "", "metadata": {}, "score": "68.907135"}
{"text": "Boxes 384 and 386 are optional boxes providing prefixing adjustments to the newly formed derivational root .For example , decision box 384 determines whether a prefixing rule exists within the derivational transform and if such a prefixing rule exists then insures that logical flow proceeds to action box 386 .", "label": "", "metadata": {}, "score": "68.9511"}
{"text": "Boxes 384 and 386 are optional boxes providing prefixing adjustments to the newly formed derivational root .For example , decision box 384 determines whether a prefixing rule exists within the derivational transform and if such a prefixing rule exists then insures that logical flow proceeds to action box 386 .", "label": "", "metadata": {}, "score": "68.9511"}
{"text": "The structuring of our morphological database using XMODEL language allows us to generate the morphological automaton of the Arabic language .In the next section , we will be dealing with the notion of morphological automaton .Comparison with LMF Approach .", "label": "", "metadata": {}, "score": "69.04153"}
{"text": "To clarify the last disadvantage , let us take an example of some invalid words analyzed with our system ( Figure 14 ) .The example above shows five invalid words analyzed as they are valid words in the Arabic language .", "label": "", "metadata": {}, "score": "69.09574"}
{"text": "These parsing examples are for the 3 test files supplied with the parser .They assume you are sitting in the root directory of the parser distribution .[ GALE ROSETTA : The last illustrates the removal of the IBM \" + \" and \" # \" marks mentioned earlier . ]", "label": "", "metadata": {}, "score": "69.191895"}
{"text": "Concerning morphological automaton for Arabic , it is constituted of the alphabets of Arabic language .( iii ) .is the start state of the morphological automaton .It is constituted of only one start state in the case of a morphological automaton .", "label": "", "metadata": {}, "score": "69.310196"}
{"text": "Tokenizers currently used in the art encounter problems regarding selective storage and processing of information found in the stream of text .In particular , prior art tokenizers store and process all white space delimited characters ( i.e. \" tokens \" ) found in the stream of text .", "label": "", "metadata": {}, "score": "69.40568"}
{"text": "The baseform part - of - speech tag of the verb inflectional paradigm is \" verb infinitive \" , that does not match the part - of - speech tag of the candidate word .The part - of - speech tag of the first inflectional transform is verb present participle , that does not match the part - of - speech tag of the candidate word .", "label": "", "metadata": {}, "score": "69.48706"}
{"text": "The baseform part - of - speech tag of the verb inflectional paradigm is \" verb infinitive \" , that does not match the part - of - speech tag of the candidate word .The part - of - speech tag of the first inflectional transform is verb present participle , that does not match the part - of - speech tag of the candidate word .", "label": "", "metadata": {}, "score": "69.48706"}
{"text": "M. Attia , \" Developing a robust Arabic morphological transducer using finite state technology , \" in Proceedings of the 8th Annual CLUK Research Colloquium , Manchester , UK , 2005 .K. Shaalan , \" Extending prolog for better natural language analysis , \" in Proceedings of the 1st", "label": "", "metadata": {}, "score": "69.533615"}
{"text": "M. Attia , \" Developing a robust Arabic morphological transducer using finite state technology , \" in Proceedings of the 8th Annual CLUK Research Colloquium , Manchester , UK , 2005 .K. Shaalan , \" Extending prolog for better natural language analysis , \" in Proceedings of the 1st", "label": "", "metadata": {}, "score": "69.533615"}
{"text": "If an IIPTERM or a point of ellipsis is encountered in the middle of non - lexical matter , this flag is set .Contains White Space .Set when non - lexical matter contains characters of the IIWSPCS class .Single Line Feed ( SN ) .", "label": "", "metadata": {}, "score": "69.67094"}
{"text": "The IITRLHYP bit is set only if : .The hyphen follows a lexical character AND .The character following the hyphen is an IIWSPC class character or the trailing hyphen is the last character in the entire text stream .The end of the text stream is represented by either an IINULL class character as defined by the OEM , or by the End of File character .", "label": "", "metadata": {}, "score": "69.69585"}
{"text": "LexicalizedParser arabicFactored.ser.gz arabic-onesent-utf8.txt Loading parser from serialized file arabicFactored.ser.gz ... done [ 14.3 sec].Parsing file : arabic-onesent-utf8.txt with 1 sentences .Parsing [ sent .1 len . 8 ] : \u0648 \u0646\u0634\u0631 \u0627\u0644\u0639\u062f\u0644 \u0645\u0646 \u062e\u0644\u0627\u0644 \u0642\u0636\u0627\u0621 \u0645\u0633\u062a\u0642\u0644 .", "label": "", "metadata": {}, "score": "69.770966"}
{"text": "The origin scheme of the word is given if available .Let us analyze some examples of Arabic verbs and nouns using our system .These examples are taken from a standard input text provided by ALECSO ( Arab League , Educational , Cultural , and Scientific Organization ) which organized a competition in April 2009 of the Arabic Analyzers in Damascus .", "label": "", "metadata": {}, "score": "69.84767"}
{"text": "In addition , at step 158 , the tokenizer marks the appropriate token attributes as a function of the character appended to the token .After step 158 , control proceeds to step 160 .From step 160 through step 166 , the tokenizer executes a for - loop starting with box 160 and ending with box 166 .", "label": "", "metadata": {}, "score": "69.8514"}
{"text": "Multiple languages can be processed during any particular session if multiple calls to the database block are made during the session .After initializing a session by calling App Block and initializing a database by calling Database block , either Word Block or Buffer Block is called , depending on whether a larger amount of text is being processed or one word at a time is being handled .", "label": "", "metadata": {}, "score": "69.87596"}
{"text": "This includes clitic pronouns , prepositions , and conjunctions .However , the clitic determiner ( definite article ) \" Al \" ( \u0627\u0644 ) is not separated off .Inflectional and derivational morphology is not separated off .[ GALE ROSETTA : These separated off clitics are not overtly marked as proclitics / enclitics , although we do have a facility to strip off the ' + ' and ' # ' characters that the IBM segmenter uses to mark enclitics and proclitics , respectively .", "label": "", "metadata": {}, "score": "69.88965"}
{"text": "Parenthesis .Parentheses are also analyzed by both the character analyzer and the contextual analyzer because parentheses behaves differently depending upon their relative location within the token and the relative location of matching parenthesis .The key rule is that if matching left and right parentheses are found within a lexical token , neither of the parentheses are stripped .", "label": "", "metadata": {}, "score": "70.06173"}
{"text": "To achieve a better representation of the morphological knowledge of Arabic , we conceived an innovative language adapted for this specific situation : it is the XMODEL language ( XML - based morphological definition Language ) .XMODEL is based on the XML language setting profits of its advantages and particularities .", "label": "", "metadata": {}, "score": "70.16222"}
{"text": "TABLE III______________________________________German Language Noun - Phrase Rules______________________________________1 If the token is an adjective AND2 the preceding token is a noun AND3 the following token is a member of Noun Phrase Tags4 break the Noun Phrase _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ .", "label": "", "metadata": {}, "score": "70.18872"}
{"text": "It was used in lots of languages ( Indo - European ) , but for Arabic language , this method still in progress towards a standard for representing the Arabic linguistic resource .In the next paragraph , we will present our approach to represent the linguistic resource for Arabic , and we finish by giving a comparison between our approach and the LMF approach for representing the linguistic resource .", "label": "", "metadata": {}, "score": "70.369225"}
{"text": "FIG .8 depicts a processing sequence of noun - phrase analyzer 13 for forming noun phrases that begins at step 242 .At step 243 , the user - specified options are input to the noun - phrase analysis system .", "label": "", "metadata": {}, "score": "70.37404"}
{"text": "FIG .8 depicts a processing sequence of noun - phrase analyzer 13 for forming noun phrases that begins at step 242 .At step 243 , the user - specified options are input to the noun - phrase analysis system .", "label": "", "metadata": {}, "score": "70.37404"}
{"text": "The non - lexical attributes include : contains white space , single new line , and multiple new line .The Internal Characters attributes signify the presence of a special character within a lexical token .The internal character attributes include : leading apostrophe , internal apostrophe , trailing apostrophe , leading hyphen , internal hyphen , trailing hyphen , internal slash , and internal parentheses .", "label": "", "metadata": {}, "score": "70.40351"}
{"text": "However , if the part - of - speech tags differ , logical flow branches back to box 18 .If the character strings do not match , logical flow proceeds back to action box 318 while if the character strings match , logical flow proceeds to action box 322 .", "label": "", "metadata": {}, "score": "70.66835"}
{"text": "Our new and innovative language ( XMODEL ) used for the representation of the morphological knowledge and the use of morphological automaton for the Arabic language permit to avoid a huge problems of ambiguity in the Arabic language which the most analyzers can not resolve .", "label": "", "metadata": {}, "score": "71.00313"}
{"text": "A particularly advantageous feature of the tokenizer is its ability to achieve filtering operations during a single scan of the stream of text .The tokenizer achieves this performance based in part upon the lexical paradigm adopted in this invention , and in part due to the language sensitivity in the design of the tokenizer .", "label": "", "metadata": {}, "score": "71.12941"}
{"text": "The orthography of Modern standard Arabic ( MSA ) includes a set of special marks called diacritics that carry the intended pronunciation of words .Arabic text is usually written without diacritics which leads to major linguistic ambiguities in most of the cases since Arabic words have different meaning depending on how they are diactritized .", "label": "", "metadata": {}, "score": "71.154724"}
{"text": "The performance of the UTF-8 and Buckwalter grammars is basically identical , because only the character encoding is different ( and so it is not shown separately ) .factF1 factDA factEx pcfgF1 depDA factTA num arabicFactored.ser.gz 77.44 84.05 13.27 69.49 80.07 96.09 1567 atb3FactoredBuckwalter.ser.gz 75.76 83.08 14.41 68.09 77.75 95.91 951 .", "label": "", "metadata": {}, "score": "71.16725"}
{"text": "Discussion .To compare our morphological analyzer for the Arabic language to the other existing systems , the task is difficult to do , because there is no standard to make this comparison , and every system has its own target .", "label": "", "metadata": {}, "score": "71.40431"}
{"text": "213 - 223 , Snowbird , Utah , USA , September 2004 .T. Buckwalter , \" Buckwalter Arabic morphological analyzer version 1.0 .linguistic data consortium , \" University of Pennsylvania , LDC Catalog No . : LDC2002L49 , 2002 .", "label": "", "metadata": {}, "score": "71.67543"}
{"text": "213 - 223 , Snowbird , Utah , USA , September 2004 .T. Buckwalter , \" Buckwalter Arabic morphological analyzer version 1.0 .linguistic data consortium , \" University of Pennsylvania , LDC Catalog No . : LDC2002L49 , 2002 .", "label": "", "metadata": {}, "score": "71.67543"}
{"text": "In a first embodiment , the window of sequential tokens can include , but is not limited to , the two tokens immediately preceding the ambiguous token and the token immediately following the ambiguous token .In a second embodiment , the window of sequential tokens includes the ambiguous token , but excludes those classes of tokens not considered particularly relevant in disambiguating the ambiguous token .", "label": "", "metadata": {}, "score": "71.743835"}
{"text": "In a first embodiment , the window of sequential tokens can include , but is not limited to , the two tokens immediately preceding the ambiguous token and the token immediately following the ambiguous token .In a second embodiment , the window of sequential tokens includes the ambiguous token , but excludes those classes of tokens not considered particularly relevant in disambiguating the ambiguous token .", "label": "", "metadata": {}, "score": "71.743835"}
{"text": "The invention accordingly provides for a tokenizer that filters the tokens during the tokenization process and uses the filtered information to guide and constrain further linguistic analysis .For instance , the tokenizer filters the tokens to select those tokens that require , or are candidates for , higher level linguistic processing .", "label": "", "metadata": {}, "score": "71.75215"}
{"text": "If a breaking pattern is found then control branches to step 204 .If no breaking pattern is found , then control first flows to action box 208 where the token attributes are modified in view of the pattern found , after which control flows to box 210 which continues the for - loop that started at step 198 .", "label": "", "metadata": {}, "score": "71.80563"}
{"text": "The IILEADHYP bit is set only if : .A hyphen immediately precedes a lexical character AND .The hyphen does not occur between two lexical characters .If these conditions are met : .The IILEADHYP flag is set .The leading hyphen is stripped .", "label": "", "metadata": {}, "score": "72.03361"}
{"text": "A tokenizer according to claim 13 , wherein the plurality of languages is selected from the group consisting of English , French , Catalan , Spanish , Italian , Portuguese , German , Danish , Norwegian , Swedish , Dutch , Finish , Russian , and Czech .", "label": "", "metadata": {}, "score": "72.309425"}
{"text": "For example , lines 1 - 4 recite a rule for identifying the end of a noun phrase .After action box 253 of FIG .8 , control proceeds to decision box 254 of FIG . 8 .At decision box 254 the processor 47 identifies whether the user requested application of the agreement rules to the noun phrase identified in action box 253 .", "label": "", "metadata": {}, "score": "72.4138"}
{"text": "For example , lines 1 - 4 recite a rule for identifying the end of a noun phrase .After action box 253 of FIG .8 , control proceeds to decision box 254 of FIG . 8 .At decision box 254 the processor 47 identifies whether the user requested application of the agreement rules to the noun phrase identified in action box 253 .", "label": "", "metadata": {}, "score": "72.4138"}
{"text": "Parsed 8 words in 1 sentences ( 5.15 wds / sec ; 0.64 sents / sec ) .$ java -cp stanford-parser.jar -mx500 m edu.stanford.nlp.parser.lexparser.LexicalizedParser arabicFactoredBuckwalter.ser.gz arabic-onesent-buck.txt Loading parser from serialized file arabicFactoredBuckwalter.ser.gz ... done [ 9.4 sec].", "label": "", "metadata": {}, "score": "72.44183"}
{"text": "edit distance , language model on word level and OCR confusion matrix ) .The results show that the edit distance and language model techniques give good results on the Arabic Text Recognition ( ATR ) data and Computer Generated ( CG ) data .", "label": "", "metadata": {}, "score": "72.489494"}
{"text": "Arabic Arabic orthography diacritization vowelization morphology morphology features morphological analysis part - of - speech tagging automatic correction Viterbi case ending natural language processing language modeling conditional random fields CRF .Other actions .Share .References .Rashwan , M.A.A. , et al .", "label": "", "metadata": {}, "score": "72.61451"}
{"text": "While the invention has been shown and described having reference to specific preferred embodiments , those skilled in the art will understand that variations in form and detail may be made without departing from the spirit and scope of the invention .", "label": "", "metadata": {}, "score": "72.75168"}
{"text": "Valid forms of abbreviations include \" U.S.A. \" and \" J. \" , but not \" Jr. \" .If these conditions are met : .The IINTHYP flag is set .The token is not split .However , the presence / absence of an Em - Dash must be verified .", "label": "", "metadata": {}, "score": "72.781906"}
{"text": "At decision box 247 the system identifies whether the user - requested disambiguation of the part - of - speech of the tokens .If the user has not requested part - of - speech disambiguation control proceeds to action box 249 .", "label": "", "metadata": {}, "score": "73.04138"}
{"text": "At decision box 247 the system identifies whether the user - requested disambiguation of the part - of - speech of the tokens .If the user has not requested part - of - speech disambiguation control proceeds to action box 249 .", "label": "", "metadata": {}, "score": "73.04138"}
{"text": "Following underivation ( derivation reduction ) , logical flow proceeds to decision box 332 .At decision box 332 the processor identifies whether inflection has been requested .If inflection was requested , logical flow proceeds to action box 334 , wherein the candidate word undergoes inflection analysis in accordance with the steps illustrated in FIG .", "label": "", "metadata": {}, "score": "73.102684"}
{"text": "Following underivation ( derivation reduction ) , logical flow proceeds to decision box 332 .At decision box 332 the processor identifies whether inflection has been requested .If inflection was requested , logical flow proceeds to action box 334 , wherein the candidate word undergoes inflection analysis in accordance with the steps illustrated in FIG .", "label": "", "metadata": {}, "score": "73.102684"}
{"text": "The languages can be selected from either English , German , Spanish , Portuguese , French , Dutch , Italian , Swedish , Danish , Norwegian , or Japanese .These particular languages are representative of languages having their own specific rules and tables for analyzing noun phrases , but are not included as a limitation of the invention .", "label": "", "metadata": {}, "score": "73.22821"}
{"text": "The languages can be selected from either English , German , Spanish , Portuguese , French , Dutch , Italian , Swedish , Danish , Norwegian , or Japanese .These particular languages are representative of languages having their own specific rules and tables for analyzing noun phrases , but are not included as a limitation of the invention .", "label": "", "metadata": {}, "score": "73.22821"}
{"text": "If there is no match , agreement fails and the noun phrase is broken .When the noun phrase is broken , the last token that agrees with the previous tokens in the noun phrase is re - identified as the \" end of the noun phrase \" .", "label": "", "metadata": {}, "score": "73.27954"}
{"text": "If there is no match , agreement fails and the noun phrase is broken .When the noun phrase is broken , the last token that agrees with the previous tokens in the noun phrase is re - identified as the \" end of the noun phrase \" .", "label": "", "metadata": {}, "score": "73.27954"}
{"text": "A tokenizer according to claim 4 , wherein said modifying processor includes merging means for merging said candidate token with another token in the stream of text .A tokenizer according to claim 1 , wherein said filtering selects said candidate token from said set of tokens during a single scan of the parsed stream of text .", "label": "", "metadata": {}, "score": "73.34664"}
{"text": "For example , a sophisticated morphological system might strip off the varying suffix letters to map every word to the longest common prefix character string .Thus , all the forms of arrive ( i.e. , arrive , arrives , arrived , and arriving ) are stripped back to the longest common character string , arriv ( without an e ) .", "label": "", "metadata": {}, "score": "73.58876"}
{"text": "However , variations such as two dots and five or more dots in series are treated as follows : ._ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _", "label": "", "metadata": {}, "score": "73.692116"}
{"text": "After step 166 , control proceeds to step 168 .Steps 168 - 174 are identical to steps 146 - 152 and proceed in the same manner .After step 174 , control proceeds to decision box 176 .At decision box 176 , the tokenizer queries whether the current character can start a token .", "label": "", "metadata": {}, "score": "73.92099"}
{"text": "After step 180 , control proceeds to decision box 182 .At decision box 182 , the tokenizer addresses whether the current token being formed is too long .If the token is too long , control proceeds to step 184 where the length of the token string is capped , and from there to steps 186 and 188 where the tokenizer advances to the beginning of the next token and executes a return instruction .", "label": "", "metadata": {}, "score": "74.05485"}
{"text": "Ellipsis .It is also beneficial to perform both contextual and character analysis on the Points of Ellipsis ( POE ) .The POE is defined by either a series of three or four dots .Two dots and over four dots can be classified as non - Points of Ellipsis that are to be either stripped or ignored .", "label": "", "metadata": {}, "score": "74.20708"}
{"text": "An example of this is the case of the following components \" afcalu \" , \" afcilu \" , and \" afculu \" .These components are all conjugated forms of the component \" facala \" .We have specified this link of reference between the components using the \" ref \" tag ( Figures 5 and 6 ) .", "label": "", "metadata": {}, "score": "74.23851"}
{"text": "This flag is set when the token is a valid abbreviation that ended in a period followed by IIWSPC .It can not be determined if the abbreviation ends the sentence or not without examining the current token to see if it 's a valid abbreviation , and the following token for its CapCode .", "label": "", "metadata": {}, "score": "74.42632"}
{"text": "The morphological properties are not related to a specific morphological class , which makes it necessary to define them outside the morphological classes ( Figure 2 ) .Figure 2 : Representation of morphological properties \" Gender \" and \" Person \" .", "label": "", "metadata": {}, "score": "74.427155"}
{"text": "After step 302 , logical flow proceeds to step 304 .At step 304 the processor 30 obtains data relevant to the candidate word .This data is obtained by first finding a substantially equivalent expression to the candidate word in the word data table 31 .", "label": "", "metadata": {}, "score": "74.44502"}
{"text": "After step 302 , logical flow proceeds to step 304 .At step 304 the processor 30 obtains data relevant to the candidate word .This data is obtained by first finding a substantially equivalent expression to the candidate word in the word data table 31 .", "label": "", "metadata": {}, "score": "74.44502"}
{"text": "Decision box 324 is an optional step involving prefixation .If prefixation operations are requested by the user , boxes 324 and 326 will be activated .At decision box 324 the processor 30 identifies whether the inflectional transform currently being considered has a prefixation rule associated with it .", "label": "", "metadata": {}, "score": "74.457306"}
{"text": "Decision box 324 is an optional step involving prefixation .If prefixation operations are requested by the user , boxes 324 and 326 will be activated .At decision box 324 the processor 30 identifies whether the inflectional transform currently being considered has a prefixation rule associated with it .", "label": "", "metadata": {}, "score": "74.457306"}
{"text": "Figure 11 : An automaton representing the schemes \" facala \" , \" facila \" , \" facula \" , and \" faclala \" .We note that developing the morphological automatons of the Arabic language is the main idea of constructing a morphological analyzer for our language .", "label": "", "metadata": {}, "score": "74.537704"}
{"text": "The Capcode Field 32 identifies the capitalization of the word .The Dialect Field 34 is used to identify words properly spelled in one dialect , but improperly spelled in another dialect .A common example of this behavior can be demonstrated using the American term color and its British counterpart colour .", "label": "", "metadata": {}, "score": "74.56441"}
{"text": "After initializing a session by calling App Block and initializing a database by calling Database block , either Word Block or Buffer Block is called , depending on whether a larger amount of text is being processed or one word at a time is being handled .", "label": "", "metadata": {}, "score": "74.6464"}
{"text": "In particular , boxes 160 and 166 identify that the for - loop will execute once for every significant pattern .Decision box 162 queries whether a pattern is found in the previous character .If a pattern is found in the previous character , then control proceeds to action box 164 .", "label": "", "metadata": {}, "score": "74.74727"}
{"text": "When this is done , the second temporary areas contain : ._ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ temp1 Singular , Plural , Feminine Masculinetemp2 Singular , Feminine _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ .", "label": "", "metadata": {}, "score": "74.92617"}
{"text": "When this is done , the second temporary areas contain : ._ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ temp1 Singular , Plural , Feminine Masculinetemp2 Singular , Feminine _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ .", "label": "", "metadata": {}, "score": "74.92617"}
{"text": "Habash , N. , Rambow , O. : Arabic tokenization , part - of - speech tagging and morphological disambiguation in one fell swoop .In : Proceedings of the 43rd Annual Meeting on Association for Computational Linguistics , ACL 2005 , pp .", "label": "", "metadata": {}, "score": "75.0781"}
{"text": "M. Attia , \" An ambiguity - controlled morphological analyzer for modern standard Arabic modelling finite state networks , \" in The Challenge of Arabic for NLP / MT Conference , The British Computer Society , London , UK , 2006 .", "label": "", "metadata": {}, "score": "75.08464"}
{"text": "The tokenizer can be implemented on a data processor by writing computer instructions by hand that implement the tokenizer as detailed herein , or by forming a tokenizer as a finite state machine .Preferably , a finite state machine is used to implement the tokenizer .", "label": "", "metadata": {}, "score": "75.23195"}
{"text": "After step 204 , the tokenizer flags the identified token as complete in step 206 and then branches to step 212 of FIG .7D. FIG .7D shows steps 212 - 228 in the operation of tokenizer 1 .Steps 212 - 218 execute a for - loop that executes until all attributes in the token that can modify the token have been processed .", "label": "", "metadata": {}, "score": "75.36112"}
{"text": "If inflection was not requested , logical flow proceeds directly to action box 336 .At action box 336 the logical FOR - LOOP for the inflectional transform ends and at action box 338 the logical FOR - LOOP for the paradigms ends , thereby completing the uninflection routine .", "label": "", "metadata": {}, "score": "75.43163"}
{"text": "If inflection was not requested , logical flow proceeds directly to action box 336 .At action box 336 the logical FOR - LOOP for the inflectional transform ends and at action box 338 the logical FOR - LOOP for the paradigms ends , thereby completing the uninflection routine .", "label": "", "metadata": {}, "score": "75.43163"}
{"text": "Description .RELATED APPLICATION .This application is a continuation - in - part of the commonly - owned U.S. patent application Ser .No . 08/503,981 , filed on Jul. 1 , 1995 now U.S. Pat .No .5,680,628 and is a continuation - in - part of the commonly - owned U.S. patent application , Ser .", "label": "", "metadata": {}, "score": "75.51491"}
{"text": "periodic evaluations conducted by NIST .These evaluations provide an . important contribution to the direction of research efforts and the . calibration of technical capabilities .They are intended to be of .interest to all researchers working on the general problem of . conversational speech recognition .", "label": "", "metadata": {}, "score": "75.829414"}
{"text": "The character may be located in the \" beginning \" , \" middle \" , or \" end \" of the token .The term \" Beginning \" refers to a character that immediately precedes a lexical character , and the term \" Middle \" refers to a character occurring between two lexical characters , and the term \" End \" refers to a character immediately following a lexical character .", "label": "", "metadata": {}, "score": "75.98484"}
{"text": "A tokenizer according to claim 4 , wherein said modifying processor includes splitting means for splitting said candidate token into multiple tokens .A tokenizer according to claim 4 , wherein said modifying processor includes stripping means for stripping a character from said candidate token .", "label": "", "metadata": {}, "score": "76.70929"}
{"text": "225 - 236 , Cairo , Egypt , March 1998 .G. Francopoulo and M. George , \" ISO / TC 37/SC 4 N453 ( N330 Rev.16 ) .Language resource management - Lexical markup framework ( LMF ) , \" 2008 .", "label": "", "metadata": {}, "score": "76.74356"}
{"text": "225 - 236 , Cairo , Egypt , March 1998 .G. Francopoulo and M. George , \" ISO / TC 37/SC 4 N453 ( N330 Rev.16 ) .Language resource management - Lexical markup framework ( LMF ) , \" 2008 .", "label": "", "metadata": {}, "score": "76.74356"}
{"text": "An example is the German word bak - ken , which is the form of the word used when it is hyphenated ; without the hyphen , the word is spelled backen .This information links the hyphenated form with its unhyphenated form which would be the form normally used for such information retrieval tasks as indexing .", "label": "", "metadata": {}, "score": "76.764145"}
{"text": "An example is the German word bak - ken , which is the form of the word used when it is hyphenated ; without the hyphen , the word is spelled backen .This information links the hyphenated form with its unhyphenated form which would be the form normally used for such information retrieval tasks as indexing .", "label": "", "metadata": {}, "score": "76.764145"}
{"text": "For example , French and Spanish require gender and number agreement within the noun phrase , while German requires gender , number , and case agreement within the noun phrase .The grammatical features concerning gender , number , and case agreement are supplied by the grammatical feature fields of the word data table .", "label": "", "metadata": {}, "score": "76.83314"}
{"text": "For example , French and Spanish require gender and number agreement within the noun phrase , while German requires gender , number , and case agreement within the noun phrase .The grammatical features concerning gender , number , and case agreement are supplied by the grammatical feature fields of the word data table .", "label": "", "metadata": {}, "score": "76.83314"}
{"text": "The IINTAPO bit is set if : .An apostrophe occurs between two lexical characters .If this condition is met : .The IINTAPO flag is set .Examples : .IINTAPO d'aujour'hui jack - o'-lantern Non - lexical characters None .", "label": "", "metadata": {}, "score": "77.110634"}
{"text": "The External memory 14 is coupled with the digital computer 12 , preferably through the Input / Output Controller 26 .Data stored in the External Memory 14 can be downloaded to memory element 22 , and data stored in the memory 22 can be correspondingly uploaded to the external memory 14 .", "label": "", "metadata": {}, "score": "77.321365"}
{"text": "The External memory 14 is coupled with the digital computer 12 , preferably through the Input / Output Controller 26 .Data stored in the External Memory 14 can be downloaded to memory element 22 , and data stored in the memory 22 can be correspondingly uploaded to the external memory 14 .", "label": "", "metadata": {}, "score": "77.321365"}
{"text": "When this is done , the temporary areas contain : ._ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ temp1 Plural , Singular , Masculine Femininetemp2 Singular , Plural , Feminine Masculine _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ .", "label": "", "metadata": {}, "score": "77.46873"}
{"text": "When this is done , the temporary areas contain : ._ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ temp1 Plural , Singular , Masculine Femininetemp2 Singular , Plural , Feminine Masculine _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ .", "label": "", "metadata": {}, "score": "77.46873"}
{"text": "Boxes 406 and 408 illustrate optional prefixing control boxes .These control boxes are implemented if the user requests prefixing .Following action box 408 control proceeds to action box 410 .At action box 410 , derivation expansion module 6 removes characters from the derivational root in accordance with the derivational transform associated with the paradigm currently being processed .", "label": "", "metadata": {}, "score": "77.87718"}
{"text": "Boxes 406 and 408 illustrate optional prefixing control boxes .These control boxes are implemented if the user requests prefixing .Following action box 408 control proceeds to action box 410 .At action box 410 , derivation expansion module 6 removes characters from the derivational root in accordance with the derivational transform associated with the paradigm currently being processed .", "label": "", "metadata": {}, "score": "77.87718"}
{"text": "If these conditions are met : .The IILEADAPO flag is set .The leading apostrophe is stripped .An exception occurs if an IIDIGIT class character immediately follows the apostrophe .Examples : .IILEADAPO twas ' sGravenschag Apostrophe stripped .", "label": "", "metadata": {}, "score": "77.9119"}
{"text": "This root can be obtained from the underivation ( derivation reduction ) module 7 of FIG .16 .After action box 402 , control proceeds to action box 404 .Box 404 provides a logical FOR - LOOP for each derivational transform in the paradigm associated with the derivational root obtained at action box 402 .", "label": "", "metadata": {}, "score": "78.02394"}
{"text": "This root can be obtained from the underivation ( derivation reduction ) module 7 of FIG .16 .After action box 402 , control proceeds to action box 404 .Box 404 provides a logical FOR - LOOP for each derivational transform in the paradigm associated with the derivational root obtained at action box 402 .", "label": "", "metadata": {}, "score": "78.02394"}
{"text": "Buckwalter , Tim .Buckwalter Arabic Morphological Analyzer Version 1.0 LDC2002L49 .Web Download .Philadelphia : Linguistic Data Consortium , 2002 .Introduction .Buckwalter Arabic Morphological Analyzer Version 1.0 was produced by Linguistic Data Consortium ( LDC ) , catalog number LDC2002L49 and ISBN 1 - 58563 - 257 - 0 .", "label": "", "metadata": {}, "score": "78.07322"}
{"text": "The similarity between the transforms allows processor 30 to uniformly apply the functional elements contained in any particular transform without having to consider exceptions to a discrete set of standard rules .The uniformity in the actions of processor 30 , regardless of the transform being considered , allows for quick and easy processing .", "label": "", "metadata": {}, "score": "78.077034"}
{"text": "Modifying functions described below include splitting tokens , stripping characters from tokens , ignoring characters within tokens , and merging tokens .Leading Apostrophe ( IILEADAPO ) .The IILEADAPO bit is set only if : .An apostrophe immediately precedes a lexical character AND .", "label": "", "metadata": {}, "score": "78.4517"}
{"text": "Decision box 102 queries whether a pattern is located in the token .If a pattern is found in the token , then control proceeds to action box 104 .If a pattern is not found in the token , then control proceeds directly to action box 106 .", "label": "", "metadata": {}, "score": "78.51409"}
{"text": "The modifying processor 438 is capable of acting based upon flags potentially set during the process of selecting the token , as described above .The modifying processor 438 is also capable of acting based upon flags set in the parameters associated with a selected token .", "label": "", "metadata": {}, "score": "78.54515"}
{"text": "Step 198 begins a for - loop that is terminated by either step 206 or by step 210 .The for - loop iteratively reviews the significant patterns in the token currently being formed until it is determined that either : the token is complete under step 206 , or there are no additional significant patterns in the token under step 210 .", "label": "", "metadata": {}, "score": "79.04112"}
{"text": "purchase this publication for $ 1000 .If you need additional information before placing your order , or .would like to inquire about membership in the LDC , please send email to .Linguistic Data Consortium Phone : ( 215 ) 573 - 1275 .", "label": "", "metadata": {}, "score": "79.04503"}
{"text": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ .Table II contains a group of rules , in pseudocode , specific to the English language .", "label": "", "metadata": {}, "score": "79.13025"}
{"text": "A modern secure , robust , multithreaded , exception aware , internationalisable , portable GUI toolkit library designed for mission - critical work in C++ and Python forked from the FOX library .Replicates the Qt API in many places .OCR c++ library .", "label": "", "metadata": {}, "score": "79.158516"}
{"text": "If underivation ( derivation reduction ) has been requested , logical flow proceeds to action box 330 , otherwise flow proceeds to decision box 332 .At action box 330 the candidate word undergoes underivation ( derivation reduction ) in accordance with the flowchart identified in FIG .", "label": "", "metadata": {}, "score": "79.47209"}
{"text": "If underivation ( derivation reduction ) has been requested , logical flow proceeds to action box 330 , otherwise flow proceeds to decision box 332 .At action box 330 the candidate word undergoes underivation ( derivation reduction ) in accordance with the flowchart identified in FIG .", "label": "", "metadata": {}, "score": "79.47209"}
{"text": "The Pre Noun Phrase Break flag is set when the current token contains characters that guarantee that it can not be combined with the previous token to form a noun phrase .Post Noun Phrase Break ( IIPOSNPBRK ) .The Post Noun Phrase Break flag is set when the current token contains characters that guarantee that it can not be combined with the following token to form a noun phrase .", "label": "", "metadata": {}, "score": "79.499725"}
{"text": "An XML Approach of Coding a Morphological Database for Arabic Language .Mathematics and Informatics Department , Faculty of Sciences of Fez , Fez , Morocco .Received 18 June 2010 ; Revised 3 September 2010 ; Accepted 6 January 2011 .", "label": "", "metadata": {}, "score": "79.54136"}
{"text": "At steps 214 and 216 the tokenizer modifies the token in accordance with the attribute currently being processed .At step 218 the tokenizer completes its processing on the current attribute and branches back to step 212 if additional attributes remain , otherwise control flows to step 220 .", "label": "", "metadata": {}, "score": "79.600395"}
{"text": "( iv )The case of the word : \" marfUc \" ( \u0645\u0631\u0641\u0648\u0639 ) , \" manSUb \" ( \u0645\u0646\u0635\u0648\u0628 ) , \" majrUr \" ( \u0645\u062c\u0631\u0648\u0631 ) , or \" majzUm \" ( \u0645\u062c\u0632\u0648\u0645 ) .( v )The type of the word : verb , noun or particle .", "label": "", "metadata": {}, "score": "79.71512"}
{"text": "An apostrophe immediately follows a lexical character AND .The character following the apostrophe is an IIWSPC class character or the apostrophe is the last character in the entire text stream .The end of the text stream is represented by either an INULL class character as defined by the OEM , or by the End of File character .", "label": "", "metadata": {}, "score": "79.73045"}
{"text": "The future of information technology will be based on controlling the flow of natural light .This project is an attempt to establish the code ( or software ) that will enable this to happen .It involves rewriting an OS from the ground up .", "label": "", "metadata": {}, "score": "79.789154"}
{"text": "Stripped End of Word Period ( IISEOWPER ) .This flag is set when a period is found at the end of a token .The period is stripped , and the flag is set .CapCodes .Two bits will be used to define the capCode as it exists .", "label": "", "metadata": {}, "score": "79.96356"}
{"text": "Under most circumstances , it is used to separate two closely related words , such as male / female .In such cases , it is understood that the user is referring to a male or a female .However , the slash can also be used within a word to create a non - splittable word such as I / O. I / O can not be split apart like male / female .", "label": "", "metadata": {}, "score": "80.266556"}
{"text": "If a period is immediately followed by an IIDIGT , the period is left attached to the token .i.e. 0.75 .If an apostrophe is immediately followed by an IIDIGIT , the apostrophe is left attached to the token .i.e. ' 49ers .", "label": "", "metadata": {}, "score": "80.30548"}
{"text": "The Dialect Field 34 is used to identify words properly spelled in one dialect , but improperly spelled in another dialect .A common example of this behavior can be demonstrated using the American term color and its British counterpart colour .", "label": "", "metadata": {}, "score": "80.97731"}
{"text": "Internal connection lines are shown both between the tokenizer 43 and the processor 47 , and between the memory element 45 and the processor 47 .FIG .6 further illustrates an input line 41 to the tokenizer 43 from the application program interface 11 and an output line from the processor 47 to the application program interface 11 .", "label": "", "metadata": {}, "score": "81.003876"}
{"text": "Internal connection lines are shown both between the tokenizer 43 and the processor 47 , and between the memory element 45 and the processor 47 .FIG .6 further illustrates an input line 41 to the tokenizer 43 from the application program interface 11 and an output line from the processor 47 to the application program interface 11 .", "label": "", "metadata": {}, "score": "81.003876"}
{"text": "At decision box 200 , the tokenizer identifies whether a pattern was found in the character .If no pattern is found , then control jumps to step 84 of FIG .1 .If a pattern is found , then control proceeds to decision box 202 .", "label": "", "metadata": {}, "score": "82.01081"}
{"text": "No flags are set .The resultant token is : abc .The Post Noun Phrase Break flag is set .The Stripped End of Word Period flag is not set .Because any other than two hyphens in series can be either stripped or ignored , both contextual analysis and character analysis are appropriate in the case of a series of hyphens .", "label": "", "metadata": {}, "score": "82.41488"}
{"text": "However , if the part - of - speech tags differ , logical flow branches back to box 318 .If the character strings do not match , logical flow proceeds back to action box 318 while if the character strings match , logical flow proceeds to action box 322 .", "label": "", "metadata": {}, "score": "82.74798"}
{"text": "Possible Pre - Clitic ( IIPRECLTC ) .The IIPRECLTC bit is set if : .The language is French , Catalan , or Italian AND .An apostrophe is found after a lexical character AND .The number of characters preceding the apostrophe does n't exceed the maximum pre - clitic length as defined in the language structure , AND .", "label": "", "metadata": {}, "score": "83.24356"}
{"text": "The IITRLAPO flag is set .The trailing apostrophe is stripped .Examples : .IITRLAPO Jones Semi - colon stripped .None .abc''def Token not split ._ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ .", "label": "", "metadata": {}, "score": "83.399536"}
{"text": "After action box 255 , logical flow proceeds to decision box 256 .At decision box 256 the processor 47 identifies whether the user requested application of the truncation rules to the noun phrase identified in action box 253 .If the user did not request application of the truncation rules , control branches to action box 258 .", "label": "", "metadata": {}, "score": "83.61096"}
{"text": "After action box 255 , logical flow proceeds to decision box 256 .At decision box 256 the processor 47 identifies whether the user requested application of the truncation rules to the noun phrase identified in action box 253 .If the user did not request application of the truncation rules , control branches to action box 258 .", "label": "", "metadata": {}, "score": "83.61096"}
{"text": "But , this kind of problems is not very serious to take into consideration , because Arabic Language is very rich in words , and every year , there is some news words added to the language .Conclusion and Future Works .", "label": "", "metadata": {}, "score": "84.35624"}
{"text": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ .Trailing Apostrophe ( IITRLAPO ) .", "label": "", "metadata": {}, "score": "84.433174"}
{"text": "Possible Post - Clitic ( IIPOSCLTC ) .The IIPOSCLTC bit is set if : . I. The language is French , Catalan , or Portuguese AND .A hyphen ( or apostrophe for Catalan ) is found AND .The number of characters preceding the hyphen ( apostrophe : Catalan ) exceeds the minimum stem length as defined in the language structure , AND .", "label": "", "metadata": {}, "score": "85.87048"}
{"text": "After box 250 , control proceeds to decision box 251 .Decision box 251 queries whether the user requested disambiguation of the part - of - speech tags .If disambiguation was requested , control proceeds to action box 252 .If disambiguation was not requested , control proceeds to action box 253 .", "label": "", "metadata": {}, "score": "87.006134"}
{"text": "After box 250 , control proceeds to decision box 251 .Decision box 251 queries whether the user requested disambiguation of the part - of - speech tags .If disambiguation was requested , control proceeds to action box 252 .If disambiguation was not requested , control proceeds to action box 253 .", "label": "", "metadata": {}, "score": "87.006134"}
{"text": "For example , the German compound Versicherungsgesellschaft ( insurance company ) can be decomposed into Versicherung ( its left - most compound component ) and Gesellschaft ( its right - most compound component ) .The Error Position Field 56 specifies the position of a spelling - changing hyphen .", "label": "", "metadata": {}, "score": "87.09384"}
{"text": "For example , the German compound Versicherungsgesellschaft ( insurance company ) can be decomposed into Versicherung ( its left - most compound component ) and Gesellschaft ( its right - most compound component ) .The Error Position Field 56 specifies the position of a spelling - changing hyphen .", "label": "", "metadata": {}, "score": "87.09384"}
{"text": "\u0643\u0645\u0627 \u062a\u0645 \u0639\u0631\u0636 \u0648\u062a\u062d\u0644\u064a\u0644 \u062f\u0642\u0629 \u0646\u062a\u0627\u0626\u062c \u062a\u0642\u0646\u064a\u0627\u062a \u062a\u062d\u0631\u064a\u0631 \u0627\u0644\u0645\u0633\u0627\u0641\u0629 \u0648\u0646\u0645\u0627\u0630\u062c \u0627\u0644\u0644\u063a\u0629 \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u0643\u0644\u0645\u0629 word n - grams \u0648 \u0645\u0635\u0641\u0648\u0641\u0629 \u0627\u0644\u0625\u0644\u062a\u0628\u0627\u0633 ( OCR confusion ) \u0644\u0644\u062a\u0635\u062d\u064a\u062d \u0627\u0644\u0625\u0645\u0644\u0627\u0626\u064a .English Abstract .The problem of automatic spell checking and correction is one of the active research problems in the area of Natural Language Processing ( NLP ) .", "label": "", "metadata": {}, "score": "87.38791"}
{"text": "Action box 420 ends the FOR - LOOP associated with action box 404 , thereby ending the derivation expansion processing .While the invention has been shown and described having reference to specific preferred embodiments , those skilled in the art will understand that variations in form and detail may be made without departing from the spirit and scope of the invention .", "label": "", "metadata": {}, "score": "88.034775"}
{"text": "The US delegation is the first which started the work on LMF in 2003 .In early 2004 , the ISO / TC37 committee decided to form a common ISO project with Nicoletta Calzolari ( Italy ) as convenor and Gil Francopoulo ( France ) and Monte George ( US ) as editors .", "label": "", "metadata": {}, "score": "88.305695"}
{"text": "Tim Buckwalter email : info@qamus.org .Note .This corpus is free of charge as a web download distribution ; a request must be submitted to ldc@ldc.upenn.edu to obtain the data .Note that there is a $ 100 charge if requested on a CD - ROM .", "label": "", "metadata": {}, "score": "89.588905"}
{"text": "If the word is a verb , we give its tense : present ( \" ealmuDAric \" : \u0627\u0644\u0645\u0636\u0627\u0631\u0639 ) , past ( \" ealmADI \" : \u0627\u0644\u0645\u0627\u0636\u064a ) , or imperative ( \" ealeamr \" : \u0627\u0644\u0623\u0645\u0631 ) .We also give its voice : active or passive .", "label": "", "metadata": {}, "score": "89.892456"}
{"text": "Cliticizing refers to the process by which special words or particles which have no independent accent are combined with stressed content words ( e.g. , the French l'cole consists of the preposed enclitic le the ! and the word cole school ! )", "label": "", "metadata": {}, "score": "91.42316"}
{"text": "abc'+'defignored .Token not split . 'IILEADAPO def Apostrophe stripped . 'Apostrophe not stripped .Token not split . 'Apostrophe not stripped .Token not split ._ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ .", "label": "", "metadata": {}, "score": "91.712204"}
{"text": "It 's found in a table of post - clitic initial characters as defined in the language structure .II .The language is Spanish or Italian AND .The length of the token exceeds the minimum post - clitic length as defined in the language structure AND .", "label": "", "metadata": {}, "score": "91.76892"}
{"text": "Spell Checking and Correction for Arabic Text Recognition .Arabic Abstract . \u0647\u0630\u0627 \u0628\u0627\u0644\u0625\u0636\u0627\u0641\u0629 \u0627\u0644\u0649 \u0623\u0647\u0645\u064a\u062a\u0647\u0627 \u0641\u064a \u062a\u0635\u062d\u064a\u062d \u0623\u062e\u0637\u0627\u0621 \u0627\u0644\u062a\u0639\u0631\u0641 \u0627\u0644\u0636\u0648\u0626\u064a \u0639\u0644\u0649 \u0627\u0644\u062d\u0631\u0648\u0641 ( OCR ) .\u0627\u0633\u062a\u062e\u062f\u0645\u0646\u0627 \u0627\u0644\u0645\u062d\u0644\u0644 \u0627\u0644\u0635\u0631\u0641\u064a \u0627\u0644\u0639\u0631\u0628\u064a \u0644\u0640 Buckwalter ( BAMA ) \u060c \u0648\u0627\u0644\u0628\u062d\u062b \u0641\u064a \u0627\u0644\u0642\u0627\u0645\u0648\u0633Dictionary Look - up \u0648\u0646\u0645\u0627\u0630\u062c \u0627\u0644\u0644\u063a\u0629 \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u062d\u0631\u0641 character n - grams \u0644\u0644\u062a\u062f\u0642\u064a\u0642 \u0627\u0644\u0625\u0645\u0644\u0627\u0626\u064a .", "label": "", "metadata": {}, "score": "91.897125"}
{"text": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ temp1 Plural , Singular , Masculine Femininetemp2 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ .", "label": "", "metadata": {}, "score": "92.400444"}
{"text": "Technol .Resources Int .Conf . ; NEMLAR , Cairo , Egypt ( 2004 ) .Stolcke , A. : Srilman extensible language modeling toolkit .In : Proceedings of the 7th International Conference on Spoken Language Processing ( ICSLP 2002 ) , pp .", "label": "", "metadata": {}, "score": "92.850296"}
{"text": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ temp1 Plural , Singular , Singular , Masculine Masculine Femininetemp2 Plural , Singular , Masculine Feminine _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ .", "label": "", "metadata": {}, "score": "93.68922"}
{"text": "The PreNoun Phrase Break flag is set .The Internal Parentheses flag is set .The Pre Noun Phrase Break flag is set .The Post Noun Phrase Break flag is set .The Internal Parentheses flag is set .The Internal Parentheses flag is set .", "label": "", "metadata": {}, "score": "93.78558"}
{"text": "The Pre Noun Phrase Break flag is set .The Post Noun Phrase Break flag is set for the \" abc \" token .The Probable Termination flag is set .The Post Noun Phrase Break flag is set .The Stripped End of Word Period flag is not set .", "label": "", "metadata": {}, "score": "93.833374"}
{"text": "Unicode Error ( IIUNICERR ) .Unconvertible Unicode characters are treated exactly like IIALPHA lexical characters .They do not cause a token to break : upon encountering such a character , the IIUNICERR flag must be set .Probable Lexical Termination ( IIPLTERM ) .", "label": "", "metadata": {}, "score": "95.328674"}
{"text": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ Plural , Singular , Singular , temp1 Masculine Masculine Femininetemp2 Plural , Singular , Masculine Feminine _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ .", "label": "", "metadata": {}, "score": "95.74141"}
{"text": "Mathematics and Informatics Department , Faculty of Sciences of Fez , Fez , Morocco .Received 18 June 2010 ; Revised 3 September 2010 ; Accepted 6 January 2011 .Academic Editor : M. Tory .Copyright \u00a9 2011 Mourad Gridach and Noureddine Chenfour .", "label": "", "metadata": {}, "score": "95.81674"}
{"text": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ Plural , Singular , temp1 Masculine Femininetemp2 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ .", "label": "", "metadata": {}, "score": "97.641785"}
{"text": "$ java -cp stanford-parser.jar -mx500 m edu.stanford.nlp.parser.lexparser.LexicalizedParser -escaper edu.stanford.nlp.trees.international.arabic.IBMArabicEscaper arabicFactored.ser.gz arabic-onesent-ibm-utf8.txt Loading parser from serialized file arabicFactored.ser.gz ... done [ 9.3 sec].Parsing file : arabic-onesent-ibm-utf8.txt with 1 sentences .Parsing [ sent .1 len . 8 ] : \u0648 \u0646\u0634\u0631 \u0627\u0644\u0639\u062f\u0644 \u0645\u0646 \u062e\u0644\u0627\u0644 \u0642\u0636\u0627\u0621 \u0645\u0633\u062a\u0642\u0644 .", "label": "", "metadata": {}, "score": "100.36171"}
{"text": "Internal Apostrophe flag not set . abc''defignored .Token not split .Internal Apostrophe flag not set .abc'-'def ignored .Token not split .Internal Apostrophe flag not set . abc . 'abc . ' def ignored .Token not split .", "label": "", "metadata": {}, "score": "100.532715"}
{"text": "The Pre Noun Phrase Break flag is set .The Pre Noun Phrase Break flag is set .No flags are set .No flags are set .The Post Noun Phrase Break flag is set .The Post Noun Phrase Break flag is set .", "label": "", "metadata": {}, "score": "100.74295"}
{"text": "\u0648\u0642\u062f \u062a\u0645\u062a \u0645\u0642\u0627\u0631\u0646\u0629 \u062f\u0642\u0629 \u0646\u062a\u0627\u0626\u062c \u062a\u0642\u0646\u064a\u0627\u062a \u0627\u0644\u062a\u062f\u0642\u064a\u0642 \u0627\u0644\u0625\u0645\u0644\u0627\u0626\u064a \u0645\u0646 \u062d\u064a\u062b \u0627\u0644\u0634\u0645\u0648\u0644\u064a\u0629 ( recall ) \u0648\u0627\u0644\u062f\u0642\u0629 ( precision ) \u0648 \u0642\u064a\u0627\u0633 \u06411 ( ( F1-measure \u0648\u062a\u0645 \u062c\u0645\u0639 \u0646\u062a\u0627\u0626\u062c \u062a\u0642\u0646\u064a\u0627\u062a \u0627\u0644\u0645\u062d\u0644\u0644 \u0627\u0644\u0635\u0631\u0641\u064a \u0627\u0644\u0639\u0631\u0628\u064a \u0644\u0640 Buckwalter \u0648\u0627\u0644\u0628\u062d\u062b \u0641\u064a \u0627\u0644\u0642\u0627\u0645\u0648\u0633 \u0648\u0646\u0645\u0648\u0630\u062c \u0627\u0644\u0644\u063a\u0629 \u0639\u0644\u0649 \u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u062d\u0631\u0641 \u0648\u062a\u0645 \u0639\u0631\u0636\u0647\u0627 \u0648\u062a\u062d\u0644\u064a\u0644\u0647\u0627 .", "label": "", "metadata": {}, "score": "113.7563"}
{"text": "Copyright \u00a9 2011 Mourad Gridach and Noureddine Chenfour .This is an open access article distributed under the Creative Commons Attribution License , which permits unrestricted use , distribution , and reproduction in any medium , provided the original work is properly cited .", "label": "", "metadata": {}, "score": "131.20253"}
