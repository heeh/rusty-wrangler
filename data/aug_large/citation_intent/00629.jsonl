{"text": "We prove that the Unfold / Fold transformation system defined by Tamaki and Sato preserves the acyclicity of the initial program .From this result , it follows that when the transformation is applied to an acyclic program , then the finite failure set for definite programs is preserved ; in the case of normal programs , all major declarative and operational semantics are preserved as well .", "label": "", "metadata": {}, "score": "35.5712"}
{"text": "pp . 311 - 331 ) .The unfold / fold transformation system defined by Tamaki and Sato was meant for definite programs .It transforms a program into an equivalent one in the sense of both the least Herbrand model semantics and the Computed Answer Substitution semantics .", "label": "", "metadata": {}, "score": "35.855724"}
{"text": "We study the semantic properties of the transformation and the conditions under which the technique terminates , is sound and complete , and is also generally applicable to a wide class of programs .We illustrate our method with several examples and discuss the relation with Supercompilation and Partial Evaluation .", "label": "", "metadata": {}, "score": "37.50936"}
{"text": "In logic programming , the so - called static / dynamic distinction is hard ... \" .Partial evaluation is a method for program specialization based on fold / unfold transformations [ 8 , 25].Partial evaluation of pure functional programs uses mainly static values of given data to specialize the program [ 15 , 44].", "label": "", "metadata": {}, "score": "37.77105"}
{"text": "Partial evaluation of pure functional programs uses mainly static values of given data to specialize the program [ 15 , 44].In logic programming , the so - called static / dynamic distinction is hard ... \" .Partial evaluation is a method for program specialization based on fold / unfold transformations [ 8 , 25].", "label": "", "metadata": {}, "score": "40.207397"}
{"text": "We revisit the main techniques of program transformation which are used in partial evaluation , mixed computation , supercompilation , generalized partial computation , rule - based program derivation , program specialization , compiling control , and the like .We present a methodology which underlines these techniques as a ' common pattern of reasoning ' and explains the various correspondences which can be established among them .", "label": "", "metadata": {}, "score": "40.324684"}
{"text": "urce transformations to the improvement of recursive programs [ Cohen Improvement Recursive ] .The application of unfold / fold transformations to recursion removal in logic programs has been considered by Bloch [ 4 ] , Debray [ 9 ] , and more recently by Azibi et al .", "label": "", "metadata": {}, "score": "40.363"}
{"text": "As a consequence , a number of program optimisations , known from unfold / fold transformations and supercompilation , can not be achieved .In this paper , we ... \" . \"Classical \" partial deduction , within the framework by Lloyd and Shepherdson , computes partial deduction for separate atoms independently .", "label": "", "metadata": {}, "score": "40.419277"}
{"text": "A Transformation System for Developing Recursive Programs .Rod Burstall and John Darlington .JACM 24(1 ) , 44 - -67 , 1977 .They introduce the unfolding / folding terminology and state the rules in .the naive form .They do n't do the metatheory with any rigour but they do .", "label": "", "metadata": {}, "score": "41.067753"}
{"text": "It appears to be well suited for partial deduction too .The technique guarantees termination , yet it is not overly conservative .Our technique can be viewed as an instance of Martens ' and Gallagher 's recent framework for global termination of partial deduction , but it is more general in some important respects , e.g. it uses well - quasi orderings rather than well - founded orderings .", "label": "", "metadata": {}, "score": "42.494587"}
{"text": "The technique is not particularily biased towards positive supercompilation , but also works for deforestation and partial evaluation .It appears to be well suited for partial deduction too .This paper presents a termination technique for positive supercompilation , based on notions from term algebra .", "label": "", "metadata": {}, "score": "42.88376"}
{"text": "This is done by instrumenting the underlying unfold rules with a small rewrite system that handles constraints on terms , thereby ensuring perfect information propagation .We illustrate this by transforming a naively specialised string matcher into an optimal one .The presented algorithm is guaranteed to terminate by means of generalisation steps . by Morten H. S\u00f8rensen , Robert Gl\u00fcck - Proceedings of ILPS&apos;95 , the International Logic Programming Symposium , 1995 . \" ...", "label": "", "metadata": {}, "score": "43.31759"}
{"text": "We conjecture that a similar approach may contribute to improve upon current ( on - line ) control strategies for functional program transformation methods such as ( positive ) supercompilation . ...r attention .In recent work , both authors of the present paper have already , separately , investigated issues in global control of partial deduction .", "label": "", "metadata": {}, "score": "44.065388"}
{"text": "We illustrate this by transforming a na ... \" .We extend positive supercompilation to handle negative as well as positive information .This is done by instrumenting the underlying unfold rules with a small rewrite system that handles constraints on terms , thereby ensuring perfect information propagation .", "label": "", "metadata": {}, "score": "44.592186"}
{"text": "We extend positive supercompilation to handle negative as well as positive information .This is done by instrumenting the underlying unfold rules with a small rewrite system that handles constraints on terms , thereby ensuring perfect information propagation .We illustrate this by transforming a na ... \" .", "label": "", "metadata": {}, "score": "44.64511"}
{"text": "Links ] .[ 18 ] Tamaki , H. and Sato , T. Unfold / Fold Transformation of Logic Programs .Proceedings of the Second International Conference on Logic Programming , Uppsala , Sweden , 1984 , pp .127 - 138 .", "label": "", "metadata": {}, "score": "44.816975"}
{"text": "We formalise the notion of a redundant argument and show that one can not decide effectively whether a given argument is redundant .We then give a safe , effective approximation of the notion of a redundant argument and describe several simple and efficient algorithms calculating based on the approximative notion .", "label": "", "metadata": {}, "score": "45.312885"}
{"text": "Finally , we put supercompilation into the larger perspective of metacomputation and consider three metacomputation tasks : specialization , composition , and inversion . by Jesper J\u00f8rgensen , Michael Leuschel , Bern Martens - Proceedings of the International Workshop on Logic Program Synthesis and Transformation ( LOPSTR&apos;96 ) , LNCS 1207 , 1996 .", "label": "", "metadata": {}, "score": "45.660324"}
{"text": "However , the results inherited by [ 2 , 3 ] mainly regard the termination of the PE method , while the ( strong ) soundness and completeness results must be restated for the lazy strategy .A post - processing renaming scheme ( second phase ) is necessary which we describe and illustrate on the well - known matching example .", "label": "", "metadata": {}, "score": "45.878803"}
{"text": "Also , it is within the abstract operator that the progress towards termination resides .Definiti ...Tools . by Jens Peter Secher , Morten Heine S\u00f8rensen - Journal of Functional Programming , 1996 . \" ...We extend positive supercompilation to handle negative as well as positive information .", "label": "", "metadata": {}, "score": "46.096478"}
{"text": "Keywords : specification transformation , program synthesis , correctness preservation , program specification .[ 1 ] C. Aravindan and P. M. Dung .On the Correctness of Unfold / Fold Transformations of Normal and Extended Logic Programs .( The Journal of Logic Programming ) 201 - 217,1995 .", "label": "", "metadata": {}, "score": "46.295418"}
{"text": "This paper first develops a generic offline partial deduction technique for pure logic programs , notably supporting partially instantiated datastructures via binding types .From this a very efficient cogen is derived , which generates very efficient generating extensions ( executing up to several orders of magnitude faster than current online systems ) which in turn perform very good and non - trivial specialisation , even rivalling existing online systems .", "label": "", "metadata": {}, "score": "46.469692"}
{"text": "This paper first develops a generic offline partial deduction technique for pure logic programs , notably supporting partially instantiated datastructures via binding types .From this a very efficient cogen is derived , which generates very efficient generating extensions ( executing up to several orders of magnitude faster than current online systems ) which in turn perform very good and non - trivial specialisation , even rivalling existing online systems .", "label": "", "metadata": {}, "score": "46.469692"}
{"text": "accumulation , are compared .Their basis , viz .the associativity and the existence of a neutral element inherent in a monoid , is identified .Keywords transformational programming , factorial , fast reverse , accumulation , continuation ... \" .", "label": "", "metadata": {}, "score": "47.529755"}
{"text": "If suitable conditions are satisfied , these rules preserve the least Herbrand model semantics .In MAP the programmer also has a menu with a set of predefined strategies , ie , sequences of applications of transformation rules .Strategies are needed to derive programs with specific syntactic properties , such as : tail recursion , linear recursion , absence of existential variables and unnecessary data structures and absence of redundant nondeterminism .", "label": "", "metadata": {}, "score": "47.546524"}
{"text": "Unfold / Fold Transformations of Logic Programs .MIT Press , pages 565 - 583,1991 .[Links ] .[ 10 ] F. J. Gal\u00e1n and J. M. Ca\u00f1ete .Synthesis of Constructive Specifications .In ( Proceedings of the I Int .", "label": "", "metadata": {}, "score": "47.794456"}
{"text": "This paper gives a gentle introduction to Turchin 's supercompilation and its applications in metacomputation with an emphasis on recent developments .First , a complete supercompiler , including positive driving and generalization , is defined for a functional language and illustrated with examples .", "label": "", "metadata": {}, "score": "47.815796"}
{"text": "We then give a safe , effective approximation of the notion of a redundant argument and describe several simple and efficient algorithms calculating based on the approximative notion .We conduct extensive experiments with our algorithms on mechanically generated programs illustrating the practical benefits of our approach .", "label": "", "metadata": {}, "score": "47.921856"}
{"text": "17 ] on the other hand starts from ... . byMichael Leuschel , Morten Heine S\u00f8rensen - Logic Program Synthesis and Transformation .Proceedings of LOPSTR'96 , LNCS 1207 , 1996 . \" ...This paper is concerned with the problem of removing , from a given logic program , redundant arguments .", "label": "", "metadata": {}, "score": "47.973404"}
{"text": "On the contrary , we show that grammar and set - constraint - based program analyses are similar abstract interpretations with iterative fixpoint computation using either a widening or a finitary grammar / set - constraints transformer or even a finite domain for each particular program .", "label": "", "metadata": {}, "score": "47.98337"}
{"text": "Any such transformation should preserve the main properties of the initial program : among them , termination .In the field of logic programming , the class of acyclic programs plays an important role in this respect , since it is closely related to the one of terminating programs .", "label": "", "metadata": {}, "score": "48.847103"}
{"text": "The presented algorithm is guaranteed to terminate by means of generalisation steps . byMichael Leuschel - STATIC ANALYSIS .PROCEEDINGS OF SAS'98 , LNCS 1503 , 1998 . \" ...Recently well - quasi orders in general , and homeomorphic embedding in particular , have gained popularity to ensure the termination of program analysis , specialisation and transformation techniques .", "label": "", "metadata": {}, "score": "49.14415"}
{"text": "In this paper , we propose a novel concept of program specialization with respect to output constraints .We provide the form in which an efficient specialized program should be in after such specialization , and consider a variant of partial evaluation to achieve it .", "label": "", "metadata": {}, "score": "49.51509"}
{"text": "We discuss some further control refinements and illustrate the operation of the concrete algorithm and/or some of its possible variants on interesting transformation examples . \" ...This paper gives a gentle introduction to Turchin 's supercompilation and its applications in metacomputation with an emphasis on recent developments .", "label": "", "metadata": {}, "score": "49.647823"}
{"text": "This paper is concerned with the problem of removing , from a given logic program , redundant arguments .These are arguments which can be removed without affecting correctness .Most program specialisation techniques , even though they perform argument filtering and redundant clause removal , fail to re ... \" .", "label": "", "metadata": {}, "score": "49.895744"}
{"text": "We believe this work will broaden the scope of program specialization , and provide a framework for building more generic and versatile program adaptation techniques . ...r version of forward context analysis appeared in [ 6 ] , with the intention to find total- and partial - redundant checks in a program .", "label": "", "metadata": {}, "score": "49.933014"}
{"text": "C. Consel and S ... . \" ...This paper surveys sequential and parallel implementation techniques for functional programming languages , as well as optimizations that can improve their performance .Sequential implementations have evolved from simple interpreters to sophisticated super - combinator - based compilers , while most paral ... \" .", "label": "", "metadata": {}, "score": "50.047997"}
{"text": "Since unrestricted unfolding may encounter arbitrarily many terms , a termination analysis has to determine those subterms where unfolding is possibly dangerous .We show that such an analysis can be obtained from a control flow analysis by an extension with integer constraints -- essentially at no loss in efficiency .", "label": "", "metadata": {}, "score": "50.073597"}
{"text": "The amount of information propagation is significant : positive supercompilation , GPC , and supercompilation can specialize a general pattern matcher to a fixed pattern so as to obtain efficient output similar to that of the Knuth - Morris - Pratt algorithm .", "label": "", "metadata": {}, "score": "51.08822"}
{"text": "It transforms functions which are hard to verify into functions whose correctness can be shown by the existing provers .In contrast to classical program transformations , the aim of our technique is not to increase efficiency , but to increase veriability .", "label": "", "metadata": {}, "score": "51.322823"}
{"text": "This analysis yields a most precise liveness pattern for the data at each program point , which is signi cantly more precise than results from previous methods .The analysis algorithm takes cubic time in terms of the size of the program in the worst case but is very e cient in practice , as shown by our prototype implementation .", "label": "", "metadata": {}, "score": "51.514004"}
{"text": "One of the flagship applications of partial evaluation is compilation and compiler generation .However , partial evaluation is usually expressed as a source - to - source transformation for high - level languages , whereas realistic compilers produce object code .", "label": "", "metadata": {}, "score": "51.811295"}
{"text": "One of the flagship applications of partial evaluation is compilation and compiler generation .However , partial evaluation is usually expressed as a source - to - source transformation for high - level languages , whereas realistic compilers produce object code .", "label": "", "metadata": {}, "score": "51.811295"}
{"text": "We describe the concrete options used in the implementation(s ) , look at abstraction in a practical Prolog context , include and discuss an extensive set of benchmark results .From these , we can conclude that conjunctive partial deduction indeed pays off in practice , thoroughly beating its conventional precursor on a wide ... . ...", "label": "", "metadata": {}, "score": "51.958977"}
{"text": "Tamaki and Sato [ 18 ] , and K .. by Alberto Pettorossi , Maurizio Proietti - Partial Evaluation , Int&apos;l Seminar , Dagstuhl , 1996 .\" We revisit the main techniques of program transformation which are used in partial evaluation , mixed computation , supercompilation , generalized partial computation , rule - based program derivation , program specialization , compiling control , and the like .", "label": "", "metadata": {}, "score": "52.08693"}
{"text": "We study four transformation methodologies which are automatic instances of Burstall and Darlington 's fold / unfold framework : partial evaluation , deforestation , supercompilation , and generalized partial computation ( GPC ) .One can classify these and other fold / unfold based transformers by how muc ... \" .", "label": "", "metadata": {}, "score": "52.37247"}
{"text": "Scherlis invented a similar approach , expression procedures , which solved these two problems : expression procedures preserve total correctness and require no transformation history . onger \" than both deforestation and partial evaluation .However , the main advantage of positive supercompilation , as presen ...", "label": "", "metadata": {}, "score": "52.574932"}
{"text": "In this paper , we show that this restriction can be lifted through ( polygenetic ) specialisation of entire atom conjunctions .We present a generic algorithm for such partial deduction and discuss its correctness in an extended formal framework .We concentrate on novel control challenges specific to this \" conjunctive \" partial deduction .", "label": "", "metadata": {}, "score": "52.760284"}
{"text": "[ 4 ] A. Bundy , A. Smaill and G. Wiggins .The Synthesis of Logic Programs from Inductive Proofs .In ( Proceedings of Esprit Symposium on Computational Logic ) .Springer - Verlag , pages 135 - 149,1990 .[", "label": "", "metadata": {}, "score": "53.144653"}
{"text": "OF THE ACM SIGPLAN CONF .ON PARTIAL EVALUATION AND SEMANTICS - BASED PROGRAM MANIPULATION , PEPM&apos;97 , VOLUME 32 , 12 OF SIGPLAN NOTICES , 1997 . \" ...Partial evaluation is a method for program specialization based on fold / unfold transformations [ 8 , 25].", "label": "", "metadata": {}, "score": "53.40719"}
{"text": "Most of the research , to date , on optimizing program transformations for declarative languages has focused on sequential execution strategies .In this paper , we consider a class of commonly encountered computations whose \" natural \" specification is essentially sequential , and show how algeb ... \" .", "label": "", "metadata": {}, "score": "53.58694"}
{"text": "Unfortunately unfold/ ... \" .The best known approach to program transformation is the unfold / fold methodology of Burstall and Darlington : asimple , intuitive , and expressive approach which serves as the basis of many automatic program transformation algorithms ( such as partial evaluation and deforestation ) .", "label": "", "metadata": {}, "score": "53.84472"}
{"text": "The basic algorithm ( first phase ) is formalized as an instance of the framework for the partial evaluation of functional logic programs of [ 2 , 3 ] , using lazy narrowing .However , the results inherited by [ 2 , 3 ] mainly regard the termination of the PE method , while the ( strong ) soundness and completeness results must be restated for the lazy strategy .", "label": "", "metadata": {}, "score": "54.025833"}
{"text": "Blending both , formerly separate , contributions , in this paper , we present an elegant and sophisticated technique to globally control partial deduction of normal logic programs .Leaving unspecified the specific local control one may wish to plug in , we develop a concrete global control strategy combining the use of characteristic atoms and trees with global ( m-)trees .", "label": "", "metadata": {}, "score": "54.14576"}
{"text": "Finally , a few misunderstandings may be removed . \" ... Partial deduction and driving are two methods used for program specialization in logic and functional languages , respectively .We argue that both techniques achieve essentially the same transformational effect by unification - based information propagation .", "label": "", "metadata": {}, "score": "54.181747"}
{"text": "These are arguments which can be removed without affecting correctness .Most program specialisation techniques , even though they perform argument filtering and redundant clause removal , fail to remove a substantial number of redundant arguments , yielding in some cases rather inefficient residual programs .", "label": "", "metadata": {}, "score": "54.408627"}
{"text": "A common approach within functional and logic programming , known respectively as partial evaluation and partial deduction , is to exploit partial knowledge about the input .It ... \" .Program specialisation aims at improving the overall performance of programs by performing source to source transformations .", "label": "", "metadata": {}, "score": "54.43226"}
{"text": "More on Unfold / Fold Transformations of Normal Programs : Preservation of Fitting 's Semantics .Bossi , Annalisa and Etalle , Sandro ( 1994 )More on Unfold / Fold Transformations of Normal Programs : Preservation of Fitting 's Semantics .", "label": "", "metadata": {}, "score": "54.615"}
{"text": "Program transformation is a methodology for deriving correct and efficient programs from specifications .In this chapter , we will look at the so called ' rules + strategies ' approach , and we will report on the main techniques which have been introduced in the literature for that approach , i ... \" .", "label": "", "metadata": {}, "score": "54.6348"}
{"text": "Several techniques to ensure termination of deforestation on all first - order programs are known , but a technique for higher - order programs was only recently introduced by Hamilton , and elaborated and implemented in the Glasgow Haskell compiler by Marlow .", "label": "", "metadata": {}, "score": "54.936066"}
{"text": "We show that our method preserves the lazy narrowing semantics and that the inclusion of simplification steps in narrowing derivations can improve control during specialization . ... term that is \" syntactically simpler \" than another is smaller than the other . by", "label": "", "metadata": {}, "score": "55.518745"}
{"text": "Most program specialisation techniques , even though they perform argument filtering and redundant clause removal , fail to re ... \" .This paper is concerned with the problem of removing , from a given logic program , redundant arguments .These are arguments which can be removed without affecting correctness .", "label": "", "metadata": {}, "score": "55.773453"}
{"text": "rocedure 1 one can distinguish between two different levels of control .The unfolding rule U controls the construction of the incomplete SLDNF - trees .The generalisation operation controls the construction of the set of atoms for which such SLDNF - trees are built .", "label": "", "metadata": {}, "score": "55.894634"}
{"text": "Among many problems , the \" eureka \" about when and how to define a new predicate is difficult to find automatically .We propose a new version of the folding rule which decides automatically how to introduce new predicates in a specification .", "label": "", "metadata": {}, "score": "56.018574"}
{"text": "It is based on outermost unfolding of function calls where folding occurs when unfolding takes place within the same nested function call .Since unrestricted unfolding may encounter arbitrarily man ... \" .Deforestation is a transformation of functional programs to remove intermediate data structures .", "label": "", "metadata": {}, "score": "56.036167"}
{"text": "We describe simple unfold / fold transformation sequences for these optimizations that can be automated relatively easily .In the process , we show that the properties of unification and logical variables can sometimes be used to generalize , from traditional languages , the conditions under which these optimizations may be carried out .", "label": "", "metadata": {}, "score": "56.162197"}
{"text": "accumulation , are compared .Their basis , viz .the associativity and the existence of a neutral element inherent in a monoid , is identified .Keywords transformational programming , factorial , fast reverse , accumulation , continuations , lambda abstraction , generalisation , tail recursion , implementation of lists .", "label": "", "metadata": {}, "score": "56.40233"}
{"text": "] g ) .[ . .]The latter two .That is , .( a ) folding is decreasing in the definition order : if you still get a .proper value afterwards , it 's what you had before , but you . might .", "label": "", "metadata": {}, "score": "57.042145"}
{"text": "Sequential implementations have evolved from simple interpreters to sophisticated super - combinator - based compilers , while most parallel implementations have explored a broad range of techniques .We analyze the purpose and function of each implementation technique and discuss the current state - of - the - art in functional language implementation . \" ...", "label": "", "metadata": {}, "score": "57.145317"}
{"text": "It is achieved through a well - automated application of parts of the Burstall - Darlington unfold / fold transformation framework .The main challenge in developing systems is to design automatic control that ensures correctness , efficiency , and termination .", "label": "", "metadata": {}, "score": "57.267376"}
{"text": "The general framework for representing and analyzing properties of recursive data structures using general regular tree grammars applies to other analyses as well . by H. Seidl , M.H. S\u00f8rensen - In 24th ACM Symposium on Principles of Programming Languages , 1997 . \" ...", "label": "", "metadata": {}, "score": "57.298286"}
{"text": "The program derivation process requires some theorem proving capabilities .In particular , in order to apply the goal replacement rule we need to show the equivalence between a new goal and one to be replaced .For instance , during program derivation we may need to use the associativity of list concatenation , which is expressed by the goal equivalence : .", "label": "", "metadata": {}, "score": "58.197758"}
{"text": "This phase is essential also for other non - lazy narrowing strategies , like innermost narrowing , and our method can be easily extended to these strategies .We show that our method preserves the lazy narrowing semantics and that the inclusion of simplification steps in narrowing derivations can improve control during specialization . .", "label": "", "metadata": {}, "score": "58.67079"}
{"text": "The various techniques we present are illustrated via simple examples .A preliminary version of this report has been published in : Moller , B. , Partsch , H. , and Schuman , S. ( eds . ) : Formal Program Development .", "label": "", "metadata": {}, "score": "58.877964"}
{"text": "Standard partial deduction suffers from several drawbacks when compared to topdown abstract interpretation schemes .Conjunctive partial deduction , an extension of standard partial deduction , remedies one of those , namely the lack of side - ways information passing .But two other problems remain : the l ... \" .", "label": "", "metadata": {}, "score": "58.884842"}
{"text": "Such analysises have been invented for tasks like type recovery [ Sh91 ] , binding time analysis [ Co93 ] , or safety analysis [ PS95].Conceptually , these are closely related to A. Deutsch 's store -- based alias analysis [ D .. Indicators .", "label": "", "metadata": {}, "score": "58.96759"}
{"text": "To this end , partial deductions are no longer computed of single atoms , but rather of entire conjunctions ; Hence the term \" conjunctive partial deduction \" .Conjunctive partial deduction aims at ... \" .Recently , partial deduction of logic programs has been extended to conceptually embed folding .", "label": "", "metadata": {}, "score": "59.018955"}
{"text": "To be suitable for inclusion in a compiler , it must terminate on all programs .Several techniques to ensure termination of deforestation on all first - order programs are known , but a technique for ... \" .Wadler 's deforestation algorithm eliminates intermediate data structures from functional programs .", "label": "", "metadata": {}, "score": "59.025764"}
{"text": "This makes the generation of efficient code for loops essential for good performance .Loop optimization of logic programming languages is complicated by the fact that such languages lack the iterative constructs of traditional languages , and instead use recursion to express loops .", "label": "", "metadata": {}, "score": "59.304382"}
{"text": "Grammar - based program analysis \u00e0 la Jones and Muchnick and set - constraint - based program analysis \u00e0 la Aiken and Heintze are static analysis techniques that have traditionally been seen as quite different from abstract - interpretation - based analyses , in particular because of their apparent non - iterati ... \" .", "label": "", "metadata": {}, "score": "59.355682"}
{"text": "Conclusions In this paper we introduce a novel concept of prog ... . ... usually done by modifying the partial evaluator 's code .Finally , the lack of a formal methodology makes it difficult to reason about combining various symbolic values .", "label": "", "metadata": {}, "score": "59.36078"}
{"text": "Conjunctive partial deduction aims at achieving unfold / fold - like program transformations such as tupling and deforestation within fully automated partial deduction .However , its merits greatly surpass that limited context : Also other major efficiency improvements are obtained through considerably improved side - ways information propagation .", "label": "", "metadata": {}, "score": "60.142433"}
{"text": "[5 ] R. M. Burstall y J. Darlington .A Transformational System for Developing Recursive Programs .( Journal of the ACM ) 24(1):44 - 67,1977 .[Links ] .[ 6 ] Y. Deville andK. K. Lau .Logic Program Synthesis .", "label": "", "metadata": {}, "score": "60.42353"}
{"text": "We present a simple , as well as a more refined integration of these methods .Finally we illustrate the practical relevance of this approach for some advanced applications , like proving functionality or specialising certain meta - programs written in the ground representation , where it surpasses the precision of current abstract interpretation techniques . 1 Introduction The heart of any technique for partial deduc ... . by Robert Gl\u00fcck , Jesper J\u00f8rgensen , Bern Martens , Morten H. S\u00f8rensen , 1996 . \" ... \"", "label": "", "metadata": {}, "score": "60.59947"}
{"text": "This paper demonstrates that this approach is also applicable to partial evaluation of logic programming languages , also called partial deduction .Self - application has not been as much in focus in logic programming as for functional and imperative languages , and the attempts to self - apply partial deduction systems have , of yet , not been altogether that successful .", "label": "", "metadata": {}, "score": "61.192314"}
{"text": "We present a simple algorithm for deforestation based on two fusion rules for hylomorphism , an expressive recursion pattern .A generic notation for hylomorphisms is introduced , where natural transformations are explicitly factored out , and it is used to represent programs .", "label": "", "metadata": {}, "score": "61.49821"}
{"text": "Languages that integrate functional and logic programming with a complete operational semantics are based on narrowing , a unification - based goal - solving mechanism which subsumes the reduction principle of functional languages and the resolution principle of logic languages .Formal methods of transformation of functional logic programs can be based on this well - established operational semantics .", "label": "", "metadata": {}, "score": "61.542263"}
{"text": "In this context , the synthesis task involves nding executable equations such that the given speci cation holds in their standard model .Hence , to synthesize such programs , induction is necessary .We formulate procedures ... \" .An equational approach to the synthesis of functional and logic program is taken .", "label": "", "metadata": {}, "score": "61.758114"}
{"text": "This paper demonstrates that this approach is also applicable to partial eva ... \" .This paper demonstrates that this approach is also applicable to partial evaluation of logic programming languages , also called partial deduction .Self - application has not been as much in focus in logic programming as for functional and imperative languages , and the attempts to self - apply partial deduction systems have , of yet , not been altogether that successful .", "label": "", "metadata": {}, "score": "61.869064"}
{"text": "\" we retain correctness , but we might lose termination unless we . impose .some extra restriction \" .This whole style of program transformation really caught on in the Logic .Programming community , and it 's there that you 'll find people trying to .", "label": "", "metadata": {}, "score": "62.087437"}
{"text": "We represent partially dead recursive data using liveness patterns based on general regular tree grammars extended with the notion of live and dead , an ... \" .Abstract .This paper describes a general and powerful method for dead code analysis and elimination in the presence of recursive data constructions .", "label": "", "metadata": {}, "score": "62.189026"}
{"text": "For example , on page 18 of N. Heintze thesis , it is alleged that ' ' The finitary nature of abstract interpretation implies that there is a fundamental limitation on the accuracy of this approach to program analysis .There are decidable kinds of analysis that can not be computed using abstract interpretation ( even with widening and narrowing ) .", "label": "", "metadata": {}, "score": "62.20907"}
{"text": "Recently well - quasi orders in general , and homeomorphic embedding in particular , have gained popularity to ensure the termination of program analysis , specialisation and transformation techniques .In this paper , . byMichael Leuschel , Morten Heine S\u00f8rensen - Logic Program Synthesis and Transformation .", "label": "", "metadata": {}, "score": "62.68793"}
{"text": "Deforestation is a program transformation to remove these intermediate data structures automatically .We present a simple algorithm for deforestation based on two fusion rules for hylo ... \" .In functional programming , intermediate data structures are often used to \" glue \" together small programs .", "label": "", "metadata": {}, "score": "62.69228"}
{"text": "Turchin 's supercompiler is a program transformer that includes both partial evaluation and deforestation .Although known in the West since 1979 , the essence of its techniques , its more precise relations to other transformers , and the properties of the programs that it produces are only now becoming apparent in the Western functional programming community . by Yanhong A. Liu , Scott D. Stoller - Science of Computer Programming , 1999 . \" ... Abstract .", "label": "", "metadata": {}, "score": "62.88061"}
{"text": "Logic Programs \" certainly give a suitably restricted fold rule , but I 'm . sure it was n't the last word , and that others ( eg Manna and Waldinger , .Pettorossi and Proietti ) are n't exactly silent on the subject .", "label": "", "metadata": {}, "score": "63.18834"}
{"text": "First , the approximation process is formalized and not only explained using examples .Second , a domain of abstract properties is exhibited which is of general scope .Third , these analyses can be easily combined with other abstract - interpretation - based analyses , in particular for the analysis of numerical values .", "label": "", "metadata": {}, "score": "63.650883"}
{"text": "We discuss these issues in the context of a ( lazy ) functional logic language .We formalize a two - phase specialization method for a non - strict , first order , integrated language which makes use of lazy narrowing to specialize the program w.r.t . a goal .", "label": "", "metadata": {}, "score": "63.787643"}
{"text": "Links ] .[ 3 ] A. Bertoni , G. Mauri and P. Miglioli .On the Power of Model Theory in Specifying Abstract Data Types and in capturing their Recursiveness .( Fundamenta Informaticae ) , VI(2):27 - 170,1983 .[", "label": "", "metadata": {}, "score": "64.17972"}
{"text": "[Links ] .[ 7 ] R. G. Dromey .Systematic Program Development .( IEEE Transaction of Software Engineering ) .[Links ] .[ 8 ] P. Flener .Logic Program Synthesis from Incomplete Information .Kluwer Academic Publishers , Massachusetts , 1995 .", "label": "", "metadata": {}, "score": "64.3502"}
{"text": "Links ] .[ 2 ] A. Avellone , M. Ferrari and P. Miglioli .Synthesis of Programs in Abstract Data Types .8thIn ( Proceedings of the International Workshop on Logic Program Synthesis and Transformation ) .LNCS 1559 , Springer , 1999 , pages 81 - 100 .", "label": "", "metadata": {}, "score": "64.43843"}
{"text": "In logic programming , the so - called static / dynamic distinction is hardly present , whereas considerations of determinacy and choice points are far more important for control [ 12].We discuss these issues in the context of a ( lazy ) functional logic language .", "label": "", "metadata": {}, "score": "64.56719"}
{"text": "One can classify these and other fold / unfold based transformers by how much information they maintain during transformation .We introduce the positive supercompiler , a version of deforestation including more information propagation , to study such a classification in detail .", "label": "", "metadata": {}, "score": "64.59872"}
{"text": "B&D77 , T&S83 and G&S91 live in my filing cabinet ... .Hope this helps .Conor by Siau - cheng Khoo , Kun Shi - Journal of Higher - Order and Symbolic Computing ( HOSC , 2004 . \" ...In component - based software development , gluing of two software components are usually achieved by defining an interface specification , and creating wrappers on components to support the interface .", "label": "", "metadata": {}, "score": "64.967026"}
{"text": "The various techniques we present are illustrated ... \" .We present an overview of the program transformation methodology , focusing our attention on the so - called ' rules + strategies ' approach in the case of functional and logic programs .", "label": "", "metadata": {}, "score": "65.360405"}
{"text": "The resulting system is correct wrt nearly all the declarative semantics for normal programs .An exception is Fitting 's model semantics .In this paper we consider a slight variation of Seki 's method and we study its correctness wrt Fitting 's semantics .", "label": "", "metadata": {}, "score": "65.53388"}
{"text": "For example , it allows the language designer to perform interpreter - based experiments with a source - to - source version of the partial evaluator before building a realistic compiler which generates object code automatically . \" ...Turchin 's supercompiler is a program transformer that includes both partial evaluation and deforestation .", "label": "", "metadata": {}, "score": "65.59476"}
{"text": "Conjunctive partial deduction , an extension of standard partial deduction , remedies one of those , namely the lack of side - ways information passing .But two other problems remain : the lack of success - propagation as well as the lack of inference of global success - information .", "label": "", "metadata": {}, "score": "65.72638"}
{"text": "Partial deduction and driving are two methods used for program specialization in logic and functional languages , respectively .We argue that both techniques achieve essentially the same transformational effect by unification - based information propagation .We show their equivalence by analyzing the definition and construction principles underlying partial deduction and driving , and by giving a translation from a functional language to a definite logic language preserving certain properties .", "label": "", "metadata": {}, "score": "66.489944"}
{"text": "Recently well - quasi orders in general , and homeomorphic embedding in particular , have gained popularity to ensure the termination of program analysis , specialisation and transformation techniques .In this paper , . byMichael Leuschel , Maurice Bruynooghe - THEORY AND PRACTICE OF LOGIC PROGRAMMING , 2002 . \" ...", "label": "", "metadata": {}, "score": "66.75806"}
{"text": "Abstract .Recently , considerable advances have been made in the ( online ) control of logic program specialisation .A clear conceptual distinction has been established between local and global control and on both levels concrete strategies as well as general frameworks have been proposed .", "label": "", "metadata": {}, "score": "66.97998"}
{"text": "Nevertheless , most of the research on transformation of programs in high level languages has focused , to date , on execution strategies that are ... .As a result , it is not at all certain that the application of such techniques leads to programs that run faster on parallel implementations : performance improvements , if any , are purely incidental .... . \" ...", "label": "", "metadata": {}, "score": "67.05791"}
{"text": "These papers show how a given specification , written as a set of recursive equations or a set of Horn clauses , can be transformed into an efficient program by applying suitable transformation rules which are guaranteed to preserve the intended semantics .", "label": "", "metadata": {}, "score": "67.20232"}
{"text": "It ends with an assessment of current achievements and sketches some remaining research challenges . \" ... Abstract .Recently , considerable advances have been made in the ( online ) control of logic program specialisation .A clear conceptual distinction has been established between local and global control and on both levels concrete strategies as well as general frameworks have been proposed .", "label": "", "metadata": {}, "score": "67.384384"}
{"text": "1 Introduction One of the first program transformations that appeared in the literature was the accumulation transformation .The transformation is now classic , although not everyone may know it under exactly this name .In this note , I try to relate several descriptions of this program transformation technique .", "label": "", "metadata": {}, "score": "67.46227"}
{"text": "Links ] by A. Pettorossi , M. Proietti , R. Dicembre - ACM Computing Surveys , 1996 . \" ...We present an overview of the program transformation methodology , focusing our attention on the so - called ' rules + strategies ' approach in the case of functional and logic programs .", "label": "", "metadata": {}, "score": "67.805145"}
{"text": "We also discuss some control issues which occur when performing these steps .Unfor ... . ... ; u ! 1 ; u ! 0 u u ; u ! 1 sg where s is the start symbol .In other words , we want to partially evaluate Parse w.r.t . the input goal parse(\\Gamma ; [ s ] ; Xn [ ] ) where \\Gamma is the term [ s !", "label": "", "metadata": {}, "score": "68.476166"}
{"text": "Also published in : ACM Computing Surveys , Vol 28 , No . 2 , June 1996 .3 1 Introduction The program transformation approach to the development of programs has first been advocated by [ Burstall - Darlington 77 ] , although the basic ideas were already presented in previous papers by the same authors [ Darlington 72 , Burstall - Darlington 75].", "label": "", "metadata": {}, "score": "68.51718"}
{"text": "The MAP system allows the programmer to create , load , update , and store theories which may be useful for the derivations at hand .MAP keeps track of the history of the program derivations , and provides the user with some facilities for backtracking to previous programs and exploring alternative derivations .", "label": "", "metadata": {}, "score": "68.87306"}
{"text": "We are developing libraries which allow the user to load several sets of predefined rules , strategies , and theories into the system .We also plan to design languages that enable the users to define their own rules and strategies , so that the system may work as a generic , programmable program transformer .", "label": "", "metadata": {}, "score": "69.42107"}
{"text": "Hence , to synthesize such programs , induction is necessary .We formulate procedures for inductiveproof , aswell as for program synthesis , using the framework of \\ordered rewriting \" .We also propose heuristics for generalizing from a sequence of equational consequences .", "label": "", "metadata": {}, "score": "70.35875"}
{"text": "In this chapter , we will look at the so called ' rules + strategies ' approach , and we will report on the main techniques which have been introduced in the literature for that approach , in the case of logic programs .", "label": "", "metadata": {}, "score": "70.7545"}
{"text": "Michael Leuschel - STATIC ANALYSIS .PROCEEDINGS OF SAS'98 , LNCS 1503 , 1998 . \" ...Recently well - quasi orders in general , and homeomorphic embedding in particular , have gained popularity to ensure the termination of program analysis , specialisation and transformation techniques .", "label": "", "metadata": {}, "score": "71.58635"}
{"text": "Example 1 Consider the following program .y ( h : t ) !h : a t y in u ; v ; w : a ( a u v ) w The term u ; v ; w : a ( a u v ) w appends the three lists u , v , and w. Appending u and v ... .", "label": "", "metadata": {}, "score": "72.84961"}
{"text": "We are currently developing a tool , called MAP , to support the interactive derivation of logic programs by means of transformation rules and strategies .The MAP system has been implemented in SICStus Prolog and its graphical user interface has been developed using Tcl / Tk .", "label": "", "metadata": {}, "score": "73.20883"}
{"text": "Springer - Verlag 1990 .[Links ] .[14 ] A. Pettorossi and M. Proietti .Transformation of Logic Programs : Foundations and Techniques .( J. Logic Programming )19,20:261- 320,1994 . [Links ] .[ 15 ] M. Proietti and A. Pettorossi .", "label": "", "metadata": {}, "score": "73.87132"}
{"text": "We are planning several enhancements to the current system .We would like to improve the ease of interaction with the user by providing more powerful graphical tools for navigating through the tree of alternative program derivations .We would also like to be able to extract program derivations and to reuse them for deriving in a ( semi- ) automatic way new programs from similar initial specifications .", "label": "", "metadata": {}, "score": "73.94569"}
{"text": "17 ] D. Stuart Robertson , J. Agust .Pragmatics in the Synthesis of Logic Programs .In ( Proceedings of the 8th Int .Workshop on Logic Program Synthesis and Transformation ) .LNCS 1559 , Springer , pages 41 - 60,1999 .", "label": "", "metadata": {}, "score": "74.19165"}
{"text": "Tools . by Maria Alpuente , Moreno Falaschi , German Vidal - ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS , 1996 . \" ...Languages that integrate functional and logic programming with a complete operational semantics are based on narrowing , a unification - based goal - solving mechanism which subsumes the reduction principle of functional languages and the resolution principle of logic languages .", "label": "", "metadata": {}, "score": "74.56417"}
{"text": "( Just use citeseer on Burstall and Darlington and .you 'll find plenty of stuff . )Tamaki and Sato adapted the techniques . in 1982 , transferring the problem also .They had a go at fixing it in .", "label": "", "metadata": {}, "score": "74.83802"}
{"text": "In literature , it can be fou ... . \" ...Several induction theorem provers have been developed which support mechanized verification of functional programs .Unfortunately , a major problem is that they often fail in verifying tail recursive functions ( which correspond to imperative programs ) .", "label": "", "metadata": {}, "score": "75.7633"}
{"text": "Ed . F. Orejas .Almagro , Spain , 2001 .[Links ] .[11 ] K. K. Lau and M. Ornaghi .On Specification Frameworks and Deductive Synthesis of Logic Programs .In ( Proceedings of LOPSTR'94 and META ' 94 ) .", "label": "", "metadata": {}, "score": "76.21522"}
{"text": "Howev ... \" .In component - based software development , gluing of two software components are usually achieved by defining an interface specification , and creating wrappers on components to support the interface .We believe that interface specification provides useful information for specializing components .", "label": "", "metadata": {}, "score": "76.75744"}
{"text": "Abstract : Programs typically spend much of their execution time in loops .This makes the generation of efficient code for loops essential for good performance .Loop optimization of logic programming languages is complicated by the fact that such languages lack the iterative constructs of traditional ... \" .", "label": "", "metadata": {}, "score": "76.81044"}
{"text": "MAP : a Tool for Program Derivation based on Transformation Rules and Strategies . by Alberto Pettorossi , Maurizio Proietti , and Sophie Renault .Since 1987 the Department of Informatics of the University of Rome Tor Vergata and the IASI Institute of the National Research Council ( CNR ) , Rome , have been cooperating on the development of techniques and tools for automatic program derivation and validation .", "label": "", "metadata": {}, "score": "77.35651"}
{"text": "The control ... . by Maria Alpuente , Moreno Falaschi , Pascual Juli\u00e1n , German Vidal - IN PROC .OF THE ACM SIGPLAN CONF .ON PARTIAL EVALUATION AND SEMANTICS - BASED PROGRAM MANIPULATION , PEPM&apos;97 , VOLUME 32 , 12 OF SIGPLAN NOTICES , 1997 . \" ...", "label": "", "metadata": {}, "score": "77.78003"}
{"text": "[Links ] .[ 12 ] E. Mendelson .Introduction to Mathematical Logic .Ed .Wadsworth & Brooks / Cole Advanced books & Software , Third edition , 1987 .[Links ] .[ 13 ] H. A. Partsch .", "label": "", "metadata": {}, "score": "77.78047"}
{"text": "Several induction theorem provers have been developed which support mechanized verification of functional programs .Unfortunately , a major problem is that they often fail in verifying tail recursive functions ( which correspond to imperative programs ) .However , in practice imperative programs are used almost exclusively .", "label": "", "metadata": {}, "score": "79.331795"}
{"text": "( Fundamenta Informaticae ) 18:267 - 286,1993 . [Links ] .[ 16 ] D. R. Smith .KIDS : A Semiautomatic program development system .( IEEE Transaction of Software Engineering ) 16:1024 - 1043,1990 .[Links ] .", "label": "", "metadata": {}, "score": "80.89477"}
{"text": "Such data are constructed in one component and later consumed in another component , but never appear in the result of the whole program .The compositional styl ... . ...usly , such as zip or nth .Because our method always works on the function level and explicitly manipulates the functors , it is easy to give symmetric definitions to those functions like zip .", "label": "", "metadata": {}, "score": "81.06899"}
{"text": "Our work is a successful application of several meta - computation techniques to build the system , both in theory and in practice .The composition is an application of deforestation or fusion .The result is a run - time code generation system built from existing components .", "label": "", "metadata": {}, "score": "81.15482"}
{"text": "The future MAP system should be able to exploit the information produced by these modules for performing very powerful program transformations whose applicability conditions may depend on the specific properties of the programs at hand .As already indicated in the literature , there are various applications of program transformation within the field of machine - supported software production , reuse , and validation for which the MAP system could be a useful supporting tool .", "label": "", "metadata": {}, "score": "82.93759"}
{"text": "Reina Mercedes s / n .Sevilla .fax:34 954557139 , e - mail : galanm@lsi.us.es .A formal specification can describe software models which are difficult to program .Transformational methods based on fold / unfold strategies have been proposed to palliate this problem .", "label": "", "metadata": {}, "score": "83.50158"}
{"text": "Our research is currently supported by the Italian Ministry for the Universities and Scientific and Technological Research and by CNR .Tools . by Akihiko Takano , Erik Meijer - In Proc .Conference on Functional Programming Languages and Computer Architecture , 1995 . \" ...", "label": "", "metadata": {}, "score": "85.3244"}
{"text": ".. , exploring special properties or being in the context of other studies .We consider it as a separate optimization , and a simple analysis is used to guarantee performance improvement .Waters [ 5 ... .by Nachum Dershowitz , Uday S. Reddy - In Eighth National Conf . on Arti cial Intelligence , 1990 . \" ...", "label": "", "metadata": {}, "score": "91.02907"}
{"text": "( b ) various people have studied restrictions to the folding rule . which .purport to guarantee that definition is preserved , on the nose .( but they have n't always quite got it right ) .You 're probably aware that the granddaddy of all this stuff , introducing .", "label": "", "metadata": {}, "score": "92.650444"}
{"text": "Homeomorphic embedding on selected atoms has recently gained popularity as the basis for such an order .3 At the global control le ...Hi Neil You 'll be pleased to know that lots of people have been banging their heads off this one .", "label": "", "metadata": {}, "score": "94.352066"}
{"text": "Share .J. Braz .Comp .Soc . vol.9 no.1 Campinas Nov. 2003 .Full text available only in PDF format .Dept . of Languages and Computer Systems .Faculty of Computer Science of Seville , Dept .de Lenguajes y Sistemas Inform\u00e1ticos .", "label": "", "metadata": {}, "score": "103.23205"}
