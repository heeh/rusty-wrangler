{"text": "This completes the match , so we merge this new substitution -- with the one for the outer part of the rule .-- -- Eg : RULE [ x : % ] ( x : Int x ) .anonymizeXb , A .", "label": "", "metadata": {}, "score": "40.22928"}
{"text": "You may combine like terms .This rule means adding or subtracting terms with variables of the same kind .The expression 4 x + 4 x simplifies to 8 x. 2 y + y is equal to 3 y. The expression 13 - 7 + 3 simplifies to 9 .", "label": "", "metadata": {}, "score": "41.84478"}
{"text": "Applying the same principle to algebra , the distributive property can be very useful in getting rid of those pesky parentheses : .Using addition and subtraction .You can use addition and subtraction to get all the terms with variables on one side of an equation and all the numeric terms on the other .", "label": "", "metadata": {}, "score": "42.90089"}
{"text": "One of the most common ways to simplify an expression is to combine like terms .Numeric terms may be combined , and any terms with the same variable part may be combined .Take , for instance , the expression 5 x + 3 + 3 x - 6 y + 4 + 7 y. .", "label": "", "metadata": {}, "score": "43.82823"}
{"text": "( x ) ) # f ) ( memq(x special - infix - operators ) # t ) ( # t contains - only - punctuation ?", "label": "", "metadata": {}, "score": "43.83928"}
{"text": "In this case , we ignore the top - level bindings when checking for rule shadowing .-- The rewrite engine should apply the most specific rule , instead -- of the first one that it finds that matches .If not , then we -- should give some warning about overlapping rules .", "label": "", "metadata": {}, "score": "44.161934"}
{"text": "You 're thinking that combining like terms is pretty cool , but what if you have unlike terms contained within parentheses ?Does n't the order of operations require you to deal with terms in parentheses first ?Indeed , it does , and that 's where the distributive property comes in .", "label": "", "metadata": {}, "score": "44.196655"}
{"text": "--In this case , we ignore the top - level bindings when checking for rule shadowing .-- The rewrite engine should apply the most specific rule , instead -- of the first one that it finds that matches .If not , then we -- should give some warning about overlapping rules .", "label": "", "metadata": {}, "score": "44.33684"}
{"text": "--In this case , we ignore the top - level bindings when checking for rule shadowing .-- The rewrite engine should apply the most specific rule , instead -- of the first one that it finds that matches .If not , then we -- should give some warning about overlapping rules .", "label": "", "metadata": {}, "score": "44.33684"}
{"text": "Vm ) \" .( Application of the \" UNION - FIND \" or \" MERGE - FIND \" algorithm . )Forward Chaining .The basic idea in forward chaining is this : You look for unifications that will match each of the formulas in the left hand side of a known rule to known facts .", "label": "", "metadata": {}, "score": "44.721855"}
{"text": "Clearly , it does n't matter in what order we delete two elements from the list .We prove the lemma delete - element - commutes , and the lemmas delete - same - member - preserves - permutation - p and permutation - p - transitive follow : .", "label": "", "metadata": {}, "score": "44.756435"}
{"text": "This completes the match , so we merge this new substitution -- with the one for the outer part of the rule .-- -- Eg : RULE [ x : % ] ( x : Int x ) .anonymizeXb , A . module DDC .", "label": "", "metadata": {}, "score": "45.15011"}
{"text": "This completes the match , so we merge this new substitution -- with the one for the outer part of the rule .-- -- Eg : RULE [ x : % ] ( x : Int x ) .anonymizeXb , A . module DDC .", "label": "", "metadata": {}, "score": "45.15011"}
{"text": "This can be made very efficient using the UNION - FIND or MERGE - FIND algorithm .Forward Chaining .The basic idea in forward chaining is this : You look for unifications that will match each of the formulas in the left hand side of a known rule to known facts .", "label": "", "metadata": {}, "score": "46.285282"}
{"text": "To facilitate this we add a rewrite rule that moves a DELETE - ELEMENT inside an APPEND : .If we could extract the cons out of the append , it would match the hypothesis .We can do this using a simple permutation lemma , and then prove the result : . : rule - classes nil ) .", "label": "", "metadata": {}, "score": "48.10999"}
{"text": "Our implementation of merge sort has two helpers .The first , merge - ordered , takes two ordered ( sorted ) lists and efficiently merges them into a single ordered list : .The second , split , is used to break a list into two smaller sublists ( roughly half and half ) .", "label": "", "metadata": {}, "score": "48.495663"}
{"text": "x ) ) # f ) \u00c2 \u00c2 \u00c2 \u00c2 \u00c2 \u00c2 ( ( memq x special - infix - operators ) # t ) \u00c2 \u00c2 \u00c2 \u00c2 \u00c2 \u00c2 ( # t \u00c2 \u00c2 \u00c2 \u00c2 \u00c2 \u00c2 \u00c2(contains - only - punctuation ? rest ) ( sin x ) ( - x ) ( - ) ( function + ) ( map + ' ( 2 4 6 ) ) ( current - time ) ( 1 2 3 ) ( 4 5 . x ) ( cond ( ( not ( symbol ?", "label": "", "metadata": {}, "score": "48.950428"}
{"text": "The difficult task is to prove that the result of merge - ordered is a permutation of the original list .One way to approach this is to show that the result of merge - ordered is a permutation of the result of appending the two lists , and separately show that appending the two sublists produces a permutation of the original list .", "label": "", "metadata": {}, "score": "49.48944"}
{"text": "unbox ) ( unbox x ) -- which will return a substitution ( empty here ) , -- and the leftover argument ' x ' .takeXAppsWithAnnots d ' -- Match the hole part with the right of the ' x ' binding .", "label": "", "metadata": {}, "score": "50.6303"}
{"text": "unbox ) ( unbox x ) -- which will return a substitution ( empty here ) , -- and the leftover argument ' x ' .takeXAppsWithAnnots d ' -- Match the hole part with the right of the ' x ' binding .", "label": "", "metadata": {}, "score": "50.6303"}
{"text": "unbox ) ( unbox x ) -- which will return a substitution ( empty here ) , -- and the leftover argument ' x ' .takeXAppsWithAnnots d ' -- Match the hole part with the right of the ' x ' binding .", "label": "", "metadata": {}, "score": "50.6303"}
{"text": "Non - examples .For each set E in U , choose a representative element R(E ) .If E contains a constant symbol , then R(E ) must be that constant ; otherwise , it can be any of the variable symbols .", "label": "", "metadata": {}, "score": "50.89074"}
{"text": "( x ) ) # f ) ( memq(x special - infix - operators ) # t ) ( # t contains - only - punctuation ? rest ) sin(x ) -(x ) - ( ) function(+ ) map(+ ' ( 2 4 6 ) ) current - time ( ) ( 1 2 3 ) ( 4 5 .", "label": "", "metadata": {}, "score": "51.23783"}
{"text": "They do not reflect our opinions .We take no responsibility for the content of ratings and reviews submitted by users .Comments / improvements welcome !\u00c2The \" simple \" implementations is separable from the shared / cyclic implementation , so that those who do n't want shared and cyclic versions can omit them .", "label": "", "metadata": {}, "score": "51.407356"}
{"text": "Usually , algebra problems use letters such as n , t , or x for variables .In most algebra problems , your goal is to find the value of the variable .Following the rules of algebra .Algebra has several rules or properties that - when combined - allow you to simplify equations .", "label": "", "metadata": {}, "score": "52.329628"}
{"text": "We could also go with option 3 : define the behavior in CSS3 Backgrounds and Borders or Tables , not sure what the appropriate place would be .I agree with fantasai , but it illustrates David 's point about usecases beautifully .", "label": "", "metadata": {}, "score": "52.440437"}
{"text": "I think this should be stronger than may ; it should say must .I do n't think soliciting ( potentially accidental ) implementations of an undefined feature is the right way forward here .Without a use case , you 're better off reserving the feature in case a use case appears later .", "label": "", "metadata": {}, "score": "52.471474"}
{"text": "x ) ) # f ) ( ( memq x special - infix - operators ) # t ) ( # t ( contains - only - punctuation ? rest ) sin(x ) -(x ) - ( ) function(+ ) map(+ ' ( 2 4 6 ) ) current - time ( ) ( 1 2 3 ) ( 4 5 .", "label": "", "metadata": {}, "score": "52.978508"}
{"text": "You may add or subtract any value as long as you do it to both sides of the equation .You may multiply or divide by any number ( except 0 ) as long as you do it to both sides of the equation .", "label": "", "metadata": {}, "score": "53.026535"}
{"text": "W is either a variable or a constant .No variable appears on the left hand side of two different pairs .No variable appears on the left hand side of one pair and the right hand side of a different pair .", "label": "", "metadata": {}, "score": "53.072025"}
{"text": "substituteTs basK ' $ T . .]substituteXArgsbasK $ S .emptySubstInfo -- Check constraints , perform substitution and add weakens if necessary . liftX( length lets ) rhs2 -- Substitute bindings into the effect of the right of the rule .", "label": "", "metadata": {}, "score": "53.409508"}
{"text": "substituteTs basK ' $ T . .]substituteXArgsbasK $ S .emptySubstInfo -- Check constraints , perform substitution and add weakens if necessary . liftX( length lets ) rhs2 -- Substitute bindings into the effect of the right of the rule .", "label": "", "metadata": {}, "score": "53.409508"}
{"text": "substituteTs basK ' $ T . .]substituteXArgsbasK $ S .emptySubstInfo -- Check constraints , perform substitution and add weakens if necessary . liftX( length lets ) rhs2 -- Substitute bindings into the effect of the right of the rule .", "label": "", "metadata": {}, "score": "53.409508"}
{"text": "substituteXArgs bas3 ) clo -- Substitute bindings into rule constraints and -- check that they are all satisfied by the environment .xLets a lets $ weakeff a eff ' $ weakclo a clo ' $ S .substituteXArgs bas3 rhs3 -- Add the remaining arguments from the original expression -- that were n't matched by rule return $ X . .", "label": "", "metadata": {}, "score": "53.817688"}
{"text": "substituteXArgs bas3 ) clo -- Substitute bindings into rule constraints and -- check that they are all satisfied by the environment .xLets a lets $ weakeff a eff ' $ weakclo a clo ' $ S .substituteXArgs bas3 rhs3 -- Add the remaining arguments from the original expression -- that were n't matched by rule return $ X . .", "label": "", "metadata": {}, "score": "53.817688"}
{"text": "substituteXArgs bas3 ) clo -- Substitute bindings into rule constraints and -- check that they are all satisfied by the environment .xLets a lets $ weakeff a eff ' $ weakclo a clo ' $ S .substituteXArgs bas3 rhs3 -- Add the remaining arguments from the original expression -- that were n't matched by rule return $ X . .", "label": "", "metadata": {}, "score": "53.817688"}
{"text": "We may choose the representatives a , b , W , Q , c . 2 .Unifying two atomic formulas .Let F1 and F2 be two atomic formulas with no variables in common .Let F1 be the formula \" P(T1 ...", "label": "", "metadata": {}, "score": "54.202538"}
{"text": "Non - examples .appears in two sets ) .Unifying two atomic formulas .Let F1 and F2 be two atomic formulas with no variables in common .Let F1 be the formula \" P(T1 ...Tk ) \" and let F2 be the formula \" Q(W1 ...", "label": "", "metadata": {}, "score": "54.27384"}
{"text": "Next , we add some helpful functions describing correctness properties of sorting algorithms .The first determines whether a list is ordered , or sorted : .It is not enough for a sorting algorithm to produce ordered output however ; the output list must also be a reordering , or permutation , of the input list .", "label": "", "metadata": {}, "score": "54.30315"}
{"text": "This is n't very useful , as merge - ordered is not expanded , and we know more about append than merge - ordered .Instead , we explicitly tell it to induct over merge - ordered : . : hints ( ( \" Goal \" : induct ( merge - ordered x y ) ) ) ) .", "label": "", "metadata": {}, "score": "54.575005"}
{"text": "Responsibility of the knowledge base designer to set up the rules so that this does n't happen .( Prolog ) .Repeated goal detection : If goal Gi is a subgoal of Gj ( direct or indirect ) and Gi is identical to Gj , then fail Gi .", "label": "", "metadata": {}, "score": "54.588875"}
{"text": "There are two ways to avoid this : .Responsibility of the knowledge base designer to set up the rules so that this does n't happen .( Prolog ) .Repeated goal detection : If goal Gi is a subgoal of Gj ( direct or indirect ) and Gi is identical to Gj , then fail Gi .", "label": "", "metadata": {}, "score": "54.776436"}
{"text": "In backward chaining you start with a goal , a statement that you want to prove , in addition to the knowledge base , and you look for derivations that allow you to prove the goal .You look for a rule R or a fact F. whose head unifies with the goal , and then recursively try to prove all the formulas in the tail of R. .", "label": "", "metadata": {}, "score": "54.88894"}
{"text": "Rearranging and dropping unnecessary conditions : .( IMPLIES ( AND ( NOT ( EQUAL A ( CAR X ) ) ) ( MEMBER A Y ) ) ( MEMBER A ( DELETE - ELEMENT ( CAR X ) Y ) ) ) .", "label": "", "metadata": {}, "score": "55.01469"}
{"text": "This is a fact that you can add to the knowledge base .You keep doing this until there is nothing new to be derived , then stop .Example : Suppose you start with the following knowledge base ( a subset of the knowledge base at the start of these notes : hence the gappy numbering ) .", "label": "", "metadata": {}, "score": "55.46826"}
{"text": "All sentences have the form .Since all variables are universally quantified , with a scope of the entire sentence , there is no need to actually write down the quantifiers , as long as there is some convention about which symbols are variables and which are constants .", "label": "", "metadata": {}, "score": "55.71035"}
{"text": "This could get quite complicated , for two reasons : ( 1 ) Table layout algorithms may be making assumptions about certain widths being nonnegative ( the border - spacing itself , column advances , etc . ) .( 2 )", "label": "", "metadata": {}, "score": "55.91207"}
{"text": "takeXAppsAsList lhs -- Match the function part of the expression against -- the function part of the rule .match sub vs l f -- Match each of the expression arguments against -- the arguments of the rule .-- An example rule with a holes is : -- RULE ( i : Int ) .", "label": "", "metadata": {}, "score": "56.010826"}
{"text": "takeXAppsAsList lhs -- Match the function part of the expression against -- the function part of the rule .match sub vs l f -- Match each of the expression arguments against -- the arguments of the rule .-- An example rule with a holes is : -- RULE ( i : Int ) .", "label": "", "metadata": {}, "score": "56.010826"}
{"text": "takeXAppsAsList lhs -- Match the function part of the expression against -- the function part of the rule .match sub vs l f -- Match each of the expression arguments against -- the arguments of the rule .-- An example rule with a holes is : -- RULE ( i : Int ) .", "label": "", "metadata": {}, "score": "56.010826"}
{"text": "Therefore , to change 3 x to 1 x ( or x ) , divide both sides of the equation by 3 : .Featured Book .More For Dummies .Newsletters .Sign up for one of our newsletters ... .", "label": "", "metadata": {}, "score": "56.30499"}
{"text": "Using multiplication and division .The rules of algebra also allow you to multiply and divide both sides of an equation by any number except zero .You want to find the value of x , not three times x .What happens if you divide a number by itself ?", "label": "", "metadata": {}, "score": "56.483734"}
{"text": "Re : border - radius .This precedence rule would however mean that your usecase is n't possible . must be ignored .As shown above , it does n't make sense for the table element either :( .Hmm ... tables without border - collapse have similar problems ... how does the current specification deal with this ?", "label": "", "metadata": {}, "score": "56.90808"}
{"text": "If so , should n't we clarify this somehow ?Yes .That was the intent .I 've added some clarifications , let me know if it helps .Yes , the bottom right corner will be adjusted as well .", "label": "", "metadata": {}, "score": "57.03138"}
{"text": "This behavior will not change if we decide to add the collapsing rules later .We can add a non - normative note about what behavior we expect to spec in the future , in case an implementor really wants to tackle this , but I 'm hesitant to add further complications to border collapsing at this point .", "label": "", "metadata": {}, "score": "57.342613"}
{"text": "Next we define the main mergesort function , which splits the list into two sublists , sorts each sublist , then merges them using merge - ordered : .ACL2 will not admit mergesort because it is not able to prove that it terminates - it does n't realize that the lists returned from split are smaller than the original list .", "label": "", "metadata": {}, "score": "57.36235"}
{"text": "Observe that ( append ( cdr y ) x ) and ( delete - element ( car y ) ( append y x ) ) are the same list .This means that we should be able to show this if we can just show two lemmas : one showing that switching the args to append gives a permutation , and the other a congruence showing that we can permute the second argument to delete - element : . : rule - classes ( : congruence ) ) .", "label": "", "metadata": {}, "score": "57.49267"}
{"text": "So are -6 y and 7 y . 3 and 4 are also like terms because they 're numbers without variables .So combining the like terms , you have .By combining the like terms , the expression 5 x + 3 + 3 x - 6 y + 4 + 7 y simplifies to 8 x + y + 7 .", "label": "", "metadata": {}, "score": "57.515316"}
{"text": "We start with : . : rule - classes ( : congruence ) ) .The congruence rule class is a special class for rules of this form ( we could have also used defcong ) .ACL2 proves the above automatically , but if we attempt to show the analogous result for argument 1 , we get stuck at this checkpoint : .", "label": "", "metadata": {}, "score": "58.31587"}
{"text": "forall(X ) male(X ) V female(X ) .( nor with disjunction ) .forall(X ) not(male(X ) ^ female(X ) ) ( nor with negation ) .Inference .The method of inference we will discuss is a mixture of two ideas : . I. Modus Ponens .", "label": "", "metadata": {}, "score": "58.316483"}
{"text": "forall(X ) male(X ) V female(X ) .( nor with disjunction ) .forall(X ) not(male(X ) ^ female(X ) ) ( nor with negation ) .Inference .The method of inference we will discuss is a mixture of two ideas : . I. Modus Ponens .", "label": "", "metadata": {}, "score": "58.316483"}
{"text": "( IMPLIES ( MEMBER ( CAR X )X - EQUIV ) ( MEMBER ( CAR X ) ( APPEND X - EQUIV Y ) ) ) .This is clearly true .We show a general lemma for this , which allows us to prove the desired congruence : . : rule - classes ( : congruence ) ) .", "label": "", "metadata": {}, "score": "58.47797"}
{"text": "These are still nontrivial to show , though .We start out by proving that permutation - p an equivalence relation , allowing ACL2 to better reason with it .Attempting to prove permutation - p - transitive gives us this checkpoint : .", "label": "", "metadata": {}, "score": "58.57981"}
{"text": "Reformulating Some Predicate Calculus Sentences into Datalog .In some cases a predicate calculus sentence which does not immediately appear to satisfy the conditions for Datalog can be reformulated into a logically equivalent form that does satisfy the conditions .The most important case involves existentially quantified variables on the left - hand side of an implication .", "label": "", "metadata": {}, "score": "58.696514"}
{"text": "You can add and subtract any number as long as you do it to both sides of the equation .In this case , you want to get rid of the number 4 on the left side of the equation .How do you make the 4 disappear ?", "label": "", "metadata": {}, "score": "58.9311"}
{"text": "This is a fact that you can add to the knowledge base .You keep doing this until there is nothing new to be derived , then stop .Example : Suppose you start with the following knowledge base .Rules 1 .", "label": "", "metadata": {}, "score": "59.26494"}
{"text": "We prove a lemma to show this : .Rearranging and dropping unneeded hypotheses , we get : .( IMPLIES ( AND ( CONSP X ) ( MEMBER ( CAR X ) Z ) ( PERMUTATION - P Y Z ) ) ( PERMUTATION - P ( DELETE - ELEMENT ( CAR X ) Y ) ( DELETE - ELEMENT ( CAR X ) Z ) ) ) .", "label": "", "metadata": {}, "score": "59.788864"}
{"text": "Wo n't this behavior change if we decide to add the collapsing rules later ? -( Added after re - reading this mail a few times )Some things seem to make more sense if radii is used to mean x and y radius .", "label": "", "metadata": {}, "score": "59.791855"}
{"text": "( IMPLIES ( AND ( MEMBER ( CAR X ) Y ) ( PERMUTATION - P ( DELETE - ELEMENT ( CAR X ) Y ) ( CDR X ) ) ) ( PERMUTATION - P Y X ) ) .We will show that : .", "label": "", "metadata": {}, "score": "60.277058"}
{"text": "I am not going to go through this in detail .fc(RR : set of rules ; FF : set of facts ) return set of facts .Backward Chaining .In backward chaining you start with a goal , a statement that you want to prove , in addition to the knowledge base , and you look for derivations that allow you to prove the goal .", "label": "", "metadata": {}, "score": "60.5441"}
{"text": "Intuitive argument : Sentence ( A ) means \" For any X and Z that we choose , if we can find a Y such that parent(X , Y ) and parent(Y , Z ) then grandparent(X , Z ) .\" Now suppose that Elizabeth is a parent of Charles and Charles is a parent of William , thus satisfying the condition of ( B ) .", "label": "", "metadata": {}, "score": "60.578712"}
{"text": "( x ) cond((not(symbol ?( x ) ) # f ) ( memq(x special - infix - operators ) # t ) ( # t contains - only - punctuation ? rest ) ( sin x ) ( - x ) ( - ) ( function + ) ( map + ' ( 2 4 6 ) ) ( current - time ) ( 1 2 3 ) ( 4 5 . x ) ( cond ( ( not ( symbol ?", "label": "", "metadata": {}, "score": "60.616264"}
{"text": "The natural formulation of this in predicate calculus is , .In that form , this does not satisfy the conditions on Datalog because of the existential quantifier .However , it is logically equivalent to . which is valid Datalog .", "label": "", "metadata": {}, "score": "61.05551"}
{"text": "It remains to show that mergesort 's output is a permutation of its input : .( defthm mergesort - permutation - of - input ( permutation - p ( mergesort x ) x ) ) .Attempting to prove this , we get stuck at this simplification checkpoint : .", "label": "", "metadata": {}, "score": "61.22203"}
{"text": "When we attempt to prove this , we fail at : .Simplifying and rearranging : .( IMPLIES ( PERMUTATION - P ( DELETE - ELEMENT X ( CDR A ) )( DELETE - ELEMENT X ( DELETE - ELEMENT ( CAR A ) B ) ) ) ( PERMUTATION - P ( DELETE - ELEMENT X ( CDR A ) )", "label": "", "metadata": {}, "score": "61.429546"}
{"text": "- I also have trouble with \" The radii of a single corner should not extend past the boundaries of the cell at that corner \" .I think I 'm supposed to read this as \" The radii of a single corner [ of the table or inline - table ] should not extend past the boundaries of the cell at that corner \" , but that does n't make sense .", "label": "", "metadata": {}, "score": "62.09751"}
{"text": "Inference in Datalog .All sentences have the form .Since all variables are universally quantified , with a scope of the entire sentence , there is no need to actually write down the quantifiers , as long as there is some convention about which symbols are variables and which are constants .", "label": "", "metadata": {}, "score": "62.132828"}
{"text": "ACL2 can prove the second permutation trivially .Given transitivity , it should be able to prove the result from just a lemma for the first permutation above , but its rewriting heuristics do n't work .Instead , we define a more explicit lemma that directly implies the result , adding a hypothesis that is easy to derive from existing hypotheses : .", "label": "", "metadata": {}, "score": "62.185642"}
{"text": "Backward chaining proceeds as follows : . G1 unifies , either with fact 17 or with fact 25 .G2 fails Return to G1 ( last point where there was a choice ) .Unlike forward chaining , backward chaining can potentially go into an infinite loop .", "label": "", "metadata": {}, "score": "62.246025"}
{"text": "I am not going to go through this in detail .fc(RR : set of rules ; FF : set of facts ) return set of facts .A trace of the subroutine \" consequences \" for a reasonably complicated example is given here .", "label": "", "metadata": {}, "score": "63.251366"}
{"text": "-- -- The environment is used for ' hole ' rules , that can look up bound definitions -- and match if inlining would let them , even when inlining wo n't occur .RewriteEnv a n -- ^ Environment to rewrite in , contains witnesses -- for the constraints on rules .", "label": "", "metadata": {}, "score": "63.962128"}
{"text": "-- -- The environment is used for ' hole ' rules , that can look up bound definitions -- and match if inlining would let them , even when inlining wo n't occur .RewriteEnv a n -- ^ Environment to rewrite in , contains witnesses -- for the constraints on rules .", "label": "", "metadata": {}, "score": "63.962128"}
{"text": "-- -- The environment is used for ' hole ' rules , that can look up bound definitions -- and match if inlining would let them , even when inlining wo n't occur .RewriteEnv a n -- ^ Environment to rewrite in , contains witnesses -- for the constraints on rules .", "label": "", "metadata": {}, "score": "63.962128"}
{"text": "Thus , all sentences have either the form .PRED(TERM ... TERM ) ; or 2 . where all the TERM 's are either variables or constants .Sentences of form ( 1 ) are called \" facts \" ; sentences of form ( 2 ) are called \" rules \" .", "label": "", "metadata": {}, "score": "64.10458"}
{"text": "Thus , all sentences have either the form .PRED(TERM ... TERM ) ; or 2 . where all the TERM 's are either variables or constants .Sentences of form ( 1 ) are called \" facts \" ; sentences of form ( 2 ) are called \" rules \" .", "label": "", "metadata": {}, "score": "64.10458"}
{"text": "Another example : if the goal is \" daughter(J , K , L ) \" ( find J , K , L such that J is the daughter of K and L ) then backward chaining proceeds as follows : .G2 fails Return to G1 ( last point where there was a choice ) .", "label": "", "metadata": {}, "score": "64.83242"}
{"text": "( IMPLIES ( AND ( CONSP X ) ( MEMBER ( CAR X ) Y ) ( PERMUTATION - P Y Z ) ) ( MEMBER ( CAR X ) Z ) ) .So we need to show that if a is in X and X is a permutation of Y , a is in Y. A good general result for this is : .", "label": "", "metadata": {}, "score": "65.68777"}
{"text": "This does n't make any sense for dotted and dashed borders , though .In other words : XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX XXXX^^ ^^XXXXXXX^^ ^^XXXX XX^^XXX^ ^XX XX XXX XX X First Cell X Second Cell X XX XXX XX .Re : border - radius .", "label": "", "metadata": {}, "score": "65.81491"}
{"text": "Convince me that the existing border - collapsing model is well implemented and beautifully painted , and I might change my mind , but having worked on that part of Mozilla 's code and written testcases for it , that 's not the impression I have right now .", "label": "", "metadata": {}, "score": "66.053154"}
{"text": "I would n't be willing to enable this for Firefox 3.1 without spending a while combing through the table code to see what assumptions it might break .And I think I have much higher priority things to work on .And I do n't see a strong use case for it .", "label": "", "metadata": {}, "score": "66.631996"}
{"text": "We 'd at least have to add a note that this might change in the future .I 'd rather leave it undefined and \" recommend \" that it does nothing .We can still add a test to the test suite , but then future UAs that support border - radius applied to internal table elements wo n't be in violation of this spec .", "label": "", "metadata": {}, "score": "66.74648"}
{"text": "ASVAB Preparation : Algebra Review .You will encounter algebra problems on the ASVAB .In all these cases , the quantities are the same on both sides of the equal sign .Variables .Most algebraic equations involve using one or more variables .", "label": "", "metadata": {}, "score": "67.765755"}
{"text": "when ( any ( flip RE .hasDef env ) free ) $ Nothing -- Get names of all the variables bound by the rule .--This should always match because checked rules are guaranteed not to -- have ' BAnon ' or ' BNone ' binders .", "label": "", "metadata": {}, "score": "69.38496"}
{"text": "when ( any ( flip RE .hasDef env ) free ) $ Nothing -- Get names of all the variables bound by the rule .--This should always match because checked rules are guaranteed not to -- have ' BAnon ' or ' BNone ' binders .", "label": "", "metadata": {}, "score": "69.38496"}
{"text": "when ( any ( flip RE .hasDef env ) free ) $ Nothing -- Get names of all the variables bound by the rule .--This should always match because checked rules are guaranteed not to -- have ' BAnon ' or ' BNone ' binders .", "label": "", "metadata": {}, "score": "69.38496"}
{"text": "If so , should n't we clarify this somehow ?Having worked on a layout engine myself ( An XSL - FO one .Re : border - radius .Sorry .It 's just all a bit linked in mu mind .", "label": "", "metadata": {}, "score": "69.41952"}
{"text": "This is done by unifying the atomic formula \" man(X ) \" in ( 1 ) with the formula \" man(socrates ) \" in ( 2 ) .Substitution and Unification in Datalog .A substitution in Datalog is a collection of disjoint sets of variable symbols and constant symbols such that each component set contains no more than one constant symbol .", "label": "", "metadata": {}, "score": "71.798965"}
{"text": "\u00c2The Chibi code for this is released to the public domain , so no license issue .Below is the starting test set and its output , to show that it 's plausible .\u00c2The test set is used by all ; I ca n't ( obviously ) include cycles in the calls to the -simple variants . --- David A. Wheeler .", "label": "", "metadata": {}, "score": "72.08206"}
{"text": "Think a rounded upper - left corner like the slashdot stories have .XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX XX^^ X X X^X X XX X X XFirst Cell X Second Cell X X X X X X X X X X XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX .I 'm fine with any rule .", "label": "", "metadata": {}, "score": "72.55321"}
{"text": "Table borders not extending past the boundaries of a cell ?Your interpretation is correct .This is necessary for the other corners of the corner cell to be square .If the top left border - radius is taller than the height of the cell in that corner , then the cell 's bottom left corner is not square .", "label": "", "metadata": {}, "score": "73.1953"}
{"text": "This is done by unifying the atomic formula \" man(X ) \" in ( 1 ) with the formula \" man(socrates ) \" in ( 2 ) .Substitution and Unification in Datalog .A substitution in Datalog is a mapping of variable symbols to variable or constant symbols .", "label": "", "metadata": {}, "score": "73.20096"}
{"text": "Re : border - radius .Negative lengths for border - spacing is an awesome idea .Any idea why its not allowed already ?Can that be added in time for IE8 , FireFox 3.1 , Chrome 1.0 , etc . ?", "label": "", "metadata": {}, "score": "73.539055"}
{"text": "Re : border - radius .Ah ... right .Sorry .It 's just all a bit linked in mu mind .I re - read the first paragraph a few times and I must admit I have trouble understanding it .", "label": "", "metadata": {}, "score": "73.86636"}
{"text": "Maybe import Control .Monad import Control .Monad .Writer ( tell , runWriter ) import Data .List import Data .--Usually any names bound in @letrec@s disable rules , because the -- new binding makes the old rule meaningless .", "label": "", "metadata": {}, "score": "74.784546"}
{"text": "Maybe import Control .Monad import Control .Monad .Writer ( tell , runWriter ) import Data .List import Data .--Usually any names bound in @letrec@s disable rules , because the -- new binding makes the old rule meaningless .", "label": "", "metadata": {}, "score": "74.784546"}
{"text": "Goal G0 : mother(elizabeth , charles ) .Fail G3 Try again with G1 .G3 succeeds .G1 succeeds .Goal G2 : female(elizabeth ) G2 unifies with fact 8 .G2succeeds G0 succeeds .If you have a variable in the goal in backward chaining , then the goal is to find _ some _ value of the variable that satisfies the formula .", "label": "", "metadata": {}, "score": "75.95854"}
{"text": "Table borders not extending past the boundaries of a cell ?Not sure how to visualize this . -\" If the computed values of the border radii would cause such an effect , then all the border radii of the table must be reduced by the same factor so that ... \" .", "label": "", "metadata": {}, "score": "76.3007"}
{"text": "To learn more about why certain stores are listed on the site , click here .Product specifications are obtained from third parties , and while we make every effort to assure the accuracy of product information , we do not assume any liability for inaccuracies .", "label": "", "metadata": {}, "score": "76.98953"}
{"text": "That is , there exists some particular Y1 such that Jesse is a parent of Y1 and Y1 is a parent of Solomon .Thus , ( A ) and ( B ) are equivalent . module DDC .Core .Transform .", "label": "", "metadata": {}, "score": "77.058716"}
{"text": "Monad import Control .Monad .Writer ( tell , runWriter ) import Data .List import Data .--Usually any names bound in @letrec@s disable rules , because the -- new binding makes the old rule meaningless .-- For modules we do not want to do this , since the rules for that module -- are probably about the functions exported from the module .", "label": "", "metadata": {}, "score": "77.24228"}
{"text": "Includes a pair of chrome handles as pictured .Can be hung for right or left hand opening .Comes with a 10 year guarantee against manufacturing faults .Product Details Width : 380 mm Height : 1520 mm Depth : 210 mm Natural oak finish 2 soft closing doors Chrome handles 3 adjustable glass shelves 1 fixed wooden shelf Wall mounted Contemporary design Primarily made from ...", "label": "", "metadata": {}, "score": "78.63302"}
{"text": "Any one of them would work in my case .Nick .Re : border - radius .This one 's just talking about internal table elements ( like rows and cells ) .I agree with David Baron that defining and implementing curved borders for internal table elements is complicated and I do n't think it would be worth doing , at least not right now .", "label": "", "metadata": {}, "score": "78.68925"}
{"text": "male(philip ) .female(elizabeth ) .son(charles , philip , elizabeth ) .We can proceed as follows : .No further facts can be derived .IMPORTANT NOTE :Each time you are trying to unify a fact with a set of rules , you must rename the variables so that no two of the sentences use the same variable names .", "label": "", "metadata": {}, "score": "78.8869"}
{"text": "3 cm 2 per door 4 cm 79 x 56 x 12 cm 89 x 60 x 66 cm ...Less .The Double Door Transport Cage is the ideal transportation solution for dogs during car trips .Just measure the available storage space in your car and order the cage that fits , and your dog will have a safe place for car rides .", "label": "", "metadata": {}, "score": "79.12277"}
{"text": "Compounds as X import qualified DDC .Core .Transform .AnonymizeX as A import qualified DDC .Core .Transform .Rewrite .Disjoint as RD import qualified DDC .Core .Transform .Rewrite .Env as RE import qualified DDC .", "label": "", "metadata": {}, "score": "79.34006"}
{"text": "Transform .SubstituteT as S import qualified DDC .Core .Transform .Trim as Trim import qualified DDC .Core .Transform .LiftX as L import qualified DDC .Type .Compounds as T import qualified Data .Map as Map import qualified Data .", "label": "", "metadata": {}, "score": "79.503235"}
{"text": "Transform .SubstituteT as S import qualified DDC .Core .Transform .Trim as Trim import qualified DDC .Core .Transform .LiftX as L import qualified DDC .Type .Compounds as T import qualified Data .Map as Map import qualified Data .", "label": "", "metadata": {}, "score": "79.503235"}
{"text": "Includes a pair of chrome handles as pictured .Can be hung for right or left hand opening .Comes with a 10 year guarantee against manufacturing faults .Product Details Width : 380 mm Height : 1520 mm Depth : 210 mm Black stained oak finish 2 soft closing doors Chrome handles 3 adjustable glass shelves 1 fixed wooden shelf Wall mounted Contemporary design Primarily made ...", "label": "", "metadata": {}, "score": "79.65125"}
{"text": "The ceramic basin features a single tap hole with an integral overflow .A .. Less .The Double Door Transport Cage L is the ideal transportation solution for large dogs during car trips .This cage gives your dog a safe place for car rides .", "label": "", "metadata": {}, "score": "79.84538"}
{"text": "Transform .Trim as Trim import qualified DDC .Core .Transform .LiftX as L import qualified DDC .Type .Compounds as T import qualified Data .Map as Map import qualified Data .Set as Set import Data .", "label": "", "metadata": {}, "score": "80.12055"}
{"text": "succeeds G0 succeeds .If you have a variable in the goal in backward chaining , then the goal is to find _ some _ value of the variable that satisfies the formula .For example , if the goal is \" child(charles , J , K ) \" , that means \" find J and K such that charles is the child of J and K. Backward chaining in that case proceeds as follows .", "label": "", "metadata": {}, "score": "80.32318"}
{"text": "we also sell add - on extension kits to extend your canopy to cover a larger patio door windows or to create a covered walkway perhaps to your car or garage .each extension kit ( you can add as many as you need ) will add 1.23 m ( 4 ft \u00bdin ) to the width and obviously only comes with a single end bracket as one end slots into the primary canopy .", "label": "", "metadata": {}, "score": "81.22601"}
{"text": "Cage Materials : Zinc - coated metal cage Zinc - coated bottom tray 2 metal handles 1 additional plastic carrying handle All cages are collapsible .Dimensions ( L x W x H ) Front door Side door Bottom tray height Metal door latches Grill spacing Dimensions when collapsed ( L x W x H ) 63 x 55 x 61 cm 26 x 36 cm 35 x 32 cm approx .", "label": "", "metadata": {}, "score": "81.73025"}
{"text": "Cage Materials : Zinc - coated metal cage Zinc - coated bottom tray 2 metal handles 1 additional plastic carrying handle All cages are collapsible .Dimensions ( L x W x H ) Front door Side door Bottom tray height Metal door latches Grill spacing Dimensions when collapsed ( L x W x H ) 63 x 55 x 61 cm 26 x 36 cm 35 x 32 cm approx .", "label": "", "metadata": {}, "score": "81.73025"}
{"text": "Facts 15 .male(philip ) .female(elizabeth ) .son(charles , philip , elizabeth ) .We can proceed as follows : .No further facts can be derived .IMPORTANT NOTE :Each time you are trying to unify a fact with a set of rules , you must rename the variables so that no two of the sentences use the same variable names .", "label": "", "metadata": {}, "score": "82.811005"}
{"text": "All units are primed with 5 layers of UV stabilised primer to minimise colour fading from sunlight exposure .Comes with a 10 year guarantee .Please note : worktop pictured is not included and must be purchased separately .Product Details Dimensions : 300 x 600 x 850 mm Material : Wood Finishes : Sand Product ...", "label": "", "metadata": {}, "score": "83.26711"}
{"text": "All units are primed with 5 layers of UV stabilised primer to minimise colour fading from sunlight exposure .Comes with a 10 year guarantee .Please note : worktop pictured is not included and must be purchased separately .Product Details Dimensions : 300 x 300 x 850 mm ...", "label": "", "metadata": {}, "score": "83.310974"}
{"text": "All units are primed with 5 layers of UV stabilised primer to minimise colour fading from sunlight exposure .Comes with a 10 year guarantee .Please note : worktop pictured is not included and must be purchased separately .Product Details Dimensions : 300 x 300 x 850 mm ...", "label": "", "metadata": {}, "score": "83.310974"}
{"text": "The enclosure features bright silver framing with clear glass , making an eye - catching addition to your bathroom .The Embrace Quadrant is also available in a single door offset version .Product Details Brand - Roman Size - 800 x 800 mm Glass Thickness - 6 mm Aperture - 410 mm Adjustment - 775 - 800 mm Vertical ...", "label": "", "metadata": {}, "score": "83.45491"}
{"text": "Base ( TransformResult ( . , TransformInfo ( . import qualified DDC .Core .Compounds as X import qualified DDC .Core .Transform .AnonymizeX as A import qualified DDC .Core .Transform .Rewrite .Disjoint as RD import qualified DDC .", "label": "", "metadata": {}, "score": "83.65806"}
{"text": "Base ( TransformResult ( . , TransformInfo ( . import qualified DDC .Core .Compounds as X import qualified DDC .Core .Transform .AnonymizeX as A import qualified DDC .Core .Transform .Rewrite .Disjoint as RD import qualified DDC .", "label": "", "metadata": {}, "score": "83.65806"}
{"text": "Comes with a 10 year guarantee .Product Details Dimensions : 300 x 150 x 750 mm Material : Wood Finishes : Matt White Product Type : Traditional Soft close door 6 mm safety glass shelves Door can be opened left or right Supplied fully assembled ...", "label": "", "metadata": {}, "score": "83.83624"}
{"text": "son(edward , philip , elizabeth ) .son(william , charles , diana ) .son(harry , charles , diana ) .The following sentences in predicate calculus can not be expressed in Datalog : . forall(X ) exists(Y , Z ) child(X , Y , Z ) .", "label": "", "metadata": {}, "score": "83.917274"}
{"text": "son(edward , philip , elizabeth ) .son(william , charles , diana ) .son(harry , charles , diana ) .The following sentences in predicate calculus can not be expressed in Datalog : . forall(X ) exists(Y , Z ) child(X , Y , Z ) .", "label": "", "metadata": {}, "score": "83.917274"}
{"text": "The Double Door Transport Cage is the ideal transportation solution for dogs during car trips .Just measure the available storage space in your car and order the cage that fits , and your dog will have a safe place for car rides .", "label": "", "metadata": {}, "score": "83.9571"}
{"text": "you can infer W. .II .( Universal instantiation )From the sentence \" forall(X ) P(X ) \" you may infer P(T ) for any term T. .Now , suppose we have the sentences .( All men are mortal ) 2 . man(socrates ) .", "label": "", "metadata": {}, "score": "83.9804"}
{"text": "you can infer W. .II .( Universal instantiation )From the sentence \" forall(X ) P(X ) \" you may infer P(T ) for any term T. .Now , suppose we have the sentences .( All men are mortal ) 2 . man(socrates ) .", "label": "", "metadata": {}, "score": "83.9804"}
{"text": "All units are primed with 5 layers of UV stabilised primer to minimise colour fading from sunlight exposure .Comes with a 10 year guarantee .Please note : worktop pictured is not included and must be purchased separately .Product Details Dimensions : 300 x 600 x 850 mm Material : Wood Finishes : Matt White ...", "label": "", "metadata": {}, "score": "84.14836"}
{"text": "3 cm 2 per door 4 cm 94 x 63 x 14 cm Please Note : This product can not be delivered to Northern Ireland .Bauhaus - Design 100 Two Door Vanity Unit & Ceramic Basin - Walnut - DE100FWTSCW The Design furniture range features a versatile style that adapts to most bathroom schemes in a choice of beautiful finishes includin g water resistant melamine or high gloss lacquer .", "label": "", "metadata": {}, "score": "84.19677"}
{"text": "Comes with a 10 year guarantee .Product Details Dimensions : 300 x 1300 x 1910 mm Material : Wood Finishes : Sand Product Type : Traditional Soft close doors 6 mm safety glass shelves Door can be opened left or right Supplied fully assembled Compliance / ...", "label": "", "metadata": {}, "score": "84.41094"}
{"text": "Comes with a 10 year guarantee .Product Details Dimensions : 300 x 150 x 750 mm Material : Wood Finishes : Sand Product Type : Traditional Soft close door 6 mm safety glass shelves Door can be opened left or right Supplied fully assembled Compliance / ...", "label": "", "metadata": {}, "score": "84.59602"}
{"text": "Comes with a 10 year guarantee .Product Details Dimensions : 300 x 1300 x 1910 mm Material : Wood Finishes : Matt White Product Type : Traditional Soft close doors 6 mm safety glass shelves Door can be opened left or right Supplied fully assembled ...", "label": "", "metadata": {}, "score": "84.66207"}
{"text": "For instance , suppose that you start with the following knowledge base , .Rules 1 .Facts 16 .male(philip ) .female(elizabeth ) .child(charles , philip , elizabeth ) .child(anne , philip , elizabeth ) .male(charles ) .", "label": "", "metadata": {}, "score": "84.86706"}
{"text": "XXXXXXXX XX^^ABCD^^XXX^EFGHIJKLMN^X XXOPQRSTUVWXYZXX X01234567890ABCX XXDEFGHIJKLMNOXX XvPQRSTUVWXYvX XXvvZ012vvXX XXXXXXXX .or .XXXXXXXX XX^^FGHI^^XX X^QRSTUVWXYZ^X XX3456789ABCDEXXXGHIJKLMNOPQRSTX XXVWXYZ0123456XXXvABCDEFGHIvKXXXvvQRSTUvvXXXXXXXXXX .Re : border - radius .No , with \" innermost radius wins \" , I mean that the radius of the cell should win .", "label": "", "metadata": {}, "score": "85.16346"}
{"text": "Example .The following is a Datalog knowledge base describing a family tree and rules for relations : .Rules 1 .Facts 16 .male(philip ) .female(elizabeth ) .son(charles , philip , elizabeth ) .daughter(anne , philip , elizabeth ) .", "label": "", "metadata": {}, "score": "85.172424"}
{"text": "First , use universal instantiation to replace \" X \" in ( 1 ) by \" socrates \" giving .Second , apply modus ponens to ( 2 ) and ( 3 ) , and infer \" mortal(socrates ) \" .The question is , how did we know to replace X in ( 1 ) by \" socrates \" rather than , say \" eiffel_tower \" or anything else ?", "label": "", "metadata": {}, "score": "85.544525"}
{"text": "First , use universal instantiation to replace \" X \" in ( 1 ) by \" socrates \" giving .Second , apply modus ponens to ( 2 ) and ( 3 ) , and infer \" mortal(socrates ) \" .The question is , how did we know to replace X in ( 1 ) by \" socrates \" rather than , say \" eiffel_tower \" or anything else ?", "label": "", "metadata": {}, "score": "85.544525"}
{"text": "3 cm 2 per door 4 cm 79 x 56 x 12 cm 89 x 60 x 66 cm ...Less . completely exclusive to coopers of stortford and not in the shops yet we have designed our own elegant door canopy . suitable for your front door as well as your back door it will protect you and your callers from rain and the elements .", "label": "", "metadata": {}, "score": "86.18056"}
{"text": "Comes with a 10 year guarantee .Product Details Dimensions : 300 x 1300 x 1910 mm Material : Wood Finishes : Dark Olive Product Type : Traditional Soft close doors 6 mm safety glass shelves Door can be opened left or right Supplied fully assembled ...", "label": "", "metadata": {}, "score": "86.226"}
{"text": "Example .The following is a Datalog knowledge base describing a family tree and rules for relations : .Rules 1 .Facts 15 .male(philip ) .female(elizabeth ) .son(charles , philip , elizabeth ) .daughter(anne , philip , elizabeth ) .", "label": "", "metadata": {}, "score": "86.27779"}
{"text": "Refined , clean lines create a minimalist appeal that achieves enduring beauty in the bathroom .This range has outstanding product value with plenty of storage space and extra thick surfaces , the Design range from Bauhaus is supplied fully assembled and features soft close hinges .", "label": "", "metadata": {}, "score": "86.361015"}
{"text": "It provides your dog with a safe place for car rides and can be folded down flat for more storage space .3 cm 2 per door 4 cm 112 x 72 x 14 cm Note : You will need to introduce your pet to the carrier slowly and carefully .", "label": "", "metadata": {}, "score": "86.96452"}
{"text": "Comes with a 10 year guarantee .Product Details Dimensions : 600 x 150 x 750 mm Material : Wood Finishes : Sand Product Type : Traditional Soft close doors 6 mm safety glass shelves Supplied fully assembled Compliance / Approvals EN14749:2005 10 year guarantee Additional image for illustrative ...", "label": "", "metadata": {}, "score": "88.854645"}
{"text": "A more stylish alternative to a traditional flat sliding door that offers the luxury of a large showering area , whilst still being suitable for smaller bathrooms .Although it is 850 mm deep at the centre it narrows to only 550 mm at the sides , which is ideal where space is restricted .", "label": "", "metadata": {}, "score": "89.53286"}
{"text": "Comes with a 10 year guarantee .Product Details Dimensions : 600 x 150 x 750 mm Material : Wood Finishes : Matt White Product Type : Traditional Soft close doors 6 mm safety glass shelves Supplied fully assembled Compliance / Approvals EN14749:2005 10 year guarantee Additional image for ...", "label": "", "metadata": {}, "score": "89.73552"}
{"text": "Transform .Rewrite ( RewriteRule ( . , rewriteModule , rewriteX ) where import DDC .Base .Pretty import DDC .Core .Exp import DDC .Core .Module import Data .Map ( Map ) import DDC .Core .", "label": "", "metadata": {}, "score": "89.8775"}
{"text": "Transform .Rewrite ( RewriteRule ( . , rewriteModule , rewriteX ) where import DDC .Base .Pretty import DDC .Core .Exp import DDC .Core .Module import Data .Map ( Map ) import DDC .Core .", "label": "", "metadata": {}, "score": "89.8775"}
{"text": "The versatile adjustments make this shower door perfect for out of true walls , whilst the stunning chrome finish blends effortlessly with other bathroom furniture .Product Details Brand - Roman Size - 900 mm Glass Thickness - 8 mm Vertical adjustment - 50 mm Aperture - 670 mm Adjustment - 850 - 900 mm Height - 1900 mm Bright silver frame Removable top rail when installed in an alcove Ball catch closing mechanism ...", "label": "", "metadata": {}, "score": "89.95856"}
{"text": "Transform .Rewrite .Match as RM import DDC .Core .Transform .Rewrite .Rule import qualified DDC .Core .Transform .SubstituteXX as S import qualified DDC .Type .Transform .SubstituteT as S import qualified DDC .", "label": "", "metadata": {}, "score": "90.50248"}
{"text": "Laufen - Pro S Single Door Asymmetrical Vanity Unit and Basin - White - Left Hand Door Laufen offers a superb combination of technical innovation and excellence with stunning designs from a range of leading designers at the top of their game .", "label": "", "metadata": {}, "score": "90.827995"}
{"text": "and the goal is \" father(philip , charles ) \" .Backward chaining proceeds as follows : .Goal G0 : father(philip , charles ) .Fail G3 Try again with G1 .G3 succeeds .G1 succeeds .Goal G2 : male(philip ) G2 unifies with fact 16 .", "label": "", "metadata": {}, "score": "91.02397"}
{"text": "Rules 1 .Facts 7 .male(philip ) .female(elizabeth ) .child(charles , philip , elizabeth ) .child(anne , philip , elizabeth ) .male(charles ) .female(anne ) .and the goal is \" mother(elizabeth , charles ) \" .", "label": "", "metadata": {}, "score": "91.534966"}
{"text": "A contemporary feature of the One Door Quad Enclosure is the chromed brass ergonomic handle , which has a curved underside for easy operation .The weight of the 8 mm thick glass and smooth running roller bearings provides an effortless action sliding door .", "label": "", "metadata": {}, "score": "92.89504"}
{"text": "Transform .Rewrite .Env as RE import qualified DDC .Core .Transform .Rewrite .Match as RM import DDC .Core .Transform .Rewrite .Rule import qualified DDC .Core .Transform .SubstituteXX as S import qualified DDC .", "label": "", "metadata": {}, "score": "93.12038"}
{"text": "Transform .Rewrite .Env as RE import qualified DDC .Core .Transform .Rewrite .Match as RM import DDC .Core .Transform .Rewrite .Rule import qualified DDC .Core .Transform .SubstituteXX as S import qualified DDC .", "label": "", "metadata": {}, "score": "93.12038"}
{"text": "Less .Roman - Lumin8 One Door Quadrant Shower Enclosure - 800 x 800 mm - V8SQ813S The Lumin8 One Door Quadrant Shower Enclosure is an ideal solution for smaller bathrooms as it will sit beautifully in the corner of your bathroom .", "label": "", "metadata": {}, "score": "93.568306"}
{"text": "I 'm All That Summertime Things That U Do This Boy Is Smooth Ring My Bell Dog Is a Dog Caught in the Middle ( Love & Life )Trapped on the Dance Floor Who Stole the D.J. You Saw My Blinker Dumb Dancin ' Summertime ( Reprise )", "label": "", "metadata": {}, "score": "94.504486"}
{"text": "Simpsons - Supreme Quadrant Single Door Shower Enclosure - 900 x 900 mm The Supreme range from Simpsons features an extensive choice of easy to install shower enclosures that ensures that you 'll find an enclosure that is right for your home .", "label": "", "metadata": {}, "score": "95.77113"}
{"text": "This Is An Elegant And Refined Floral For Women With Notes Of Orange Blossom , Anise , Peach , Carnation , Tuberose , Ylang Ylang , Honey And A Base Of Heliotrope , Benzoin , Cedar , And Sandalwoodand Epitomizes Luxury .", "label": "", "metadata": {}, "score": "96.089836"}
{"text": "This Is An Elegant And Refined Floral For Women With Notes Of Orange Blossom , Anise , Peach , Carnation , Tuberose , Ylang Ylang , Honey And A Base Of Heliotrope , Benzoin , Cedar , And Sandalwoodand Epitomizes Luxury .", "label": "", "metadata": {}, "score": "96.089836"}
{"text": "The ceramic basin features a single tap hole with an integral overflow .A .. Less .Laufen - Pro S Single Door Asymmetrical Vanity Unit and Basin - White - Right Hand Door Laufen offers a superb combination of technical innovation and excellence with stunning designs from a range of leading designers at the top of their game .", "label": "", "metadata": {}, "score": "96.10921"}
{"text": "Re : border - radius .No , with \" innermost radius wins \" , I mean that the radius of the cell should win .Mini5 600 x 600 Floor Standing Network Enclosure With Glass Front DoorMini5 Premium 19 \" Floor Standing Enclosures are ideal for LAN cabling & network equipment / server rack applications .", "label": "", "metadata": {}, "score": "96.34805"}
{"text": "Base .Pretty import DDC .Core .Exp import DDC .Core .Module import Data .Map ( Map ) import DDC .Core .Simplifier .Base ( TransformResult ( . , TransformInfo ( . import qualified DDC .", "label": "", "metadata": {}, "score": "96.89453"}
{"text": "Comes with a lifetime guarantee and a ClearShield coating that makes this enclosure high quality and great value for money .Product details Brand - Simpsons Product - Quadrant Single Door Shower Enclosure Height - 1850 mm Door Entry Width - 460 mm Adjustment - Door 460 mm , Panels 865 - 890 mm Quick release roller mechanisms ...", "label": "", "metadata": {}, "score": "97.322464"}
{"text": "Roman - Embrace Single Door Quadrant Shower Enclosure - 800 x 800 mm - ESQ813S The Embrace Quadrant with a single door is a fusion of elegant styling and practical functionality .Quadrants are one of the most popular enclosure types as they fit discreetly into the corner of your bathroom and have unobtrusive sliding doors .", "label": "", "metadata": {}, "score": "97.92401"}
{"text": "Vitra - Retro 2 Door Tall Unit - 3 Colour Options The Retro furniture range brings a warm and contemporary feel to your bathroom , its curved contours and choice of three finishes make this range the perfect choice for the modern bathroom .", "label": "", "metadata": {}, "score": "98.443115"}
{"text": "This stylish Single Door Asymmetrical Vanity Unit and Basin will perfectly fit into any contemporary bathroom .Available in 4 colours - Wenge , White , Gloss White and Cappuccino .The unit has an integrated handle in the front of the soft closing door which opens from the right .", "label": "", "metadata": {}, "score": "98.98898"}
{"text": "This stylish Single Door Asymmetrical Vanity Unit and Basin will perfectly fit into any contemporary bathroom .Available in 4 colours - Wenge , White , Gloss White and Cappuccino .The unit has an integrated handle in the front of the soft closing door which opens from the left .", "label": "", "metadata": {}, "score": "99.06496"}
{"text": "The door and panel are 1900 mm high and made from toughened safety glass , which complies with EN12150 and EN12600 .The glass is also specially treated to make cleaning both easier and less frequently required .The entire Coram range is designed and manufactured in Britain to suit British site requirements .", "label": "", "metadata": {}, "score": "99.579124"}
{"text": "Suitable for Ampeg , Marshall , Fender , Line 6 , Mesa Boogie , Hartke , Peavey , Laney , Hughes & Kettner , Gallien Kr\u00fcger , Yamaha , Engl , SWR , Warwick etc .Please state the brand and the model and/or size of your cabinet when ordering .", "label": "", "metadata": {}, "score": "100.66607"}
{"text": "Covered by a lifetime guarantee from Roman Showers on registration .Product Details Brand - Roman ...Less .Roman - Embrace Hinged Shower Door - 900 mm - EL913S The semi frameless design of the Embrace Hinged Door combines strength and versatility to create a perfect showering solution to suit any shape or size bathroom .", "label": "", "metadata": {}, "score": "105.9924"}
{"text": "Then start closing the door and leaving it closed for longer and longer periods ...Less .A 2013 Fragrance Foundation Hall Of Fame Perfume , Red Door Was Composed In 1989 By Master Perfumer Carlos Benaim To Commemorate The Famous \u00c3\u00af\u00c2\u00bf\u00c2\u00bdred Door\u00c3\u00af\u00c2\u00bf\u00c2\u00bd Of The Elizabeth Arden Salon On Fifth Avenue In New York City .", "label": "", "metadata": {}, "score": "106.23864"}
{"text": "Available in Dark Cherry , Oak and Dark Oak this range will compliment the Retro sanitaryware range .It does truly live up to the Vitra name as being one of the world leaders in bathroom design .Features Manufacturer - Vitra Finish - Dark Cherry / Oak / Dark Oak Reversible design 2 door unit Chrome handles High quality finish ...", "label": "", "metadata": {}, "score": "106.680176"}
{"text": "Miller - Nova Two Door Tall Cabinet - Oak The Nova range showcases modern , stylistically pure design .This two door tall cabinet features two soft closing doors which are made up of three layers of solid oak for maximum stability .", "label": "", "metadata": {}, "score": "107.96876"}
{"text": "Miller - Nova Two Door Tall Cabinet - Black The Nova range showcases modern , stylistically pure design .This two door tall cabinet features two soft closing doors which are made up of three layers of solid oak for maximum stability .", "label": "", "metadata": {}, "score": "110.889114"}
{"text": "A 2013 Fragrance Foundation Hall Of Fame Perfume , Red Door Was Composed In 1989 By Master Perfumer Carlos Benaim To Commemorate The Famous \u00c3\u00af\u00c2\u00bf\u00c2\u00bdred Door\u00c3\u00af\u00c2\u00bf\u00c2\u00bd Of The Elizabeth Arden Salon On Fifth Avenue In New York City .This Is An Elegant And Refined Floral For Women With Notes Of Orange Blossom , Anise , Peach , Carnation , Tuberose , Ylang Ylang , Honey And A Base Of Heliotrope , Benzoin , Cedar , And Sandalwoodand Epitomizes Luxury .", "label": "", "metadata": {}, "score": "112.15959"}
{"text": "Burlington 60 2-Door Base Unit - Sand This beautifully designed 2-door base storage unit is from Burlington 's fitted furniture range .Create a seamless look by combining base and wall units and stunning Minerva worktops to any configuration to give the illusion of space and maximise functionality in your bathroom .", "label": "", "metadata": {}, "score": "112.563614"}
{"text": "Burlington 60 2-Door Wall Unit - Sand This beautifully designed 2-door wall unit is from Burlington 's fitted furniture range .Create a seamless look by combining base and wall units and stunning Minerva worktops to any configuration to give the illusion of space and maximise functionality in your bathroom .", "label": "", "metadata": {}, "score": "115.631"}
{"text": "Burlington 30 Single Door Base Unit - Sand This beautifully designed single door base storage unit is from Burlington 's fitted furniture range .Create a seamless look by combining base and wall units and stunning Minerva worktops to any configuration to give the illusion of space and maximise functionality in your bathroom .", "label": "", "metadata": {}, "score": "116.004364"}
{"text": "Burlington 30 2-Door Tall Unit - Sand This beautifully designed 2-door tall unit is from Burlington 's fitted furniture range .Create a seamless look by combining base and wall units and stunning Minerva worktops to any configuration to give the illusion of space and maximise functionality in your bathroom .", "label": "", "metadata": {}, "score": "117.71568"}
{"text": "Mini5 600 x 600 Floor Standing Network Enclosure With Glass Front DoorMini5 Premium 19 \" Floor Standing Enclosures are ideal for LAN cabling & network equipment / server rack applications .Prices are provided by the merchants .We assume no responsibility for accuracy of price information provided by merchants .", "label": "", "metadata": {}, "score": "117.773605"}
{"text": "Each ... Less .A 2013 Fragrance Foundation Hall Of Fame Perfume , Red Door Was Composed In 1989 By Master Perfumer Carlos Benaim To Commemorate The Famous \u00c3\u00af\u00c2\u00bf\u00c2\u00bdred Door\u00c3\u00af\u00c2\u00bf\u00c2\u00bd Of The Elizabeth Arden Salon On Fifth Avenue In New York City .", "label": "", "metadata": {}, "score": "118.1282"}
{"text": "Burlington 60 2-Door Base Unit - Matt White This beautifully designed 2-door base storage unit is from Burlington 's fitted furniture range .Create a seamless look by combining base and wall units and stunning Minerva worktops to any configuration to give the illusion of space and maximise functionality in your bathroom .", "label": "", "metadata": {}, "score": "118.28658"}
{"text": "Burlington 30 Single Door Wall Unit - Sand This beautifully designed single door wall unit is from Burlington 's fitted furniture range .Create a seamless look by combining base and wall units and stunning Minerva worktops to any configuration to give the illusion of space and maximise functionality in your bathroom .", "label": "", "metadata": {}, "score": "118.78522"}
{"text": "Burlington 60 2-Door Wall Unit - Matt White This beautifully designed 2-door wall unit is from Burlington 's fitted furniture range .Create a seamless look by combining base and wall units and stunning Minerva worktops to any configuration to give the illusion of space and maximise functionality in your bathroom .", "label": "", "metadata": {}, "score": "120.52419"}
{"text": "Burlington 30 2-Door Tall Unit - Dark Olive This beautifully designed 2-door tall unit is from Burlington 's fitted furniture range .Create a seamless look by combining base and wall units and stunning Minerva worktops to any configuration to give the illusion of space and maximise functionality in your bathroom .", "label": "", "metadata": {}, "score": "123.548584"}
{"text": "Burlington 30 2-Door Tall Unit - Matt White This beautifully designed 2-door tall unit is from Burlington 's fitted furniture range .Create a seamless look by combining base and wall units and stunning Minerva worktops to any configuration to give the illusion of space and maximise functionality in your bathroom .", "label": "", "metadata": {}, "score": "124.60661"}
{"text": "Burlington 30 Single Door Base Unit - Matt White This beautifully designed single door base storage unit is from Burlington 's fitted furniture range .Create a seamless look by combining base and wall units and stunning Minerva worktops to any configuration to give the illusion of space and maximise functionality in your bathroom .", "label": "", "metadata": {}, "score": "125.29892"}
{"text": "Burlington 30 Single Door Wall Unit - Matt White This beautifully designed single door wall unit is from Burlington 's fitted furniture range .Create a seamless look by combining base and wall units and stunning Minerva worktops to any configuration to give the illusion of space and maximise functionality in your bathroom .", "label": "", "metadata": {}, "score": "130.23418"}
