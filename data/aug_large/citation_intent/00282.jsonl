{"text": "Abstract .In this paper , we propose a synchronous annotation schema called Synchronous Structured String - Tree Correspondence ( S - SSTC ) .This synchronous variant of SSTC structure is used to describe not only the correspondence between a text in a language and its abstract representation tree but also , the correspondence between different languages .", "label": "", "metadata": {}, "score": "27.05475"}
{"text": "Abstract .In this paper , a flexible annotation schema called ( SSTC ) is introduced .In order to describe the correspondence between different languages , we propose a variant of SSTC called synchronous SSTC ( S - SSTC ) .", "label": "", "metadata": {}, "score": "31.976986"}
{"text": "Tree Correspondence ( SSTC ) .Abstract .In this paper , we would like to present an approach to construct a huge Bilingual Knowledge Bank ( BKB ) .From a given bilingual corpus based on the idea of synchronous Structured String-", "label": "", "metadata": {}, "score": "32.097103"}
{"text": "Synchronous Structured String - Tree Correspondence ( S - SSTC ) .Abstract .In this paper , a flexible annotation schema called Structured String - Tree Correspondence ( SSTC ) is introduced .We propose a variant of SSTC called synchronous SSTC .", "label": "", "metadata": {}, "score": "32.186935"}
{"text": "As a result , there is no need of the correspondence information on the format of the tree structure .Consequently , by integrating , into the correspondence information 3 between the document - structure definition and the structure definition , the type information corresponding to the respective elements in the structured documents , the structure definition information 2 on the program language becomes unnecessary .", "label": "", "metadata": {}, "score": "36.074802"}
{"text": "Also , there exists a method in which , while scanning the structured documents , events are generated , thereby manipulating the structured documents in an event - driven manner .In U.S. Pat .Nos .6,085,196 and 6,279,015 , there has been proposed an object - oriented system for mapping one structured information format to another structured information format .", "label": "", "metadata": {}, "score": "36.13769"}
{"text": "This nested - structure is , logically , a tree structure .When manipulating such structured documents from a program language , there has existed no method for directly transcribing , into a structure of the program language , the tree - structured data included in the structured documents .", "label": "", "metadata": {}, "score": "36.413544"}
{"text": "FIG .2 , then using the structure definition 502 for exchanging the read / written data .FIG .4 illustrates an example of DTD in XML as an example of the document - structure definition information 1 on the structured documents .", "label": "", "metadata": {}, "score": "36.602745"}
{"text": "1 , the data transcription processing unit 5 acquires the document - structure definition information 1 on the structured documents , structure definition information 2 on a program language , and correspondence information 3 between the document - structure definition and the structure definition .", "label": "", "metadata": {}, "score": "37.42208"}
{"text": "Accordingly , the from - structure - to - structured - document writing - out function 5034 is provided with a function of automatically affixing a start - tag and an end - tag that , when writing out a partial access unit , must appear before the writing - out thereof .", "label": "", "metadata": {}, "score": "37.712357"}
{"text": "The data structure of structured documents used in common among the above - described enterprises is determined in advance .Moreover , based on the above - described information acquired , the program creates a flag structure for storing the state of the above - described structure of the program language , and a structure of the program language corresponding to the above - described flag structure .", "label": "", "metadata": {}, "score": "40.529922"}
{"text": "A Synchronization Structure Of SSTC And Its Applications In Machine Translation .Al - Adhaileh , Mosler R. and Kong , Tang Enya and Yusoff , Zaharin ( 2002 )A Synchronization Structure Of SSTC And Its Applications In Machine Translation .", "label": "", "metadata": {}, "score": "40.549644"}
{"text": "A syntax equipped with a start - tag and an end - tag is prepared , and the character string data is surrounded by these tags , thereby expressing an element included in the structured documents .Another element surrounded by a start - tag and an end - tag may be located inside the content of the surrounded character string data .", "label": "", "metadata": {}, "score": "40.971245"}
{"text": "A second algorithm of the present invention , known as annotate_type , provides for type annotation runtime for validated XML documents or fragments .The data structure shown in .FIG .5 is used to annotate XML data ; either as a whole document or a fragment .", "label": "", "metadata": {}, "score": "41.11342"}
{"text": "4 , and an example of the main body of a structured document created in accordance with the document - structure definition .FIG .6 illustrates an example of the structure definition 502 of a program language corresponding to the document - structure definition information in .", "label": "", "metadata": {}, "score": "41.172657"}
{"text": "In this case , the processing unit transcribes the structured data of the program language into the structured documents in accordance with the method set for the respective items in the above - described manner .The mere issuing of the requests to the above - described data transcription processing unit permits the application program to process the data included in the structured documents .", "label": "", "metadata": {}, "score": "41.949837"}
{"text": "In the case where the access unit to the structured documents is divided as is illustrated in .FIG .8 , even if the structure 5023 or the structure 5024 is written out , the above - described steps alone do not affix the start - tag and the end - tag of the \" order \" element surrounding the whole elements .", "label": "", "metadata": {}, "score": "42.315285"}
{"text": "In this way , although not specified in the document - structure definition information 1 on the structured documents in .FIG .2 , the information such as the length information , the type information , and the maximum number of the iterations of the iterated item become necessary in the structure definition 502 of the program language .", "label": "", "metadata": {}, "score": "42.601383"}
{"text": "RELATED APPLICATIONS .[ 0001 ] .This application is related to the application entitled \" Annotated Automaton Encoding of XML schema for High Performance Schema Validation \" , now U.S. Ser .No .60/418,673 , which is hereby incorporated by reference in its entirety , including any appendices and references thereto .", "label": "", "metadata": {}, "score": "42.6183"}
{"text": "The structured documents the representative of which is of XML ( extensible Markup Language ) are used in a variety of purposes .In particular , when the structured documents are used as a data - exchanging format between companies , the data needs to be processed using a program language .", "label": "", "metadata": {}, "score": "43.478798"}
{"text": "The access processing to the structured documents is simplified in this way .As having been explained so far , according to the present invention , the mere calling - up of the structured - document access routine group permits the content data to be transcribed at a time between the structured documents and the structure of the program language .", "label": "", "metadata": {}, "score": "43.864906"}
{"text": "Here , the structured - document access routine group 503 is a routine group for transcribing the data in accordance with the correspondence information 3 between the document - structure definition and the structure definition .In addition , in accordance with the structure definition information 2 on the program language , the routine group 503 also performs data type conversions such as the conversion from the character strings to numerical values .", "label": "", "metadata": {}, "score": "44.063087"}
{"text": "Accordingly , at the time of the reading - in , the application program 4 can recognize that the elements corresponding to the data items into which the default - time set values had been set have not existed in the structured documents 6 .", "label": "", "metadata": {}, "score": "44.455772"}
{"text": "Moreover , the data item of information on the actual data iteration number and the data item of information on the actual data length are added , and the from - structured - document - to - structure reading - in function 5033 sets all the information .", "label": "", "metadata": {}, "score": "44.45689"}
{"text": "In order to accomplish the above - described object , a data transcription processing unit is located which is used by being called up from the program language .The data transcription processing unit inputs definition information on the document - structure of the structured documents , definition information on a structure of the program language corresponding to the document - structure of the structured documents , and correspondence information on the correspondence between the document - structure definition and the structure definition .", "label": "", "metadata": {}, "score": "44.982277"}
{"text": "Here , a termination position of the read - in elements is latched as the present position information .Next , when any one of the from - structured - document - to - structure reading - in functions 5033 is called up , the access unit existing in the backward direction from the present position is searched for , then being read in the given structure .", "label": "", "metadata": {}, "score": "45.069443"}
{"text": "Also , it is necessary to separately prepare a unit for representing that the iteration number in the structured documents has exceeded the iteration number prepared in the structure .Also , the data items prepared in correspondence with the selectable element are prepared as mutually independent data items sharing no data region , thereby making it necessary to be able to judge the respective default - time set values .", "label": "", "metadata": {}, "score": "45.59229"}
{"text": "This permits the application program 4 to control the data portion to be transcribed .Furthermore , the flag structure is also usable for the purpose of representing a state where the data in the structured documents are not completely contained into the data region prepared as the structure .", "label": "", "metadata": {}, "score": "45.922153"}
{"text": "FIG .3 , the application program 4 calls up , as needed , the structured - document access routine group 503 created by the definition information analyzing unit 501 in .FIG .2 , thereby reading / writing the structured documents 6 .", "label": "", "metadata": {}, "score": "47.05062"}
{"text": "Of the above - described prior arts , in the method of expanding the structured documents into the tree structure so as to manipulate the documents from a program language , the dynamical data structure is processed .For this reason , the language specification of the program language must include the pointer - manipulating function , or an object - reference manipulating function if the program language is an object - oriented language .", "label": "", "metadata": {}, "score": "47.792473"}
{"text": "4 , two structure definitions are included .One structure definition is a structure definition ( 5023 ) of COBOL created in selecting , as the access unit , the \" address \" element declared in the declaration 72 .( Additionally , the \" address \" element is an end - terminal element and has no structure inside , and thus the definition of COBOL here has become a fundamental - type data item that has no structure inside either . )", "label": "", "metadata": {}, "score": "47.79344"}
{"text": "A data transcribing system for transcribing data from data structure of a structured document to data structure of a program language , comprising : . create , based on said acquired information , a transcription state storing structure for storing a state of each element for which data in said structured document is to be transcribed into data of said program language , and .", "label": "", "metadata": {}, "score": "48.179527"}
{"text": "The structure type is of a structure that has one or more data items ( the structure type or the fundamental type ) inside .At first , if the data item is of the fundamental type , in accordance with the type , the data item is converted into a character string representing the data value .", "label": "", "metadata": {}, "score": "49.06986"}
{"text": "This condition makes it possible to reduce a time and labor taken for the modification of the application inside the data collecting center .As having been explained so far , the present invention allows the content data to be transcribed between the structured documents and the structure of the program language , thereby making it possible to reduce a burden in the programming .", "label": "", "metadata": {}, "score": "49.28127"}
{"text": "A function of writing out the structured documents in the access unit in accordance with the value set into the flag structure is further added to the from - structure - to - structured - document writing - out function 5034 .", "label": "", "metadata": {}, "score": "49.32771"}
{"text": "Similarly , the enterprise system B also has a program ( 1308 ) for making the conversion between a data structure ( 1303 ) used inside B corporation and the data structure ( 1306 ) used in common to the respective corporations .", "label": "", "metadata": {}, "score": "49.578743"}
{"text": "Discussion of Prior Art .[ 0005 ] .Validation of XML documents against an XML schema is an expensive process .It limits the throughput of XML database systems supporting high - volume transactions .Fortunately , there are alternatives to off - load expensive validation from a database server .", "label": "", "metadata": {}, "score": "49.654514"}
{"text": "When creating the access routine group 503 for the access to the structured documents of the document type defined in .FIG .4 , the \" order \" element is selected as the unit for accessing the structured documents 6 .", "label": "", "metadata": {}, "score": "49.772373"}
{"text": "4 ; .FIG .7 illustrates a data - set state in the case where the data in the main body of the structured documents illustrated in .FIG .5 are transcribed into the structure illustrated in .FIG .", "label": "", "metadata": {}, "score": "49.859467"}
{"text": "Existing XML schema validation techniques and schema object parsers necessitate validation for type annotation .[0007 ] .Therefore , there is a need for a database engine to perform fast type annotation of XML documents or document fragments for XML schema - validated XML documents in the absence of the validation process , thus avoiding unnecessary overhead .", "label": "", "metadata": {}, "score": "49.916836"}
{"text": "The from - structure - to - structured - document writing - out function 5034 may create the structured document in the tree - structured representation , and the termination processing function 5036 creates the structured documents in the character string representation .", "label": "", "metadata": {}, "score": "49.95012"}
{"text": "Next , the structured - document access - unit reading / writing function 5032 utilizes the respective specified values , thereby representing the presence or absence of the existence .The from - structured - document - to - structure reading - in function 5033 reads in the content data in the structured documents 6 into the structure .", "label": "", "metadata": {}, "score": "50.1224"}
{"text": "For each complex type in a schema , a type record is created .Each type record in a type hierarchy contains typing tuples for sub - elements and attributes of a specified type .Assuming no overlap , both element and attribute names are listed together , in a type record .", "label": "", "metadata": {}, "score": "50.200844"}
{"text": "This provides the application program 4 with an opportunity for selecting the next manipulation .Whenever the from - structure - to - structured - document writing - out function 5034 is called up , the function 5034 directly writes out , as the character strings in the structured documents , the structured data passed by the argument or the other methods , thereby implementing the data transcription .", "label": "", "metadata": {}, "score": "50.226723"}
{"text": "A method for the compilation of a structured document , as per . claim 5 , wherein a typing set is comprised of distinct typing tuples , wherein two typing tuples are distinct if either said first fields of both of said typing tuples are different or said second fields of both of said typing tuples are different .", "label": "", "metadata": {}, "score": "50.27549"}
{"text": "2 , i.e. , illustrates an embodiment for carrying out the system configuration in .FIG .1 ; .FIG .4 illustrates an example of DTD ( Document Type Definition ) for declaring the document type of XML documents as document - structure definition information on the structured documents ; .", "label": "", "metadata": {}, "score": "50.291245"}
{"text": "6 illustrates an example of the structure definition 502 of a program language , i.e. , a structure definition ( 5021 ) of the program language COBOL which , corresponding to the DTD illustrated in .FIG .4 , is created in selecting , as the access unit , the \" order \" element declared in the declaration 71 .", "label": "", "metadata": {}, "score": "50.44687"}
{"text": "When performing the reading - in and the writing - out toward the structured documents 6 , the initialization processing function executes the above - described initialization for the reading - in and that for the writing - out .Any one of the structured - document access - unit reading / writing functions 5032 latches , as a state , the present position of the access target within the structured documents .", "label": "", "metadata": {}, "score": "50.44747"}
{"text": "4 . FIG .7 illustrates a data - set state in the case where the data in the main body of the structured documents illustrated in .FIG .5 are transcribed into the structure illustrated in .FIG .6 .", "label": "", "metadata": {}, "score": "50.701214"}
{"text": "Meanwhile , the access routine group 503 is created under a condition of dividing the access unit into the \" address \" element and the \" item \" elements .In this selection , the application program 4 accesses the \" address \" element first , and then accesses the \" item \" elements one or more times repeatedly , thereby making it possible to access the entire structured documents 6 .", "label": "", "metadata": {}, "score": "50.72917"}
{"text": "A data transcribing system for transcribing data from data structure of a program language to data structure of a structured document , comprising : . prepare , based on said acquired information , a transcription state storing structure for storing a state of each element for which data of said program language is to be transcribed into data in said structured document , and .", "label": "", "metadata": {}, "score": "51.048912"}
{"text": "Using an optimized data structure such as that described in 60/418,673 at the time of schema compilation , a runtime engine of the present invention can efficiently annotate either an entire XML document or an XML fragment .The system of the present invention comprises a type annotation record builder , which is part of an XML schema compiler ( e.g. , as shown in 60/418,673 ) , a type annotation runtime engine , and a type annotation data structure .", "label": "", "metadata": {}, "score": "51.17131"}
{"text": "5 , a data item \" ITEM \" is iterated 2 times , and element data corresponding to each data item \" ITEM \" are set .FIG .8 illustrates another example of the structure definition 502 of the program language i.e. , an example where , corresponding to the DTD illustrated in .", "label": "", "metadata": {}, "score": "51.535667"}
{"text": "The data converting programs ( 1307 , 1308 , 1309 ) that the respective corporation systems include may have the configuration illustrated in .FIG .3 in the present invention , or may have another configuration .As described above , the data structure of the structured documents transmitted / received among the enterprises is defined in advance , and each enterprise system has the converting program for making the conversion with the data structure used inside each enterprise .", "label": "", "metadata": {}, "score": "51.620205"}
{"text": "1 , a portion for creating a structured - document access routine group 503 in advance on the basis of the definition information analysis ; .FIG .3 illustrates a method of calling up , from the application program , the structured - document access routine group 503 created in .", "label": "", "metadata": {}, "score": "51.625206"}
{"text": "FIG .5 illustrates , along with the DTD in .FIG .4 , an example of the main body of an XML document created in accordance with the DTD in .FIG .4 .In the case where the \" order \" element declared in the declaration 71 is selected as the access unit by the access routine group 503 , the main body ( 710 ) of the structured document is accessed at a time .", "label": "", "metadata": {}, "score": "51.69559"}
{"text": "Abstract .The data transcription processing unit is prepared .This unit is beforehand provided with the document - structure definition information on the structured documents , i.e. , the processing target , the structure definition information on the program language , and the correspondence information between the document - structure definition and the structure definition .", "label": "", "metadata": {}, "score": "52.264282"}
{"text": "The data transcribing system as claimed in .claim 6 , wherein , by specifying partial element correspondence between said document structure of said structured document and said structure of said program language in said correspondence information , said transcription state storing structure is created for the specified partial element , and . wherein data corresponding to said specified partial element in said structured document is transcribed into said structure of said program language while the transcription state is set in the transcription state storing structure .", "label": "", "metadata": {}, "score": "52.588364"}
{"text": "A method for the compilation of a structured document , as per . claim 1 , wherein a typing tuple is comprised of an element type name in said first field , a type identifier in said second field , and a parent element name in said third field .", "label": "", "metadata": {}, "score": "52.63887"}
{"text": "The following assumptions are made : .A data structure ( 1306 ) in the case where the data are exchanged among the enterprises is defined in advance .Inside each enterprise , an application and a data structure which are characteristic of each enterprise are used .", "label": "", "metadata": {}, "score": "52.831497"}
{"text": "The present invention , based on the name to type mapping , saves computational cost in annotating type by omitting the pushdown automata steps of known techniques .In an annotation record data structure used in type annotation , each element type contains a list of sub - elements , which are unique within a local scope .", "label": "", "metadata": {}, "score": "52.905815"}
{"text": "FIG .2 , a definition information analyzing unit 501 inputs the document - structure definition information 1 on the structured documents , the structure definition information 2 on the program language , and the correspondence information 3 between the document - structure definition and the structure definition .", "label": "", "metadata": {}, "score": "52.961113"}
{"text": "Otherwise , the set of entry points are created , and an access unit may be selected based on information given by an argument or the other methods at the time of the calling - up .When writing out the structured documents 6 , the initialization processing function secures or registers a specified writing - out location ( i.e. , a file name and an address in the main storage ) .", "label": "", "metadata": {}, "score": "53.488266"}
{"text": "The application program 4 uses the data transcribing method where the structured documents 6 are read / written by calling up the data transcription processing unit 5 as needed .Instead of being called up by an explicitly - denoted calling - up syntax , the data transcription processing unit 5 may also be called up by the execution of an inputting / outputting syntax included in the program language .", "label": "", "metadata": {}, "score": "53.579937"}
{"text": "One structured - document access - unit reading / writing function 5032 is created for each access unit .Accordingly , in the case where a plurality of access units are set for one document type , a plurality of structured - document access - unit reading / writing functions 5032 are created .", "label": "", "metadata": {}, "score": "53.609474"}
{"text": "1 .FIG .4 illustrates an example of DTD ( Document Type Definition ) for declaring the document type of XML documents as document - structure definition information on the structured documents .FIG .5 illustrates the document - structure definition information in .", "label": "", "metadata": {}, "score": "53.700737"}
{"text": "5 , i.e. , \" address \" , \" item \" , \" itemname \" , \" price \" , and \" quantity \" , respectively .Unlike the structure definition ( 5021 ) in .FIG .6 , the iterations of the item elements are not specified .", "label": "", "metadata": {}, "score": "54.00509"}
{"text": "The flag structure will be explained below in more detail , using ( 83 ) in .FIG .10 . )The partial structure ( 83 ) of COBOL is an example of the flag structure corresponding to the partial DTD ( 81 ) and the partial structure ( 82 ) of COBOL .", "label": "", "metadata": {}, "score": "54.12294"}
{"text": "Also , in particular , even in the program language such as COBOL that has no conception of the pointer , it becomes possible to process the structured documents .Referring to .FIG .13 , the explanation will be given below concerning another embodiment in the present invention .", "label": "", "metadata": {}, "score": "54.351727"}
{"text": "FIG .4 illustrates a type hierarchy tree built by an initial step of a first algorithm of the present invention for the XML schema shown in .FIG .3 .Except for \" namespace : p \" root node 400 , all nodes are type records .", "label": "", "metadata": {}, "score": "54.458546"}
{"text": "This is achieved through the comparison of lists of attribute types with attribute instances for a particular element .[ 0014 ] .If an unknown type appears in an XML instance ; specifically , if a type name is not found in a name - to - type mapping , the unknown type is annotated with \" any \" type .", "label": "", "metadata": {}, "score": "54.528748"}
{"text": "In addition , default features such as attribute and type are supported .A method for compiling a structured document schema into type annotation records comprising steps of : .a. building a type hierarchy ordered tree from a structured document schema from type record wherein each of said type records contains typing tuples , .", "label": "", "metadata": {}, "score": "54.665195"}
{"text": "Accordingly , this embodiment is suitable for an application for amending only a part of existing structured documents .The in - structured - document positioning function 5035 receives information for indicating a position in the structured documents , then setting the present position at this position newly .", "label": "", "metadata": {}, "score": "54.79718"}
{"text": "The issue of the request accomplishes the data transcription on each element basis between the structured documents and the structure of the program language .A data transcribing method , performed by a computer , for transcribing data from data structure of a structured document to data structure of a program language , including the steps of : . acquiring definition information on document structure of said structured document , definition information on a structure of said program language , and correspondence information between said document structure of said structured document and said structure of said program language , . creating , based on said acquired information , a transcription state storing structure for storing a state of each element for which data in said structured document is to be transcribed into data of said program language , and . transcribing the data in said structured document into the data of said program language while setting the transcribing state of each element in said transcription state storing structure ; .", "label": "", "metadata": {}, "score": "55.057602"}
{"text": "Furthermore , if the structured documents have not defined the maximum value of the number of the iterated elements , the correspondence information specifies the maximum number of the iterations .Also , if the structured documents have not defined the maximum value of the character string length , the correspondence information specifies the maximum length of the elements as well .", "label": "", "metadata": {}, "score": "55.066734"}
{"text": "The system of the present invention shown in .Type annotation data structure 106 further comprises type annotation runtime 108 , offset stack 110 , and type hierarchy tree 112 .Type hierarchy tree 112 , is also comprised user - defined types 114 and built - in types 116 .", "label": "", "metadata": {}, "score": "55.097885"}
{"text": "1 illustrates the logical system configuration of an application program for processing structured documents in the present invention .FIG .2 illustrates , as a part of a data transcription processing unit 5 of the system configuration in .FIG .", "label": "", "metadata": {}, "score": "55.171265"}
{"text": "A method for the compilation of a structured document , as per . claim 5 , wherein said name is one of : a type name , element name , or attribute name ; and said type identifier is one of : a type , element , or attribute .", "label": "", "metadata": {}, "score": "55.552773"}
{"text": "The program 4 calls up the routine group 503 , thereby reading in the structured documents 6 .Next , the from - structured - document - to - structure reading - in function 5033 is called up .Moreover , based on the result obtained by the from - structured - document - to - structure reading - in function 5033 , it is judged whether or not the iteration of the access unit has been terminated ( step 43 ) .", "label": "", "metadata": {}, "score": "55.726997"}
{"text": "Here , the data item names illustrated in .FIG .8 , i.e. , \" ADDRESS \" , \" ITEM \" , \" ITEMNAME \" , \" PRICE \" , and \" QUANTITY \" are caused to correspond to the element names declared in .", "label": "", "metadata": {}, "score": "55.92276"}
{"text": "FIG .3 illustrates a method of calling up , from the application program , the structured - document access routine group 503 created in .FIG .2 , i.e. , illustrates an embodiment for carrying out the system configuration in .", "label": "", "metadata": {}, "score": "56.080708"}
{"text": "a. building a type annotation data structure comprising a structured document type hierarchy , a type indexing data structure , and a type array , .b. mapping a type name string to each element type in said structured document type hierarchy , and .", "label": "", "metadata": {}, "score": "56.131298"}
{"text": "[ 0009 ] .Based on a named type system of an XML schema , type annotation without full schema validation for documents and fragments is supported .Type annotation , based on a mapping of names to type annotation records , is achieved via the compilation of an XML schema into type annotation records .", "label": "", "metadata": {}, "score": "56.395596"}
{"text": "FIG .7 illustrates a data - set state ( 5022 ) in the case where the data of the respective elements in the main body ( 710 ) of the structured document illustrated in .FIG .5 are transcribed to the respective data items in the structure definition ( 5021 ) of the program language COBOL illustrated in .", "label": "", "metadata": {}, "score": "56.58622"}
{"text": "5 illustrates the document - structure definition information in .FIG .4 , and an example of the main body of a structured document created in accordance with the document - structure definition ; .FIG .6 illustrates an example of the structure definition 502 of a program language mapped to the entire document - structure definition information in .", "label": "", "metadata": {}, "score": "56.80652"}
{"text": "Moreover , the data - transcription - processing - unit creating function 5013 creates the structured - document access routine group 503 including a transcription processing of the attribute information .FIG .12 illustrates a flow chart of the processing by which the application program 4 reads in the structured documents 6 .", "label": "", "metadata": {}, "score": "56.867268"}
{"text": "Also , the element \" order \" defines that it has , in its inside , one address element and one or more item elements in this sequence .The address element and the item elements are declared in a declaration 72 and a declaration 73 , respectively .", "label": "", "metadata": {}, "score": "57.239307"}
{"text": "FIG .8 illustrates an example of the structure definition 502 of the program language mapped to the document - structure definition information in .FIG .4 in a state of being divided into two ; .FIG .9 is a block diagram for illustrating the function configuration of the structured - document access routine group 503 ; .", "label": "", "metadata": {}, "score": "57.903572"}
{"text": "Also , corresponding to the element D , a data item D has a decimal 9-digit data value , thus representing the occurrence number of the iterated element .The flag structure is also usable for the purpose of representing information on the start position and the data length on each structured data item corresponding to each element data in the structured documents .", "label": "", "metadata": {}, "score": "58.065285"}
{"text": "Converting A Bilingual Dictionary Into A Bilingual Knowledge Bank Based OnThe Synchronous SSTC .Abstract .In this paper , we would like to present an approach to construct a huge Bilingual Knowledge Bank ( BKB ) from an English Malay bilingual dictionary based on the idea of synchronous Structured String - Tree Correspondence ( SSTC ) .", "label": "", "metadata": {}, "score": "58.168068"}
{"text": "In step 206 , an ambiguity typing sequence is created for those tuples sharing a common first field and having a unique second field .Third fields from typing tuples in an ambiguity typing sequence are then collected and sorted .Since it is necessary for global types to be unique , a collection of third fields from an ambiguity typing sequence should not contain any empty members .", "label": "", "metadata": {}, "score": "58.215866"}
{"text": "Here , although the elements B 1 and B 2 are selectable elements , the elements B 1 and B 2 are each caused to correspond to the independent data items .Instead , the data item B 2 may be defined as a redefined item of the data item B 1 , thereby causing the data items to share the data region .", "label": "", "metadata": {}, "score": "58.4833"}
{"text": "The present invention provides an efficient method of type annotation by introducing data structures in addition to annotation record structures , and also by explicitly handling the derivation of relationships by using a type hierarchy .[0008 ] .Whatever the precise merits , features , and advantages of the above cited references , none of them achieves or fulfills the purposes of the present invention .", "label": "", "metadata": {}, "score": "58.848736"}
{"text": "In the exemplary ambiguity typing set , the first field in each tuple is a type name , the second field is a type identifier , and the third field is the parent element name of a type name designated in the first field .", "label": "", "metadata": {}, "score": "59.010868"}
{"text": "A method for a database engine to perform type annotation , as per . claim 13 , wherein said mapping step further comprises steps of : .a. loading said type annotation data structure into a runtime validation engine , .b. creating an empty offset stack data structure , .", "label": "", "metadata": {}, "score": "59.07466"}
{"text": "Type - annotated XML document or document fragment 122 is provided as an output of the system of the present invention .[ 0024 ] .Shown in .FIG .2 is a first algorithm of the present invention , known as Compile_XML_Schema algorithm , which describes the compilation of an XML schema .", "label": "", "metadata": {}, "score": "59.341877"}
{"text": "A method for the compilation of a structured document schema , as per . claim 1 , wherein said structured document schema is an XML document schema .A method for the compilation of a structured document schema , as per . claim 1 , wherein said typing tuples in said typing set are sorted to create said ambiguity typing sequence .", "label": "", "metadata": {}, "score": "59.37999"}
{"text": "In each intra - enterprise system , the data structure used from conventionally need not be modified .This condition saves a trouble taken for the database management and the modification of an application used inside the enterprise from conventionally , thereby making it possible to reduce a time and labor taken for the system modification / construction .", "label": "", "metadata": {}, "score": "59.45468"}
{"text": "Each branch office transmits / receives the data in accordance with the data structure ( 1402 ) used for the transmission / reception with the data collecting center .Using a data converting program ( 1407 ) , the data collecting center converts the data structure ( 1402 ) received from each branch office into the data structure ( 1401 ) used inside the center , thereby performing the data collection processing .", "label": "", "metadata": {}, "score": "59.508957"}
{"text": "It is an object of the present invention to provide a function of allowing the data included in the structured documents to be processed even in the program language that has no pointer - manipulating function or that has no function of registering the routine to be called up .", "label": "", "metadata": {}, "score": "59.823593"}
{"text": "Also , in the data collecting center , the data processing is performed using the data structure ( 1401 ) used inside the data collecting center .In the A branch office system , the data is managed using , e.g. , a pointer .", "label": "", "metadata": {}, "score": "59.900536"}
{"text": "[ 0015 ] .FIG .1 illustrates the system of the present invention .[ 0016 ] .FIG .2 is a process flow diagram for an XML compilation algorithm of the present invention .[ 0018 ] .FIG .", "label": "", "metadata": {}, "score": "60.08148"}
{"text": "[ 0019 ] .FIG .5 illustrates type annotation records data structure .[ 0020 ] .FIG .6 is a process flow diagram for XML type record annotation .[ 0021 ] .FIG .7 is an exemplary XML schema .", "label": "", "metadata": {}, "score": "60.167393"}
{"text": "The exemplary XML schema shown in .FIG .3 produces the following ambiguity sequence .Tuples comprising an ambiguity sequence are characterized by the fact that each has a type name associated with more than one type , and thus do not provide a distinct mapping between element type name and element type .", "label": "", "metadata": {}, "score": "60.277374"}
{"text": "The computer program product as claimed in .claim 9 , wherein , by specifying partial element correspondence between said document structure of said structured document and said structure of said program language in said correspondence information , said transcription state storing structure is created for the specified partial element , and . wherein data corresponding to said specified partial element in said structured document is transcribed into said structure of said program language while the transcription state is set in the transcription state storing structure .", "label": "", "metadata": {}, "score": "60.421143"}
{"text": "Description .BACKGROUND OF THE INVENTION .Field of the Invention .The present invention relates to a system and a method for processing external data by a program language .More particularly , it relates to a system , a method , and a program for processing structured documents by the program language .", "label": "", "metadata": {}, "score": "60.54759"}
{"text": "[ 0026 ] .The exemplary XML schema in .FIG .3 comprises such features as an abstract element type 304 , complex type 306 , anonymous element type 312 , and substitution group 316 .FIG .3 is used to illustrate the execution of a first XML compilation algorithm of the present invention .", "label": "", "metadata": {}, "score": "60.660263"}
{"text": "The algorithm of the present invention is modifiable to support default values .Default values for elements are supplied when an element is empty and there exists a default declaration for the specified element type .Default value support is achieved by storing default information during compilation of an XML schema and determining if an element is empty or not .", "label": "", "metadata": {}, "score": "60.900723"}
{"text": "FIG .7 shows an exemplary XML schema for the purposes of illustrating the principles of a second algorithm of the present invention .A type index entry 510 found in typing array 508 is zero , and the entry points to type anonymousT 1 514 .", "label": "", "metadata": {}, "score": "60.90665"}
{"text": "The final output of the algorithm creating an index structure is shown in .FIG .5 .In the exemplary figure a hashing index is chosen to implement typing index 500 , however , the present invention not limited by this choice .", "label": "", "metadata": {}, "score": "61.014565"}
{"text": "In .FIG .9 , the structured - document access routine group 503 includes an initialization processing function 5031 , a structured - document access - unit reading / writing function 5032 , an in - structured - document positioning function 5035 , and a termination processing function 5036 .", "label": "", "metadata": {}, "score": "61.029556"}
{"text": "Abstract .Type annotation record information storage for annotated automaton encoding for high - performance XML schema validation is optimized in a space efficient aspect .Subsequent to type annotation record information organization , type annotation records are used for type annotation of validated XML documents , either by implementing annotation records and type annotation part of an algorithm only , or by skipping one or more validation steps in a full validation implementation .", "label": "", "metadata": {}, "score": "61.034264"}
{"text": "6 .Each data item name in .FIG .7 corresponds to each data item name of the same name in .FIG .6 .With respect to the 2-time iterations of the \" item \" elements ( 731 , 732 ) in .", "label": "", "metadata": {}, "score": "61.21772"}
{"text": "c. creating an ambiguity typing sequence for said typing tuples sharing a common first field and having a unique second field , .d. arranging said ambiguity typing sequence based on an offset number assigned to a third field of each of said typing tuples in said ambiguity typing sequence , .", "label": "", "metadata": {}, "score": "61.458977"}
{"text": "[0002 ] .Field of Invention .[ 0003 ] .The present invention relates generally to the field of schema validation and type annotation .More specifically , the present invention is related to efficient type annotation of validated XML documents .", "label": "", "metadata": {}, "score": "61.474262"}
{"text": "This provision is of interest because default values are not explicitly determined since the present invention does not require schema validation .Support for attribute defaults is achieved via association of attribute types with element types in compiled type annotation records .", "label": "", "metadata": {}, "score": "61.608353"}
{"text": "8 illustrates another example of the structure definition 502 of the program language corresponding to the document - structure definition information in .FIG .4 . FIG .9 illustrates the function configuration of the structured - document access routine group 503 .", "label": "", "metadata": {}, "score": "61.67234"}
{"text": "Then , employing a method where the application program 4 uses the created routine , the transcription processing may also be carried out .In .FIG .2 or after , the explanation will be given concerning the embodiment in the present invention , employing the method where the establishment of the data transcribing method is performed in advance at a step before the execution of the application program .", "label": "", "metadata": {}, "score": "61.680702"}
{"text": "Next , when the termination processing function 5036 is called up , the structured documents in the character string representation are created from the entire tree - structured representation .In the case of , e.g. , the XML documents , the tree structure in the Document Object Model format is created and , based on the present Document Object Model format tree structure , the termination processing function 5036 creates the XML documents in the character strings .", "label": "", "metadata": {}, "score": "61.854515"}
{"text": "preparing , based on said acquired information , a transcription state storing structure for storing a state of each element for which data of said program language is to be transcribed into data in said structured document , and . transcribing the data of said program language into the data in said structured document while setting the transcribing state of each element in said transcription state storing structure , .", "label": "", "metadata": {}, "score": "62.10753"}
{"text": "Referring to .FIG .14 , the explanation will be given below concerning still another embodiment in the present invention .Here , the following assumptions are made : .A data collecting center ( 1400 ) , an A branch office system ( 1403 ) , and a B branch office system ( 1404 ) are connected to each other via a network .", "label": "", "metadata": {}, "score": "62.195747"}
{"text": "The resultant index of a given element type in a typing array is used to annotate an element .Also in step 614 , the element is then annotated with type 510 stored in typing array 508 at index location 504 determined by previous searching step .", "label": "", "metadata": {}, "score": "62.38981"}
{"text": "FIG .5 ) , then an index 504 is incremented by a PEEK value of the offset stack .A PEEK value of an offset stack is used to determine the value of the entry on the top of an offset stack .", "label": "", "metadata": {}, "score": "62.410027"}
{"text": "In this case , the structure definition creating function 5012 in the definition information analyzing unit 501 replaces the structure definition creating function by a document - structure definition information creating function , thereby making it possible to create the document - structure definition information 1 on the structured documents .", "label": "", "metadata": {}, "score": "62.507416"}
{"text": "12 illustrates a flow chart of a processing method where the application program 4 in .FIG .1 uses the data transcription processing unit 5 so as to read in the structured documents 6 ; .FIG .13 illustrates an embodiment where the present invention is applied to an inter - enterprise system ; and .", "label": "", "metadata": {}, "score": "62.73806"}
{"text": "BRIEF DESCRIPTION OF THE DRAWINGS .FIG .1 is a block diagram for illustrating the logical system configuration of an application program for processing structured documents in the present invention ; .FIG .2 is a block diagram for illustrating , as a part of a data transcription processing unit 5 of the system configuration in .", "label": "", "metadata": {}, "score": "62.834793"}
{"text": "A partial structure definition ( 93 ) of COBOL is an example of the structure of COBOL that represents both the attribute value and the element content with respect to the partial DTD ( 91 ) .In the case where the attribute information is included in the document - structure definition information 1 on the structured documents , a data item for storing the attribute information is defined in the structure definition information 2 on the program language .", "label": "", "metadata": {}, "score": "62.838764"}
{"text": "If the iteration has been terminated , the processing goes to a step 44 , thus terminating this processing .When reading in the entire structured documents 6 at a time , the iteration processing based on the judgement at the step 43 is unnecessary .", "label": "", "metadata": {}, "score": "62.868164"}
{"text": "A method for the compilation of a structured document , as per . claim 1 , wherein said type indexing data structure can be any one of : a hash table , a binary tree , and a B+ tree .A method for the compilation of a structured document , as per . claim 1 , wherein said type indexing data structure is comprised of a column indicating ambiguity type for each of said type names and a column indicating offset .", "label": "", "metadata": {}, "score": "63.108902"}
{"text": "Also , the DTD ( 81 ) defines that the elements B 1 , B 2 , C , and D are character string data , respectively .The data items B 1 , B 2 , C , and D are each defined as the fixed value of a 20-character - long alphanumeric - character item , and the number of the iterations of the data item D is defined as the fixed value of 10 times .", "label": "", "metadata": {}, "score": "63.16686"}
{"text": "Each typing tuple is comprised of a type name , element name , or string - valued attribute name as a first field , a type identifier as a second field , and a parent element name as a third field .", "label": "", "metadata": {}, "score": "63.186054"}
{"text": "FIG .6 , i.e. , \" ORDER \" , \" ADDRESS \" , \" ITEM \" , \" ITEMNAME \" , \" PRICE \" , and \" QUANTITY \" are caused to correspond to the element names declared in .FIG .", "label": "", "metadata": {}, "score": "63.550896"}
{"text": "This flexibility makes synchronous SSTC very well suited for the construction of a Bilingual Knowledge Bank we need for the EnglishMalay MT application .Abstract .In this paper , we would like to present an approach to construct a huge Bilingual Knowledge Bank ( BKB ) .", "label": "", "metadata": {}, "score": "64.35452"}
{"text": "The above enhancements are implemented in various computing environments .For example , the present invention may be implemented on a conventional IBM PC or equivalent .All programming and data related thereto are stored in computer memory , static or dynamic , and may be retrieved by the user in any of : conventional computer storage , display ( i.e. , CRT ) and/or hardcopy ( i.e. , printed ) formats .", "label": "", "metadata": {}, "score": "64.43638"}
{"text": "For each type record , all tuples are determined in this manner .After all tuples are determined , a typing set is formed by the union of all typing tuples corresponding to type records formed in step 202 .The number of typing tuples in a type record is dependant on the number of sub - elements and attributes for a given element type .", "label": "", "metadata": {}, "score": "64.52048"}
{"text": "[ 0013 ] .In addition , one embodiment of the present invention provides for the handling of default values if they exist in supplied XML data .Defaults are specified in an XML schema and are supplied during validation .There are two kinds of default values ; a default value for an attribute when an attribute is missing in an element , and default content for an element when an element is empty , ( e.g. , , or ) .", "label": "", "metadata": {}, "score": "64.972565"}
{"text": "a code segment including instructions for transcribing the data in said structured document into the data of said program language while setting the transcribing state of each element in said transcription state storing structure ; .A computer program product embedded in a computer - readable medium for transcribing data from data structure of a program language to data structure of a structured document , the computer program product including : . a code segment including instructions for preparing , based on said acquired information , a transcription state storing structure for storing a state of each element for which data of said program language is to be transcribed into data in said structured document , and .", "label": "", "metadata": {}, "score": "65.00519"}
{"text": "[ 0006 ] .However , type information and default values for XML documents or document fragments are required by XQuery and XPath 2.0 data model when there is XML schema feature support .The overall idea of supporting type annotation without full schema validated documents or fragments is based on the named type system of XML schema .", "label": "", "metadata": {}, "score": "65.62121"}
{"text": "CONCLUSION .[ 0042 ] .A system and method has been shown in the above embodiments for the effective implementation of an efficient type annontation of XML schema - validated XML documents without schema validation .For example , the present invention should not be limited by software / program or computing environment .", "label": "", "metadata": {}, "score": "65.68007"}
{"text": "10 illustrates examples of structures where , in the case where an optional element or an iterated element exists in the document - structure definition information 1 on the structured documents , the presence or absence of the default or the number of the iterations is latched .", "label": "", "metadata": {}, "score": "65.85069"}
{"text": "11 illustrates an example of a structure where , in the case where an attribute is affixed to an element in the document - structure definition information 1 , the attribute value is latched along with the content of the element .", "label": "", "metadata": {}, "score": "66.07152"}
{"text": "Names determine types and structures .Although un - typed XML documents or document fragments can be supported by dynamic typing feature of XML query languages , typed XML documents can improve query performance dramatically .Furthermore , dynamic typing of XML query languages has limitations in that there is no guarantee that all type - related features will be supported since type inference is very difficult for un - typed XML documents .", "label": "", "metadata": {}, "score": "66.32124"}
{"text": "[ 0022 ] .While this invention is illustrated and described in a preferred embodiment , the invention may be produced in many different configurations .Those skilled in the art will envision many other possible variations within the scope of the present invention .", "label": "", "metadata": {}, "score": "66.59395"}
{"text": "0010 ] .Full validation for documents and fragments using either type annotation along with schema validation or type annotation alone can be achieved by patent application commonly assigned U.S. Ser .No .60/418,673 by omitting the step of supplying tokens to a pushdown automata ; the omitted step performs validation by using type annotation records .", "label": "", "metadata": {}, "score": "66.88379"}
{"text": "An article of manufacture comprising a computer usable medium having computer readable program code embodied therein which comprising modules to execute the steps of : .a. loading type annotation data structure into a runtime validation engine , .b. creating an empty offset stack data structure , .", "label": "", "metadata": {}, "score": "66.893585"}
{"text": "b. creating a typing set containing said typing tuples in said type hierarchy ordered tree , .c. creating an ambiguity typing sequence for said typing tuples sharing a common first field and having a unique second field , .d. arranging said ambiguity typing sequence based on an offset number assigned to a third field of each of said typing tuples in said ambiguity typing sequence , .", "label": "", "metadata": {}, "score": "66.94388"}
{"text": "Following the step of sorting and arranging 208 , a type array is created by extracting types found in the second field of a typing tuple according to the sorted order of ambiguity typing sequences in step 210 .Types not included in ambiguity sequences , which are also extracted from the second field of typing tuples , are listed following those typing tuples that are members of an ambiguity typing sequence .", "label": "", "metadata": {}, "score": "67.16229"}
{"text": "If the situation is left as it is , the application program 4 can not distinguish , from the character embedded as the pad , the portion that has originally been the data on the structured documents .Then , the flag structure is provided with the information on the start position and the data length where the actually read - in data has been stored in correspondence with each data item .", "label": "", "metadata": {}, "score": "68.24465"}
{"text": "5 is typing array 508 in which an index is mapped to type 510 and offset 512 .Type 510 in typing array 508 maps to types constructed from XML schema denoted by namespace 1 in type hierarchy 514 .In type hierarchy 514 both user - defined types 516 and built - in types 518 are shown .", "label": "", "metadata": {}, "score": "68.39356"}
{"text": "12 illustrates a flow chart of a processing method where the application program 4 in .FIG .1 uses the data transcription processing unit 5 so as to read in the structured documents 6 .In the configuration of the data transcribing system in .", "label": "", "metadata": {}, "score": "68.58235"}
{"text": "[ 0012 ] .A type annotation record builder is used to compile an XML schema into type annotation records .The present invention uses a simple array data structure to search for a type record .Since the name of an element can not uniquely determine an element type , a data structure is needed keep track of scopes in which a specified element type is defined ; this is achieved by the use of a stack data structure .", "label": "", "metadata": {}, "score": "68.72468"}
{"text": "Multi - Word Expression - Sensitive Word Alignment Tsuyoshi Okita , Alfredo Maldonado Guerra , Yvette Graham and Andy Way .Co- occurrence Graph Based Iterative Bilingual Lexicon Extraction From Comparable Corpora Diptesh Chatterjee , Sudeshna Sarkar and Arpit Mishra .", "label": "", "metadata": {}, "score": "68.93576"}
{"text": "Abstract .In this project , we have successfully developed a sentence generator for Malay to be used in an Example - Based Machine translation ( EBMT ) system for English - Malay translation .Our approach is an example - based approach which relies sorely on example translations kept in a Bilingual Knowledge Bank ( BKB ) .", "label": "", "metadata": {}, "score": "69.58751"}
{"text": "In an initial step 600 of the annotate_type algorithm , type annotation records from precompiled data structures shown in .FIG .5 are loaded into memory .An empty offset stack is then created , and a value of zero is pushed onto an empty offset stack .", "label": "", "metadata": {}, "score": "70.05812"}
{"text": "Index entries will have a string field denoting element type , a flag field denoting ambiguity , and an index field denoting the index of an element type in a type array .A flag field is given a value of ' Y ' if a corresponding element type is ambiguous and ' N ' if it is not ambiguous .", "label": "", "metadata": {}, "score": "70.79028"}
{"text": "11 illustrates an example of a structure where , in the case where an attribute is affixed to an element in the document - structure definition information 1 , the attribute value is latched along with the content of the element ; .", "label": "", "metadata": {}, "score": "70.86638"}
{"text": "In step 208 , typing tuples within each ambiguity typing sequence are then arranged based on the unique offset numbers assigned to each third field .Each offset number assigned to each third field is unique within an ambiguity typing sequence since there is no ambiguity within each parent element .", "label": "", "metadata": {}, "score": "71.21085"}
{"text": "In addition , a record is not pushed onto the offset stack .Lastly , if an end tag is encountered as in step 612 , the top record in the offset stack is popped off in step 620 .The process terminates in step 622 .", "label": "", "metadata": {}, "score": "71.59908"}
{"text": "Ontology driven content extraction using interlingual annotation of texts in the OMNIA project Achille Falaise , David Rouquet , Didier Schwab , Herv\u00e9 Blanchon and Christian Boitet .Towards multi - lingual summarization : A comparative analysis of sentence extraction methods on English and Hebrew corpora Marina Litvak , Mark Last , Slava Kisilevich , Daniel Keim , Hagay Lipman and Assaf Ben Gur .", "label": "", "metadata": {}, "score": "71.88797"}
{"text": "In this case , the offset on the top of an offset stack is zero , so entry number 510 remains as five and corresponds to type USERID_TYPE 516 .[ 0036 ] .When an 708 event is encountered , \" name \" is used to key a search of type indexing data structure 500 to determine typing index 504 .", "label": "", "metadata": {}, "score": "72.50899"}
{"text": "d. using a token from an XML document or document fragment to key a search on a type indexing data structure to determine an index for said token , .e. incrementing said index by value in topmost record of offset stack if said token is indicated to be of ambiguous type , and . indicating element type in a type array at said index location .", "label": "", "metadata": {}, "score": "72.56258"}
{"text": "In the exemplary ambiguity sequences , two element types , \" employeeType \" and \" vendorType \" are included and are assigned offset numbers of zero and one , respectively .Arranging typing tuples according to assigned offset numbers produces the following sequences .", "label": "", "metadata": {}, "score": "72.775375"}
{"text": "Since a \" name \" attribute has ambiguity , entry 510 in typing array 508 is three in addition to the offset on the top of the offset stack .In this case , the offset on the top of offset stack is zero , so the entry number is three and corresponds to type anonymousT 2 516 .", "label": "", "metadata": {}, "score": "73.5383"}
{"text": "d. using a token from an XML document or document fragment to key a search on a typing index to determine an index for said token , .e. incrementing said index by value in topmost record of offset stack if said token is indicated to be of ambiguous type , and . indicating element type in a typing array at said index location .", "label": "", "metadata": {}, "score": "73.55269"}
{"text": "FIG .5 is typing indexing data structure 500 mapping type names 502 to indices 504 within typing array 508 as well as to an indication of whether a given type name is ambiguous or not 506 .Also shown in .", "label": "", "metadata": {}, "score": "74.529366"}
{"text": "For this reason , attributes and their associated elements are no longer stored separately .[ 0039 ] .Support of xs : anyType is achieved by annotating xs : anyType to an element name that is declared to have xs : anyType and omitting the step of annotating sub - elements .", "label": "", "metadata": {}, "score": "74.92848"}
{"text": "14 illustrates an embodiment where the present invention is applied to a system between each branch office and a data collecting center .DESCRIPTION OF THE EMBODIMENT .Hereinafter , the detailed explanation will be given concerning an embodiment in the present invention .", "label": "", "metadata": {}, "score": "75.83153"}
{"text": "When an event 706 is encountered , \" userid \" is used to key a search of type indexing data structure 500 to determine typing index 504 .In this case , the index 504 found in type indexing data structure 500 is determined to be five .", "label": "", "metadata": {}, "score": "75.96706"}
{"text": "Entries in a type array that correspond to type names with an offset number assigned as described previously , are also given the same offset number .Those entries that have no offset number are assigned an offset number of zero .", "label": "", "metadata": {}, "score": "76.047195"}
{"text": "Thus , the actual cell location to which a type 514 is mapped is at index four and corresponds to type string 518 .Since entry 510 has an offset value of one 512 , a record containing a value of zero is pushed onto an offset stack .", "label": "", "metadata": {}, "score": "76.962"}
{"text": "In addition , sub - elements with unknown type names are annotated with xs : anyType .[ 0040 ] .Furthermore , the present invention includes a computer program code - based product , which is a storage medium having program code stored therein which can be used to instruct a computer to perform any of the methods associated with the present invention .", "label": "", "metadata": {}, "score": "78.421974"}
{"text": "Moreover , using a structure definition creating function 5012 , the analyzing unit creates the structure definition 502 of the program language .Also , if an equivalence equivalent to the structure definition 502 of the program language is created from the structure definition information 2 on the program language by a tool or the like , the structure definition creating function 5012 is also unnecessary .", "label": "", "metadata": {}, "score": "78.61104"}
{"text": "claim 14 , wherein if said token is an end tag ; a topmost record of said offset stack is removed .An article of manufacture comprising a computer usable medium having computer readable program code embodied therein which implements the compilation of a structured document schema into type annotation records comprising modules to execute the steps of : .", "label": "", "metadata": {}, "score": "79.56639"}
{"text": "A method for annotating type , as per .A method for annotating type , as per .claim 14 , wherein said token comprises any of : a start tag and element name ; a start tag , element name , and type name ; an attribute type and attribute name ; or an end tag .", "label": "", "metadata": {}, "score": "80.89162"}
{"text": "claim 7 , wherein , by specifying partial structure correspondence between said document structure of said structured document and said structure of said program language in said correspondence information , said transcription state storing structure is created for the specified partial structure , and . wherein data corresponding said specified partial structure in said structure of said program language is transcribed into said structured document while the transcription state is set in the transcription state storing structure .", "label": "", "metadata": {}, "score": "81.837875"}
{"text": "claim 14 , wherein said ambiguous type of said token is determined by a consultation of said typing array .A method for annotating type , as per .claim 14 , wherein a record is pushed onto said offset stack if said token is either a start tag and element name ; or a start tag , element name , and type name .", "label": "", "metadata": {}, "score": "83.24497"}
{"text": "A Study of Multiple Assisting Languages in Multilingual PRF Vishal Vachhani , Manoj Chinnakotla , Mitesh Khapra and Pushpak Bhattacharyya .Multilinguization and Personalization of NL - based Systems Najeh Hajlaoui and Christian Boitet The data transcription processing unit is prepared .", "label": "", "metadata": {}, "score": "83.31829"}
{"text": "claim 14 , wherein said type is an XML type .A method for annotating type , as per .claim 14 , wherein said record is a type annotation record .A method for annotating type , as per .A method for annotating type , as per . claim 17 , wherein attribute defaults are supported by associating attribute types with element types in said type annotation records .", "label": "", "metadata": {}, "score": "84.50024"}
{"text": "[ 0037 ] .When an 710 event is encountered , \" name \" is used to key a search of type indexing data structure 500 to determine typing index 504 .In this case , index 504 found in type indexing data structure 500 is determined to be three .", "label": "", "metadata": {}, "score": "84.66791"}
{"text": "In .FIG .11 , a partial DTD ( 91 ) defines an element \" room \" and an attribute \" smoking \" that belongs to the element \" room \" .A partial XML document ( 92 ) is an example of the XML document in accordance with the partial DTD ( 91 ) .", "label": "", "metadata": {}, "score": "85.408936"}
{"text": "When an 702 event is encountered , \" employee \" is used to key a search of type indexing data structure 500 to determine a typing index 502 .In this case , the typing index 502 has a value of seven .", "label": "", "metadata": {}, "score": "86.071594"}
{"text": "Thus , a record containing an offset value 512 of zero of the seventh entry in typing array 508 is pushed onto an offset stack .In this case , the typing index has a value of ten .Because \" serno \" is a unique type , its entry 510 in typing array 512 is ten , which maps to positiveInteger type 518 .", "label": "", "metadata": {}, "score": "89.00442"}
{"text": "claim 1 , wherein , by specifying partial element correspondence between said document structure of said structured document and said structure of said program language in said correspondence information , said transcription state storing structure is created for the specified partial element , and . wherein data corresponding to said specified partial element in said structured document is transcribed into said structure of said program language while the transcription state is set in the transcription state storing structure .", "label": "", "metadata": {}, "score": "92.541885"}
{"text": "10774584 , 774584 , US 2005/0177578 A1 , US 2005/177578 A1 , US 20050177578 A1 , US 20050177578A1 , US 2005177578 A1 , US 2005177578A1 , US - A1 - 20050177578 , US - A1 - 2005177578 , US2005/0177578A1 , US2005/177578A1 , US20050177578 A1 , US20050177578A1 , US2005177578 A1 , US2005177578A1 .", "label": "", "metadata": {}, "score": "117.43942"}
