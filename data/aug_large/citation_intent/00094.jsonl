{"text": "It combines context - free grammars with templates and canned text in a single formalism .Thus the granularity of the language model may depend on the application needs .The system currently runs under Solaris 2.5 .It is available freely under a research license .", "label": "", "metadata": {}, "score": "50.15878"}
{"text": "It combines context - free grammars with templates and canned text in a single formalism .Thus the granularity of the language model may depend on the application needs .The system currently runs under Solaris 2.5 .It is available freely under a research license .", "label": "", "metadata": {}, "score": "50.15878"}
{"text": "It combines context - free grammars with templates and canned text in a single formalism .Thus the granularity of the language model may depend on the application needs .The system currently runs under Solaris 2.5 .It is available freely under a research license .", "label": "", "metadata": {}, "score": "50.15878"}
{"text": "It combines context - free grammars with templates and canned text in a single formalism .Thus the granularity of the language model may depend on the application needs .The system currently runs under Solaris 2.5 .It is available freely under a research license .", "label": "", "metadata": {}, "score": "50.15878"}
{"text": "It combines context - free grammars with templates and canned text in a single formalism .Thus the granularity of the language model may depend on the application needs .The system currently runs under Solaris 2.5 .It is available freely under a research license .", "label": "", "metadata": {}, "score": "50.15878"}
{"text": "It combines context - free grammars with templates and canned text in a single formalism .Thus the granularity of the language model may depend on the application needs .The system currently runs under Solaris 2.5 .It is available freely under a research license .", "label": "", "metadata": {}, "score": "50.15878"}
{"text": "It combines context - free grammars with templates and canned text in a single formalism .Thus the granularity of the language model may depend on the application needs .The system currently runs under Solaris 2.5 .It is available freely under a research license .", "label": "", "metadata": {}, "score": "50.15878"}
{"text": "It combines context - free grammars with templates and canned text in a single formalism .Thus the granularity of the language model may depend on the application needs .The system currently runs under Solaris 2.5 .It is available freely under a research license .", "label": "", "metadata": {}, "score": "50.15878"}
{"text": "It combines context - free grammars with templates and canned text in a single formalism .Thus the granularity of the language model may depend on the application needs .The system currently runs under Solaris 2.5 .It is available freely under a research license .", "label": "", "metadata": {}, "score": "50.15878"}
{"text": "It combines context - free grammars with templates and canned text in a single formalism .Thus the granularity of the language model may depend on the application needs .The system currently runs under Solaris 2.5 .It is available freely under a research license .", "label": "", "metadata": {}, "score": "50.15878"}
{"text": "The MUG system runs MUG grammars with fixed ( test cases ) and arbitrary input specifications to produce output in a natural language , graphical user interface and possibly in other modes .MUG Workbench can serve to inspect the data - structures used during generation .", "label": "", "metadata": {}, "score": "54.927956"}
{"text": "The MUG system runs MUG grammars with fixed ( test cases ) and arbitrary input specifications to produce output in a natural language , graphical user interface and possibly in other modes .MUG Workbench can serve to inspect the data - structures used during generation .", "label": "", "metadata": {}, "score": "54.927956"}
{"text": "The MUG system runs MUG grammars with fixed ( test cases ) and arbitrary input specifications to produce output in a natural language , graphical user interface and possibly in other modes .MUG Workbench can serve to inspect the data - structures used during generation .", "label": "", "metadata": {}, "score": "54.927956"}
{"text": "The MUG system runs MUG grammars with fixed ( test cases ) and arbitrary input specifications to produce output in a natural language , graphical user interface and possibly in other modes .MUG Workbench can serve to inspect the data - structures used during generation .", "label": "", "metadata": {}, "score": "54.927956"}
{"text": "The MUG system runs MUG grammars with fixed ( test cases ) and arbitrary input specifications to produce output in a natural language , graphical user interface and possibly in other modes .MUG Workbench can serve to inspect the data - structures used during generation .", "label": "", "metadata": {}, "score": "54.927956"}
{"text": "The MUG system runs MUG grammars with fixed ( test cases ) and arbitrary input specifications to produce output in a natural language , graphical user interface and possibly in other modes .MUG Workbench can serve to inspect the data - structures used during generation .", "label": "", "metadata": {}, "score": "54.927956"}
{"text": "The MUG system runs MUG grammars with fixed ( test cases ) and arbitrary input specifications to produce output in a natural language , graphical user interface and possibly in other modes .MUG Workbench can serve to inspect the data - structures used during generation .", "label": "", "metadata": {}, "score": "54.927956"}
{"text": "The MUG system runs MUG grammars with fixed ( test cases ) and arbitrary input specifications to produce output in a natural language , graphical user interface and possibly in other modes .MUG Workbench can serve to inspect the data - structures used during generation .", "label": "", "metadata": {}, "score": "54.927956"}
{"text": "The MUG system runs MUG grammars with fixed ( test cases ) and arbitrary input specifications to produce output in a natural language , graphical user interface and possibly in other modes .MUG Workbench can serve to inspect the data - structures used during generation .", "label": "", "metadata": {}, "score": "54.927956"}
{"text": "The MUG system runs MUG grammars with fixed ( test cases ) and arbitrary input specifications to produce output in a natural language , graphical user interface and possibly in other modes .MUG Workbench can serve to inspect the data - structures used during generation .", "label": "", "metadata": {}, "score": "54.927956"}
{"text": "Systemic Unification Reusable Grammar for Spanish is a large scale Spanish grammar allowing systems which already use FUF / SURGE for English NLG to be able to generate syntactically ( and many times semantically ) equivalent text in Spanish when new lexical items are introduced .", "label": "", "metadata": {}, "score": "57.38891"}
{"text": "Systemic Unification Reusable Grammar for Spanish is a large scale Spanish grammar allowing systems which already use FUF / SURGE for English NLG to be able to generate syntactically ( and many times semantically ) equivalent text in Spanish when new lexical items are introduced .", "label": "", "metadata": {}, "score": "57.38891"}
{"text": "Systemic Unification Reusable Grammar for Spanish is a large scale Spanish grammar allowing systems which already use FUF / SURGE for English NLG to be able to generate syntactically ( and many times semantically ) equivalent text in Spanish when new lexical items are introduced .", "label": "", "metadata": {}, "score": "57.38891"}
{"text": "Systemic Unification Reusable Grammar for Spanish is a large scale Spanish grammar allowing systems which already use FUF / SURGE for English NLG to be able to generate syntactically ( and many times semantically ) equivalent text in Spanish when new lexical items are introduced .", "label": "", "metadata": {}, "score": "57.38891"}
{"text": "Systemic Unification Reusable Grammar for Spanish is a large scale Spanish grammar allowing systems which already use FUF / SURGE for English NLG to be able to generate syntactically ( and many times semantically ) equivalent text in Spanish when new lexical items are introduced .", "label": "", "metadata": {}, "score": "57.38891"}
{"text": "Systemic Unification Reusable Grammar for Spanish is a large scale Spanish grammar allowing systems which already use FUF / SURGE for English NLG to be able to generate syntactically ( and many times semantically ) equivalent text in Spanish when new lexical items are introduced .", "label": "", "metadata": {}, "score": "57.38891"}
{"text": "Systemic Unification Reusable Grammar for Spanish is a large scale Spanish grammar allowing systems which already use FUF / SURGE for English NLG to be able to generate syntactically ( and many times semantically ) equivalent text in Spanish when new lexical items are introduced .", "label": "", "metadata": {}, "score": "57.38891"}
{"text": "Systemic Unification Reusable Grammar for Spanish is a large scale Spanish grammar allowing systems which already use FUF / SURGE for English NLG to be able to generate syntactically ( and many times semantically ) equivalent text in Spanish when new lexical items are introduced .", "label": "", "metadata": {}, "score": "57.38891"}
{"text": "Systemic Unification Reusable Grammar for Spanish is a large scale Spanish grammar allowing systems which already use FUF / SURGE for English NLG to be able to generate syntactically ( and many times semantically ) equivalent text in Spanish when new lexical items are introduced .", "label": "", "metadata": {}, "score": "57.38891"}
{"text": "Systemic Unification Reusable Grammar for Spanish is a large scale Spanish grammar allowing systems which already use FUF / SURGE for English NLG to be able to generate syntactically ( and many times semantically ) equivalent text in Spanish when new lexical items are introduced .", "label": "", "metadata": {}, "score": "57.38891"}
{"text": "[ ftp://ftp.cs.cmu.edu/user/ai/new/daydreamer/0new.html DAYDREAMER ] is a computer model of the stream of thought developed at UCLA by Erik T. Mueller from 1983 to 1988 .The generator is located in the file dd_gen . cl .Common lisp source code available under GPL v2 . surface realiser for ( Feature - Based Lexicalised )", "label": "", "metadata": {}, "score": "60.3976"}
{"text": "OpenCCG is implemented in Java , and is freely available under the LGPL .Deliverables from the RAGS project - RAGSOCKS software for interfacing modules using RAGS data representations , example RAGS module ( genetic algorithm based text planner ) and RAGS wrapper for FUF / SURGE . is an ultra - simple Java - based realiser .", "label": "", "metadata": {}, "score": "60.945786"}
{"text": "OpenCCG is implemented in Java , and is freely available under the LGPL .Deliverables from the RAGS project - RAGSOCKS software for interfacing modules using RAGS data representations , example RAGS module ( genetic algorithm based text planner ) and RAGS wrapper for FUF / SURGE . is an ultra - simple Java - based realiser .", "label": "", "metadata": {}, "score": "60.945786"}
{"text": "OpenCCG is implemented in Java , and is freely available under the LGPL .Deliverables from the RAGS project - RAGSOCKS software for interfacing modules using RAGS data representations , example RAGS module ( genetic algorithm based text planner ) and RAGS wrapper for FUF / SURGE . is an ultra - simple Java - based realiser .", "label": "", "metadata": {}, "score": "60.945786"}
{"text": "OpenCCG is implemented in Java , and is freely available under the LGPL .Deliverables from the RAGS project - RAGSOCKS software for interfacing modules using RAGS data representations , example RAGS module ( genetic algorithm based text planner ) and RAGS wrapper for FUF / SURGE . is an ultra - simple Java - based realiser .", "label": "", "metadata": {}, "score": "60.945786"}
{"text": "OpenCCG is implemented in Java , and is freely available under the LGPL .Deliverables from the RAGS project - RAGSOCKS software for interfacing modules using RAGS data representations , example RAGS module ( genetic algorithm based text planner ) and RAGS wrapper for FUF / SURGE . is an ultra - simple Java - based realiser .", "label": "", "metadata": {}, "score": "60.945786"}
{"text": "OpenCCG is implemented in Java , and is freely available under the LGPL .Deliverables from the RAGS project - RAGSOCKS software for interfacing modules using RAGS data representations , example RAGS module ( genetic algorithm based text planner ) and RAGS wrapper for FUF / SURGE . is an ultra - simple Java - based realiser .", "label": "", "metadata": {}, "score": "60.945786"}
{"text": "OpenCCG is implemented in Java , and is freely available under the LGPL .Deliverables from the RAGS project - RAGSOCKS software for interfacing modules using RAGS data representations , example RAGS module ( genetic algorithm based text planner ) and RAGS wrapper for FUF / SURGE . is an ultra - simple Java - based realiser .", "label": "", "metadata": {}, "score": "60.945786"}
{"text": "OpenCCG is implemented in Java , and is freely available under the LGPL .Deliverables from the RAGS project - RAGSOCKS software for interfacing modules using RAGS data representations , example RAGS module ( genetic algorithm based text planner ) and RAGS wrapper for FUF / SURGE . is an ultra - simple Java - based realiser .", "label": "", "metadata": {}, "score": "60.945786"}
{"text": "OpenCCG is implemented in Java , and is freely available under the LGPL .Deliverables from the RAGS project - RAGSOCKS software for interfacing modules using RAGS data representations , example RAGS module ( genetic algorithm based text planner ) and RAGS wrapper for FUF / SURGE . is an ultra - simple Java - based realiser .", "label": "", "metadata": {}, "score": "60.945786"}
{"text": "OpenCCG is implemented in Java , and is freely available under the LGPL .Deliverables from the RAGS project - RAGSOCKS software for interfacing modules using RAGS data representations , example RAGS module ( genetic algorithm based text planner ) and RAGS wrapper for FUF / SURGE . is an ultra - simple Java - based realiser .", "label": "", "metadata": {}, "score": "60.945786"}
{"text": "( Try playing the AVI file in VLC if you run into problems . )Perhaps this system could be considered an instance of the WYSIWYM approach .Syntactic realization package .( A CommonLisp package providing an interpreter for a functional unification formalism called FUF and SURGE , a large grammar of English written in FUF . )", "label": "", "metadata": {}, "score": "64.395584"}
{"text": "( Try playing the AVI file in VLC if you run into problems . )Perhaps this system could be considered an instance of the WYSIWYM approach .Syntactic realization package .( A CommonLisp package providing an interpreter for a functional unification formalism called FUF and SURGE , a large grammar of English written in FUF . )", "label": "", "metadata": {}, "score": "64.395584"}
{"text": "( Try playing the AVI file in VLC if you run into problems . )Perhaps this system could be considered an instance of the WYSIWYM approach .Syntactic realization package .( A CommonLisp package providing an interpreter for a functional unification formalism called FUF and SURGE , a large grammar of English written in FUF . )", "label": "", "metadata": {}, "score": "64.395584"}
{"text": "( Try playing the AVI file in VLC if you run into problems . )Perhaps this system could be considered an instance of the WYSIWYM approach .Syntactic realization package .( A CommonLisp package providing an interpreter for a functional unification formalism called FUF and SURGE , a large grammar of English written in FUF . )", "label": "", "metadata": {}, "score": "64.395584"}
{"text": "( Try playing the AVI file in VLC if you run into problems . )Perhaps this system could be considered an instance of the WYSIWYM approach .Syntactic realization package .( A CommonLisp package providing an interpreter for a functional unification formalism called FUF and SURGE , a large grammar of English written in FUF . )", "label": "", "metadata": {}, "score": "64.395584"}
{"text": "( Try playing the AVI file in VLC if you run into problems . )Perhaps this system could be considered an instance of the WYSIWYM approach .Syntactic realization package .( A CommonLisp package providing an interpreter for a functional unification formalism called FUF and SURGE , a large grammar of English written in FUF . )", "label": "", "metadata": {}, "score": "64.395584"}
{"text": "( Try playing the AVI file in VLC if you run into problems . )Perhaps this system could be considered an instance of the WYSIWYM approach .Syntactic realization package .( A CommonLisp package providing an interpreter for a functional unification formalism called FUF and SURGE , a large grammar of English written in FUF . )", "label": "", "metadata": {}, "score": "64.395584"}
{"text": "( Try playing the AVI file in VLC if you run into problems . )Perhaps this system could be considered an instance of the WYSIWYM approach .Syntactic realization package .( A CommonLisp package providing an interpreter for a functional unification formalism called FUF and SURGE , a large grammar of English written in FUF . )", "label": "", "metadata": {}, "score": "64.395584"}
{"text": "( Try playing the AVI file in VLC if you run into problems . )Perhaps this system could be considered an instance of the WYSIWYM approach .Syntactic realization package .( A CommonLisp package providing an interpreter for a functional unification formalism called FUF and SURGE , a large grammar of English written in FUF . )", "label": "", "metadata": {}, "score": "64.395584"}
{"text": "( Try playing the AVI file in VLC if you run into problems . )Perhaps this system could be considered an instance of the WYSIWYM approach .Syntactic realization package .( A CommonLisp package providing an interpreter for a functional unification formalism called FUF and SURGE , a large grammar of English written in FUF . )", "label": "", "metadata": {}, "score": "64.395584"}
{"text": "Source code avalailable via darcs . provides a means of exploring large - scale systemic - functional grammars in order to see how they are organized and what kinds of things they cover .It can be used to explore the KPML resources .", "label": "", "metadata": {}, "score": "65.67001"}
{"text": "Source code avalailable via darcs . provides a means of exploring large - scale systemic - functional grammars in order to see how they are organized and what kinds of things they cover .It can be used to explore the KPML resources .", "label": "", "metadata": {}, "score": "65.67001"}
{"text": "Source code avalailable via darcs . provides a means of exploring large - scale systemic - functional grammars in order to see how they are organized and what kinds of things they cover .It can be used to explore the KPML resources .", "label": "", "metadata": {}, "score": "65.67001"}
{"text": "Source code avalailable via darcs . provides a means of exploring large - scale systemic - functional grammars in order to see how they are organized and what kinds of things they cover .It can be used to explore the KPML resources .", "label": "", "metadata": {}, "score": "65.67001"}
{"text": "Source code avalailable via darcs . provides a means of exploring large - scale systemic - functional grammars in order to see how they are organized and what kinds of things they cover .It can be used to explore the KPML resources .", "label": "", "metadata": {}, "score": "65.67001"}
{"text": "Source code avalailable via darcs . provides a means of exploring large - scale systemic - functional grammars in order to see how they are organized and what kinds of things they cover .It can be used to explore the KPML resources .", "label": "", "metadata": {}, "score": "65.67001"}
{"text": "License : LGPL .DAYDREAMER .DAYDREAMER is a computer model of the stream of thought developed at UCLA by Erik T. Mueller from 1983 to 1988 .The generator is located in the file dd_gen . cl .Common lisp source code available under GPL v2 . surface realiser for ( Feature - Based Lexicalised )", "label": "", "metadata": {}, "score": "65.67957"}
{"text": "License : LGPL .DAYDREAMER .DAYDREAMER is a computer model of the stream of thought developed at UCLA by Erik T. Mueller from 1983 to 1988 .The generator is located in the file dd_gen . cl .Common lisp source code available under GPL v2 . surface realiser for ( Feature - Based Lexicalised )", "label": "", "metadata": {}, "score": "65.67957"}
{"text": "License : LGPL .DAYDREAMER .DAYDREAMER is a computer model of the stream of thought developed at UCLA by Erik T. Mueller from 1983 to 1988 .The generator is located in the file dd_gen . cl .Common lisp source code available under GPL v2 . surface realiser for ( Feature - Based Lexicalised )", "label": "", "metadata": {}, "score": "65.67957"}
{"text": "License : LGPL .DAYDREAMER .DAYDREAMER is a computer model of the stream of thought developed at UCLA by Erik T. Mueller from 1983 to 1988 .The generator is located in the file dd_gen . cl .Common lisp source code available under GPL v2 . surface realiser for ( Feature - Based Lexicalised )", "label": "", "metadata": {}, "score": "65.67957"}
{"text": "License : LGPL .DAYDREAMER .DAYDREAMER is a computer model of the stream of thought developed at UCLA by Erik T. Mueller from 1983 to 1988 .The generator is located in the file dd_gen . cl .Common lisp source code available under GPL v2 . surface realiser for ( Feature - Based Lexicalised )", "label": "", "metadata": {}, "score": "65.67957"}
{"text": "License : LGPL .DAYDREAMER .DAYDREAMER is a computer model of the stream of thought developed at UCLA by Erik T. Mueller from 1983 to 1988 .The generator is located in the file dd_gen . cl .Common lisp source code available under GPL v2 . surface realiser for ( Feature - Based Lexicalised )", "label": "", "metadata": {}, "score": "65.67957"}
{"text": "License : LGPL .DAYDREAMER .DAYDREAMER is a computer model of the stream of thought developed at UCLA by Erik T. Mueller from 1983 to 1988 .The generator is located in the file dd_gen . cl .Common lisp source code available under GPL v2 . surface realiser for ( Feature - Based Lexicalised )", "label": "", "metadata": {}, "score": "65.67957"}
{"text": "License : LGPL .DAYDREAMER .DAYDREAMER is a computer model of the stream of thought developed at UCLA by Erik T. Mueller from 1983 to 1988 .The generator is located in the file dd_gen . cl .Common lisp source code available under GPL v2 . surface realiser for ( Feature - Based Lexicalised )", "label": "", "metadata": {}, "score": "65.67957"}
{"text": "License : LGPL .DAYDREAMER .DAYDREAMER is a computer model of the stream of thought developed at UCLA by Erik T. Mueller from 1983 to 1988 .The generator is located in the file dd_gen . cl .Common lisp source code available under GPL v2 . surface realiser for ( Feature - Based Lexicalised )", "label": "", "metadata": {}, "score": "65.67957"}
{"text": "License : LGPL .DAYDREAMER .DAYDREAMER is a computer model of the stream of thought developed at UCLA by Erik T. Mueller from 1983 to 1988 .The generator is located in the file dd_gen . cl .Common lisp source code available under GPL v2 . surface realiser for ( Feature - Based Lexicalised )", "label": "", "metadata": {}, "score": "65.67957"}
{"text": "If you know of a system which is not listed here , please click on Edit in the upper left corner of this page and add the system yourself .CLINT is a hybrid template / word - based generation system with an example application of business letter generation .", "label": "", "metadata": {}, "score": "66.37204"}
{"text": "If you know of a system which is not listed here , please click on Edit in the upper left corner of this page and add the system yourself .CLINT is a hybrid template / word - based generation system with an example application of business letter generation .", "label": "", "metadata": {}, "score": "66.37204"}
{"text": "If you know of a system which is not listed here , please click on Edit in the upper left corner of this page and add the system yourself .CLINT is a hybrid template / word - based generation system with an example application of business letter generation .", "label": "", "metadata": {}, "score": "66.37204"}
{"text": "It is possible to use the system without the window interface as a generator serving requests for generation across sockets or via files .LKB ( Linguistic Knowledge Builder ) is a grammar engineering environment for unification - based formalisms , typically HPSG .", "label": "", "metadata": {}, "score": "67.13296"}
{"text": "It is possible to use the system without the window interface as a generator serving requests for generation across sockets or via files .LKB ( Linguistic Knowledge Builder ) is a grammar engineering environment for unification - based formalisms , typically HPSG .", "label": "", "metadata": {}, "score": "67.13296"}
{"text": "It is possible to use the system without the window interface as a generator serving requests for generation across sockets or via files .LKB ( Linguistic Knowledge Builder ) is a grammar engineering environment for unification - based formalisms , typically HPSG .", "label": "", "metadata": {}, "score": "67.13296"}
{"text": "It is possible to use the system without the window interface as a generator serving requests for generation across sockets or via files .LKB ( Linguistic Knowledge Builder ) is a grammar engineering environment for unification - based formalisms , typically HPSG .", "label": "", "metadata": {}, "score": "67.13296"}
{"text": "It is possible to use the system without the window interface as a generator serving requests for generation across sockets or via files .LKB ( Linguistic Knowledge Builder ) is a grammar engineering environment for unification - based formalisms , typically HPSG .", "label": "", "metadata": {}, "score": "67.13296"}
{"text": "It is possible to use the system without the window interface as a generator serving requests for generation across sockets or via files .LKB ( Linguistic Knowledge Builder ) is a grammar engineering environment for unification - based formalisms , typically HPSG .", "label": "", "metadata": {}, "score": "67.13296"}
{"text": "It is possible to use the system without the window interface as a generator serving requests for generation across sockets or via files .LKB ( Linguistic Knowledge Builder ) is a grammar engineering environment for unification - based formalisms , typically HPSG .", "label": "", "metadata": {}, "score": "67.13296"}
{"text": "It is possible to use the system without the window interface as a generator serving requests for generation across sockets or via files .LKB ( Linguistic Knowledge Builder ) is a grammar engineering environment for unification - based formalisms , typically HPSG .", "label": "", "metadata": {}, "score": "67.13296"}
{"text": "It is possible to use the system without the window interface as a generator serving requests for generation across sockets or via files .LKB ( Linguistic Knowledge Builder ) is a grammar engineering environment for unification - based formalisms , typically HPSG .", "label": "", "metadata": {}, "score": "67.13296"}
{"text": "It is possible to use the system without the window interface as a generator serving requests for generation across sockets or via files .LKB ( Linguistic Knowledge Builder ) is a grammar engineering environment for unification - based formalisms , typically HPSG .", "label": "", "metadata": {}, "score": "67.13296"}
{"text": "Java , Apache license .See demo : Demo of AI Virtual Pet Answering Simple Questions .OpenCCG , the OpenNLP CCG Library ( formerly Grok ) , is both a parser and a realizer for Combinatory Categorial Grammar .It has been used in several dialog systems .", "label": "", "metadata": {}, "score": "67.164406"}
{"text": "Java , Apache license .See demo : Demo of AI Virtual Pet Answering Simple Questions .OpenCCG , the OpenNLP CCG Library ( formerly Grok ) , is both a parser and a realizer for Combinatory Categorial Grammar .It has been used in several dialog systems .", "label": "", "metadata": {}, "score": "67.164406"}
{"text": "Java , Apache license .See demo : Demo of AI Virtual Pet Answering Simple Questions .OpenCCG , the OpenNLP CCG Library ( formerly Grok ) , is both a parser and a realizer for Combinatory Categorial Grammar .It has been used in several dialog systems .", "label": "", "metadata": {}, "score": "67.164406"}
{"text": "Java , Apache license .See demo : Demo of AI Virtual Pet Answering Simple Questions .OpenCCG , the OpenNLP CCG Library ( formerly Grok ) , is both a parser and a realizer for Combinatory Categorial Grammar .It has been used in several dialog systems .", "label": "", "metadata": {}, "score": "67.164406"}
{"text": "Java , Apache license .See demo : Demo of AI Virtual Pet Answering Simple Questions .OpenCCG , the OpenNLP CCG Library ( formerly Grok ) , is both a parser and a realizer for Combinatory Categorial Grammar .It has been used in several dialog systems .", "label": "", "metadata": {}, "score": "67.164406"}
{"text": "Java , Apache license .See demo : Demo of AI Virtual Pet Answering Simple Questions .OpenCCG , the OpenNLP CCG Library ( formerly Grok ) , is both a parser and a realizer for Combinatory Categorial Grammar .It has been used in several dialog systems .", "label": "", "metadata": {}, "score": "67.164406"}
{"text": "Java , Apache license .See demo : Demo of AI Virtual Pet Answering Simple Questions .OpenCCG , the OpenNLP CCG Library ( formerly Grok ) , is both a parser and a realizer for Combinatory Categorial Grammar .It has been used in several dialog systems .", "label": "", "metadata": {}, "score": "67.164406"}
{"text": "Java , Apache license .See demo : Demo of AI Virtual Pet Answering Simple Questions .OpenCCG , the OpenNLP CCG Library ( formerly Grok ) , is both a parser and a realizer for Combinatory Categorial Grammar .It has been used in several dialog systems .", "label": "", "metadata": {}, "score": "67.164406"}
{"text": "Java , Apache license .See demo : Demo of AI Virtual Pet Answering Simple Questions .OpenCCG , the OpenNLP CCG Library ( formerly Grok ) , is both a parser and a realizer for Combinatory Categorial Grammar .It has been used in several dialog systems .", "label": "", "metadata": {}, "score": "67.164406"}
{"text": "Java , Apache license .See demo : Demo of AI Virtual Pet Answering Simple Questions .OpenCCG , the OpenNLP CCG Library ( formerly Grok ) , is both a parser and a realizer for Combinatory Categorial Grammar .It has been used in several dialog systems .", "label": "", "metadata": {}, "score": "67.164406"}
{"text": "The code is a mixture of Java and Scala , a scripting language for the Java virtual machine .CRISP comes with its own implementation of GraphPlan , but it can also output plans in PDDL ( \" Planning Domain Definition Language \" , a successor to STRIPS ) for use with other AI planners .", "label": "", "metadata": {}, "score": "68.23538"}
{"text": "The code is a mixture of Java and Scala , a scripting language for the Java virtual machine .CRISP comes with its own implementation of GraphPlan , but it can also output plans in PDDL ( \" Planning Domain Definition Language \" , a successor to STRIPS ) for use with other AI planners .", "label": "", "metadata": {}, "score": "68.23538"}
{"text": "If you know of a system which is not listed here , please click on Konsultan Pajak in the upper left corner of this page and add the system yourself .CLINT is a hybrid template / word - based generation system with an example application of business letter generation .", "label": "", "metadata": {}, "score": "68.34526"}
{"text": "SPUD ( Sentence Planner Using Descriptions ) is Matthew Purver 's LTAG - based NLG system .There are two versions : SPUD version 0.01 was written in SML .Later versions , known as SPUD lite , are written in Prolog .", "label": "", "metadata": {}, "score": "68.462"}
{"text": "SPUD ( Sentence Planner Using Descriptions ) is Matthew Purver 's LTAG - based NLG system .There are two versions : SPUD version 0.01 was written in SML .Later versions , known as SPUD lite , are written in Prolog .", "label": "", "metadata": {}, "score": "68.462"}
{"text": "SPUD ( Sentence Planner Using Descriptions ) is Matthew Purver 's LTAG - based NLG system .There are two versions : SPUD version 0.01 was written in SML .Later versions , known as SPUD lite , are written in Prolog .", "label": "", "metadata": {}, "score": "68.462"}
{"text": "SPUD ( Sentence Planner Using Descriptions ) is Matthew Purver 's LTAG - based NLG system .There are two versions : SPUD version 0.01 was written in SML .Later versions , known as SPUD lite , are written in Prolog .", "label": "", "metadata": {}, "score": "68.462"}
{"text": "SPUD ( Sentence Planner Using Descriptions ) is Matthew Purver 's LTAG - based NLG system .There are two versions : SPUD version 0.01 was written in SML .Later versions , known as SPUD lite , are written in Prolog .", "label": "", "metadata": {}, "score": "68.462"}
{"text": "SPUD ( Sentence Planner Using Descriptions ) is Matthew Purver 's LTAG - based NLG system .There are two versions : SPUD version 0.01 was written in SML .Later versions , known as SPUD lite , are written in Prolog .", "label": "", "metadata": {}, "score": "68.462"}
{"text": "SPUD ( Sentence Planner Using Descriptions ) is Matthew Purver 's LTAG - based NLG system .There are two versions : SPUD version 0.01 was written in SML .Later versions , known as SPUD lite , are written in Prolog .", "label": "", "metadata": {}, "score": "68.462"}
{"text": "SPUD ( Sentence Planner Using Descriptions ) is Matthew Purver 's LTAG - based NLG system .There are two versions : SPUD version 0.01 was written in SML .Later versions , known as SPUD lite , are written in Prolog .", "label": "", "metadata": {}, "score": "68.462"}
{"text": "SPUD ( Sentence Planner Using Descriptions ) is Matthew Purver 's LTAG - based NLG system .There are two versions : SPUD version 0.01 was written in SML .Later versions , known as SPUD lite , are written in Prolog .", "label": "", "metadata": {}, "score": "68.462"}
{"text": "SPUD ( Sentence Planner Using Descriptions ) is Matthew Purver 's LTAG - based NLG system .There are two versions : SPUD version 0.01 was written in SML .Later versions , known as SPUD lite , are written in Prolog .", "label": "", "metadata": {}, "score": "68.462"}
{"text": "The natural language generation systems listed below are available for download over the web .If you know of a system which is not listed here , please click on Edit in the upper left corner of this page and add the system yourself .", "label": "", "metadata": {}, "score": "70.34837"}
{"text": "The natural language generation systems listed below are available for download over the web .If you know of a system which is not listed here , please click on Edit in the upper left corner of this page and add the system yourself .", "label": "", "metadata": {}, "score": "70.34837"}
{"text": "The natural language generation systems listed below are available for download over the web .If you know of a system which is not listed here , please click on Edit in the upper left corner of this page and add the system yourself .", "label": "", "metadata": {}, "score": "70.34837"}
{"text": "The natural language generation systems listed below are available for download over the web .If you know of a system which is not listed here , please click on Edit in the upper left corner of this page and add the system yourself .", "label": "", "metadata": {}, "score": "70.34837"}
{"text": "The natural language generation systems listed below are available for download over the web .If you know of a system which is not listed here , please click on Edit in the upper left corner of this page and add the system yourself .", "label": "", "metadata": {}, "score": "70.34837"}
{"text": "LKB is implemented in Common Lisp , and is freely available under an open source license .It includes also a KNOPPIX - based GNU / Linux live - CD , with all the system installed , ready to use .MUG Workbench is a development and debugging tool for Multimodal NLG .", "label": "", "metadata": {}, "score": "72.5335"}
{"text": "LKB is implemented in Common Lisp , and is freely available under an open source license .It includes also a KNOPPIX - based GNU / Linux live - CD , with all the system installed , ready to use .MUG Workbench is a development and debugging tool for Multimodal NLG .", "label": "", "metadata": {}, "score": "72.5335"}
{"text": "LKB is implemented in Common Lisp , and is freely available under an open source license .It includes also a KNOPPIX - based GNU / Linux live - CD , with all the system installed , ready to use .MUG Workbench is a development and debugging tool for Multimodal NLG .", "label": "", "metadata": {}, "score": "72.5335"}
{"text": "LKB is implemented in Common Lisp , and is freely available under an open source license .It includes also a KNOPPIX - based GNU / Linux live - CD , with all the system installed , ready to use .MUG Workbench is a development and debugging tool for Multimodal NLG .", "label": "", "metadata": {}, "score": "72.5335"}
{"text": "LKB is implemented in Common Lisp , and is freely available under an open source license .It includes also a KNOPPIX - based GNU / Linux live - CD , with all the system installed , ready to use .MUG Workbench is a development and debugging tool for Multimodal NLG .", "label": "", "metadata": {}, "score": "72.5335"}
{"text": "LKB is implemented in Common Lisp , and is freely available under an open source license .It includes also a KNOPPIX - based GNU / Linux live - CD , with all the system installed , ready to use .MUG Workbench is a development and debugging tool for Multimodal NLG .", "label": "", "metadata": {}, "score": "72.5335"}
{"text": "LKB is implemented in Common Lisp , and is freely available under an open source license .It includes also a KNOPPIX - based GNU / Linux live - CD , with all the system installed , ready to use .MUG Workbench is a development and debugging tool for Multimodal NLG .", "label": "", "metadata": {}, "score": "72.5335"}
{"text": "LKB is implemented in Common Lisp , and is freely available under an open source license .It includes also a KNOPPIX - based GNU / Linux live - CD , with all the system installed , ready to use .MUG Workbench is a development and debugging tool for Multimodal NLG .", "label": "", "metadata": {}, "score": "72.5335"}
{"text": "LKB is implemented in Common Lisp , and is freely available under an open source license .It includes also a KNOPPIX - based GNU / Linux live - CD , with all the system installed , ready to use .MUG Workbench is a development and debugging tool for Multimodal NLG .", "label": "", "metadata": {}, "score": "72.5335"}
{"text": "LKB is implemented in Common Lisp , and is freely available under an open source license .It includes also a KNOPPIX - based GNU / Linux live - CD , with all the system installed , ready to use .MUG Workbench is a development and debugging tool for Multimodal NLG .", "label": "", "metadata": {}, "score": "72.5335"}
{"text": "Source code available via hackage , GitHub , or hub.darcs.net .provides a means of exploring large - scale systemic - functional grammars in order to see how they are organized and what kinds of things they cover .It can be used to explore the KPML resources .", "label": "", "metadata": {}, "score": "72.94565"}
{"text": "Source code available via hackage , GitHub , or hub.darcs.net .provides a means of exploring large - scale systemic - functional grammars in order to see how they are organized and what kinds of things they cover .It can be used to explore the KPML resources .", "label": "", "metadata": {}, "score": "72.94565"}
{"text": "Source code available via hackage , GitHub , or hub.darcs.net .provides a means of exploring large - scale systemic - functional grammars in order to see how they are organized and what kinds of things they cover .It can be used to explore the KPML resources .", "label": "", "metadata": {}, "score": "72.94565"}
{"text": "These already include a version of the Nigel grammar of English and pre - installed examples .The KPML system offers a robust , mature platform for large - scale grammar engineering that is particularly oriented to multilingual grammar development and generation .", "label": "", "metadata": {}, "score": "74.02365"}
{"text": "These already include a version of the Nigel grammar of English and pre - installed examples .The KPML system offers a robust , mature platform for large - scale grammar engineering that is particularly oriented to multilingual grammar development and generation .", "label": "", "metadata": {}, "score": "74.02365"}
{"text": "These already include a version of the Nigel grammar of English and pre - installed examples .The KPML system offers a robust , mature platform for large - scale grammar engineering that is particularly oriented to multilingual grammar development and generation .", "label": "", "metadata": {}, "score": "74.02365"}
{"text": "These already include a version of the Nigel grammar of English and pre - installed examples .The KPML system offers a robust , mature platform for large - scale grammar engineering that is particularly oriented to multilingual grammar development and generation .", "label": "", "metadata": {}, "score": "74.02365"}
{"text": "These already include a version of the Nigel grammar of English and pre - installed examples .The KPML system offers a robust , mature platform for large - scale grammar engineering that is particularly oriented to multilingual grammar development and generation .", "label": "", "metadata": {}, "score": "74.02365"}
{"text": "These already include a version of the Nigel grammar of English and pre - installed examples .The KPML system offers a robust , mature platform for large - scale grammar engineering that is particularly oriented to multilingual grammar development and generation .", "label": "", "metadata": {}, "score": "74.02365"}
{"text": "These already include a version of the Nigel grammar of English and pre - installed examples .The KPML system offers a robust , mature platform for large - scale grammar engineering that is particularly oriented to multilingual grammar development and generation .", "label": "", "metadata": {}, "score": "74.02365"}
{"text": "These already include a version of the Nigel grammar of English and pre - installed examples .The KPML system offers a robust , mature platform for large - scale grammar engineering that is particularly oriented to multilingual grammar development and generation .", "label": "", "metadata": {}, "score": "74.02365"}
{"text": "These already include a version of the Nigel grammar of English and pre - installed examples .The KPML system offers a robust , mature platform for large - scale grammar engineering that is particularly oriented to multilingual grammar development and generation .", "label": "", "metadata": {}, "score": "74.02365"}
{"text": "These already include a version of the Nigel grammar of English and pre - installed examples .The KPML system offers a robust , mature platform for large - scale grammar engineering that is particularly oriented to multilingual grammar development and generation .", "label": "", "metadata": {}, "score": "74.02365"}
{"text": "Source code avalailable via hackage , GitHub , or hub.darcs.net .provides a means of exploring large - scale systemic - functional grammars in order to see how they are organized and what kinds of things they cover .It can be used to explore the KPML resources .", "label": "", "metadata": {}, "score": "74.385735"}
{"text": "KPML is also used extensively in multilingual text generation research and for teaching .It is based on systemic functional linguistics .Downloadable standalone executables of the system are available for PCs running Windows .The source code is written in ANSI Common Lisp and uses the Common Lisp Interface Manager ( CLIM ) .", "label": "", "metadata": {}, "score": "74.61397"}
{"text": "KPML is also used extensively in multilingual text generation research and for teaching .It is based on systemic functional linguistics .Downloadable standalone executables of the system are available for PCs running Windows .The source code is written in ANSI Common Lisp and uses the Common Lisp Interface Manager ( CLIM ) .", "label": "", "metadata": {}, "score": "74.61397"}
{"text": "KPML is also used extensively in multilingual text generation research and for teaching .It is based on systemic functional linguistics .Downloadable standalone executables of the system are available for PCs running Windows .The source code is written in ANSI Common Lisp and uses the Common Lisp Interface Manager ( CLIM ) .", "label": "", "metadata": {}, "score": "74.61397"}
{"text": "KPML is also used extensively in multilingual text generation research and for teaching .It is based on systemic functional linguistics .Downloadable standalone executables of the system are available for PCs running Windows .The source code is written in ANSI Common Lisp and uses the Common Lisp Interface Manager ( CLIM ) .", "label": "", "metadata": {}, "score": "74.61397"}
{"text": "KPML is also used extensively in multilingual text generation research and for teaching .It is based on systemic functional linguistics .Downloadable standalone executables of the system are available for PCs running Windows .The source code is written in ANSI Common Lisp and uses the Common Lisp Interface Manager ( CLIM ) .", "label": "", "metadata": {}, "score": "74.61397"}
{"text": "KPML is also used extensively in multilingual text generation research and for teaching .It is based on systemic functional linguistics .Downloadable standalone executables of the system are available for PCs running Windows .The source code is written in ANSI Common Lisp and uses the Common Lisp Interface Manager ( CLIM ) .", "label": "", "metadata": {}, "score": "74.61397"}
{"text": "KPML is also used extensively in multilingual text generation research and for teaching .It is based on systemic functional linguistics .Downloadable standalone executables of the system are available for PCs running Windows .The source code is written in ANSI Common Lisp and uses the Common Lisp Interface Manager ( CLIM ) .", "label": "", "metadata": {}, "score": "74.61397"}
{"text": "KPML is also used extensively in multilingual text generation research and for teaching .It is based on systemic functional linguistics .Downloadable standalone executables of the system are available for PCs running Windows .The source code is written in ANSI Common Lisp and uses the Common Lisp Interface Manager ( CLIM ) .", "label": "", "metadata": {}, "score": "74.61397"}
{"text": "KPML is also used extensively in multilingual text generation research and for teaching .It is based on systemic functional linguistics .Downloadable standalone executables of the system are available for PCs running Windows .The source code is written in ANSI Common Lisp and uses the Common Lisp Interface Manager ( CLIM ) .", "label": "", "metadata": {}, "score": "74.61397"}
{"text": "KPML is also used extensively in multilingual text generation research and for teaching .It is based on systemic functional linguistics .Downloadable standalone executables of the system are available for PCs running Windows .The source code is written in ANSI Common Lisp and uses the Common Lisp Interface Manager ( CLIM ) .", "label": "", "metadata": {}, "score": "74.61397"}
{"text": "CRISP .CRISP is Alexander Koller 's NLG system that tries to cast both microplanning and sentence realisation as an AI planning problem .The code is a mixture of Java and Scala , a scripting language for the Java virtual machine .", "label": "", "metadata": {}, "score": "77.40555"}
{"text": "CRISP .CRISP is Alexander Koller 's NLG system that tries to cast both microplanning and sentence realisation as an AI planning problem .The code is a mixture of Java and Scala , a scripting language for the Java virtual machine .", "label": "", "metadata": {}, "score": "77.40555"}
{"text": "CRISP .CRISP is Alexander Koller 's NLG system that tries to cast both microplanning and sentence realisation as an AI planning problem .The code is a mixture of Java and Scala , a scripting language for the Java virtual machine .", "label": "", "metadata": {}, "score": "77.40555"}
{"text": "CRISP .CRISP is Alexander Koller 's NLG system that tries to cast both microplanning and sentence realisation as an AI planning problem .The code is a mixture of Java and Scala , a scripting language for the Java virtual machine .", "label": "", "metadata": {}, "score": "77.40555"}
{"text": "The system is written in C++ and runs under Microsoft Windows .CRISP .CRISP is Alexander Koller 's NLG system that tries to cast both microplanning and sentence realisation as an AI planning problem .The code is a mixture of Java and Scala , a scripting language for the Java virtual machine .", "label": "", "metadata": {}, "score": "79.38698"}
{"text": "The system is written in C++ and runs under Microsoft Windows .CRISP .CRISP is Alexander Koller 's NLG system that tries to cast both microplanning and sentence realisation as an AI planning problem .The code is a mixture of Java and Scala , a scripting language for the Java virtual machine .", "label": "", "metadata": {}, "score": "79.38698"}
{"text": "The system is written in C++ and runs under Microsoft Windows .CRISP .CRISP is Alexander Koller 's NLG system that tries to cast both microplanning and sentence realisation as an AI planning problem .The code is a mixture of Java and Scala , a scripting language for the Java virtual machine .", "label": "", "metadata": {}, "score": "79.38698"}
{"text": "The system is written in C++ and runs under Microsoft Windows .CRISP .CRISP is Alexander Koller 's NLG system that tries to cast both microplanning and sentence realisation as an AI planning problem .The code is a mixture of Java and Scala , a scripting language for the Java virtual machine .", "label": "", "metadata": {}, "score": "79.38698"}
{"text": "The system is written in C++ and runs under Microsoft Windows .CRISP .CRISP is Alexander Koller 's NLG system that tries to cast both microplanning and sentence realisation as an AI planning problem .The code is a mixture of Java and Scala , a scripting language for the Java virtual machine .", "label": "", "metadata": {}, "score": "79.38698"}
{"text": "The system is written in C++ and runs under Microsoft Windows .CRISP .CRISP is Alexander Koller 's NLG system that tries to cast both microplanning and sentence realisation as an AI planning problem .The code is a mixture of Java and Scala , a scripting language for the Java virtual machine .", "label": "", "metadata": {}, "score": "79.38698"}
{"text": "Tree Adjoining Grammar and a flat MRS - like semantics ( sans top handle and underspecification ) .Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .", "label": "", "metadata": {}, "score": "80.38468"}
{"text": "Written in Haskell .Revision as of 04:10 , 9 January 2013 .The natural language generation systems listed below are available for download over the web .If you know of a system which is not listed here , please click on Edit in the upper left corner of this page and add the system yourself .", "label": "", "metadata": {}, "score": "81.01221"}
{"text": "See here for publications describing NaturalOWL .( GPL ) .NLGen .The NLGen natural language generation system applies the SegSim strategy for generating English sentences .Probabilistic inference for sentence construction is based on a statistical analysis of RelEx output .", "label": "", "metadata": {}, "score": "83.47066"}
{"text": "See here for publications describing NaturalOWL .( GPL ) .NLGen .The NLGen natural language generation system applies the SegSim strategy for generating English sentences .Probabilistic inference for sentence construction is based on a statistical analysis of RelEx output .", "label": "", "metadata": {}, "score": "83.47066"}
{"text": "See here for publications describing NaturalOWL .( GPL ) .NLGen .The NLGen natural language generation system applies the SegSim strategy for generating English sentences .Probabilistic inference for sentence construction is based on a statistical analysis of RelEx output .", "label": "", "metadata": {}, "score": "83.47066"}
{"text": "See here for publications describing NaturalOWL .( GPL ) .NLGen .The NLGen natural language generation system applies the SegSim strategy for generating English sentences .Probabilistic inference for sentence construction is based on a statistical analysis of RelEx output .", "label": "", "metadata": {}, "score": "83.47066"}
{"text": "See here for publications describing NaturalOWL .( GPL ) .NLGen .The NLGen natural language generation system applies the SegSim strategy for generating English sentences .Probabilistic inference for sentence construction is based on a statistical analysis of RelEx output .", "label": "", "metadata": {}, "score": "83.47066"}
{"text": "See here for publications describing NaturalOWL .( GPL ) .NLGen .The NLGen natural language generation system applies the SegSim strategy for generating English sentences .Probabilistic inference for sentence construction is based on a statistical analysis of RelEx output .", "label": "", "metadata": {}, "score": "83.47066"}
{"text": "See here for publications describing NaturalOWL .( GPL ) .NLGen .The NLGen natural language generation system applies the SegSim strategy for generating English sentences .Probabilistic inference for sentence construction is based on a statistical analysis of RelEx output .", "label": "", "metadata": {}, "score": "83.47066"}
{"text": "See here for publications describing NaturalOWL .( GPL ) .NLGen .The NLGen natural language generation system applies the SegSim strategy for generating English sentences .Probabilistic inference for sentence construction is based on a statistical analysis of RelEx output .", "label": "", "metadata": {}, "score": "83.47066"}
{"text": "See here for publications describing NaturalOWL .( GPL ) .NLGen .The NLGen natural language generation system applies the SegSim strategy for generating English sentences .Probabilistic inference for sentence construction is based on a statistical analysis of RelEx output .", "label": "", "metadata": {}, "score": "83.47066"}
{"text": "See here for publications describing NaturalOWL .( GPL ) .NLGen .The NLGen natural language generation system applies the SegSim strategy for generating English sentences .Probabilistic inference for sentence construction is based on a statistical analysis of RelEx output .", "label": "", "metadata": {}, "score": "83.47066"}
{"text": "However , because it is so simple , its relatively easy for people to learn how to use it .It has been used by many people in Aberdeen , and also for teaching .It is set up as a Java package , so it can only be used by Java programs .", "label": "", "metadata": {}, "score": "84.46069"}
{"text": "However , because it is so simple , its relatively easy for people to learn how to use it .It has been used by many people in Aberdeen , and also for teaching .It is set up as a Java package , so it can only be used by Java programs .", "label": "", "metadata": {}, "score": "84.46069"}
{"text": "However , because it is so simple , its relatively easy for people to learn how to use it .It has been used by many people in Aberdeen , and also for teaching .It is set up as a Java package , so it can only be used by Java programs .", "label": "", "metadata": {}, "score": "84.46069"}
{"text": "However , because it is so simple , its relatively easy for people to learn how to use it .It has been used by many people in Aberdeen , and also for teaching .It is set up as a Java package , so it can only be used by Java programs .", "label": "", "metadata": {}, "score": "84.46069"}
{"text": "However , because it is so simple , its relatively easy for people to learn how to use it .It has been used by many people in Aberdeen , and also for teaching .It is set up as a Java package , so it can only be used by Java programs .", "label": "", "metadata": {}, "score": "84.46069"}
{"text": "However , because it is so simple , its relatively easy for people to learn how to use it .It has been used by many people in Aberdeen , and also for teaching .It is set up as a Java package , so it can only be used by Java programs .", "label": "", "metadata": {}, "score": "84.46069"}
{"text": "However , because it is so simple , its relatively easy for people to learn how to use it .It has been used by many people in Aberdeen , and also for teaching .It is set up as a Java package , so it can only be used by Java programs .", "label": "", "metadata": {}, "score": "84.46069"}
{"text": "However , because it is so simple , its relatively easy for people to learn how to use it .It has been used by many people in Aberdeen , and also for teaching .It is set up as a Java package , so it can only be used by Java programs .", "label": "", "metadata": {}, "score": "84.46069"}
{"text": "However , because it is so simple , its relatively easy for people to learn how to use it .It has been used by many people in Aberdeen , and also for teaching .It is set up as a Java package , so it can only be used by Java programs .", "label": "", "metadata": {}, "score": "84.46069"}
{"text": "However , because it is so simple , its relatively easy for people to learn how to use it .It has been used by many people in Aberdeen , and also for teaching .It is set up as a Java package , so it can only be used by Java programs .", "label": "", "metadata": {}, "score": "84.46069"}
{"text": "Furthermore , the MUG Workbench is helpful in debugging your grammars .Generates descriptions of entities and classes from OWL ontologies that have been annotated with linguistic and user modeling resources expressed in RDF .Currently supports English and Greek .Extensions for other languages welcome .", "label": "", "metadata": {}, "score": "85.81056"}
{"text": "Furthermore , the MUG Workbench is helpful in debugging your grammars .Generates descriptions of entities and classes from OWL ontologies that have been annotated with linguistic and user modeling resources expressed in RDF .Currently supports English and Greek .Extensions for other languages welcome .", "label": "", "metadata": {}, "score": "85.81056"}
{"text": "Furthermore , the MUG Workbench is helpful in debugging your grammars .Generates descriptions of entities and classes from OWL ontologies that have been annotated with linguistic and user modeling resources expressed in RDF .Currently supports English and Greek .Extensions for other languages welcome .", "label": "", "metadata": {}, "score": "85.81056"}
{"text": "Furthermore , the MUG Workbench is helpful in debugging your grammars .Generates descriptions of entities and classes from OWL ontologies that have been annotated with linguistic and user modeling resources expressed in RDF .Currently supports English and Greek .Extensions for other languages welcome .", "label": "", "metadata": {}, "score": "85.81056"}
{"text": "Furthermore , the MUG Workbench is helpful in debugging your grammars .Generates descriptions of entities and classes from OWL ontologies that have been annotated with linguistic and user modeling resources expressed in RDF .Currently supports English and Greek .Extensions for other languages welcome .", "label": "", "metadata": {}, "score": "85.81056"}
{"text": "Furthermore , the MUG Workbench is helpful in debugging your grammars .Generates descriptions of entities and classes from OWL ontologies that have been annotated with linguistic and user modeling resources expressed in RDF .Currently supports English and Greek .Extensions for other languages welcome .", "label": "", "metadata": {}, "score": "85.81056"}
{"text": "Furthermore , the MUG Workbench is helpful in debugging your grammars .Generates descriptions of entities and classes from OWL ontologies that have been annotated with linguistic and user modeling resources expressed in RDF .Currently supports English and Greek .Extensions for other languages welcome .", "label": "", "metadata": {}, "score": "85.81056"}
{"text": "Furthermore , the MUG Workbench is helpful in debugging your grammars .Generates descriptions of entities and classes from OWL ontologies that have been annotated with linguistic and user modeling resources expressed in RDF .Currently supports English and Greek .Extensions for other languages welcome .", "label": "", "metadata": {}, "score": "85.81056"}
{"text": "Furthermore , the MUG Workbench is helpful in debugging your grammars .Generates descriptions of entities and classes from OWL ontologies that have been annotated with linguistic and user modeling resources expressed in RDF .Currently supports English and Greek .Extensions for other languages welcome .", "label": "", "metadata": {}, "score": "85.81056"}
{"text": "Furthermore , the MUG Workbench is helpful in debugging your grammars .Generates descriptions of entities and classes from OWL ontologies that have been annotated with linguistic and user modeling resources expressed in RDF .Currently supports English and Greek .Extensions for other languages welcome .", "label": "", "metadata": {}, "score": "85.81056"}
{"text": "STANDUP .The STANDUP project ( System To Augment Non - speakers ' Dialogue Using Puns ) is a collaborative project on generating simple jokes from a graphical user interface appropriate for non - speaking children .The project began in October 2003 and ran until March 2007 .", "label": "", "metadata": {}, "score": "88.46982"}
{"text": "STANDUP .The STANDUP project ( System To Augment Non - speakers ' Dialogue Using Puns ) is a collaborative project on generating simple jokes from a graphical user interface appropriate for non - speaking children .The project began in October 2003 and ran until March 2007 .", "label": "", "metadata": {}, "score": "88.46982"}
{"text": "STANDUP .The STANDUP project ( System To Augment Non - speakers ' Dialogue Using Puns ) is a collaborative project on generating simple jokes from a graphical user interface appropriate for non - speaking children .The project began in October 2003 and ran until March 2007 .", "label": "", "metadata": {}, "score": "88.46982"}
{"text": "STANDUP .The STANDUP project ( System To Augment Non - speakers ' Dialogue Using Puns ) is a collaborative project on generating simple jokes from a graphical user interface appropriate for non - speaking children .The project began in October 2003 and ran until March 2007 .", "label": "", "metadata": {}, "score": "88.46982"}
{"text": "STANDUP .The STANDUP project ( System To Augment Non - speakers ' Dialogue Using Puns ) is a collaborative project on generating simple jokes from a graphical user interface appropriate for non - speaking children .The project began in October 2003 and ran until March 2007 .", "label": "", "metadata": {}, "score": "88.46982"}
{"text": "STANDUP .The STANDUP project ( System To Augment Non - speakers ' Dialogue Using Puns ) is a collaborative project on generating simple jokes from a graphical user interface appropriate for non - speaking children .The project began in October 2003 and ran until March 2007 .", "label": "", "metadata": {}, "score": "88.46982"}
{"text": "STANDUP .The STANDUP project ( System To Augment Non - speakers ' Dialogue Using Puns ) is a collaborative project on generating simple jokes from a graphical user interface appropriate for non - speaking children .The project began in October 2003 and ran until March 2007 .", "label": "", "metadata": {}, "score": "88.46982"}
{"text": "STANDUP .The STANDUP project ( System To Augment Non - speakers ' Dialogue Using Puns ) is a collaborative project on generating simple jokes from a graphical user interface appropriate for non - speaking children .The project began in October 2003 and ran until March 2007 .", "label": "", "metadata": {}, "score": "88.46982"}
{"text": "STANDUP .The STANDUP project ( System To Augment Non - speakers ' Dialogue Using Puns ) is a collaborative project on generating simple jokes from a graphical user interface appropriate for non - speaking children .The project began in October 2003 and ran until March 2007 .", "label": "", "metadata": {}, "score": "88.46982"}
{"text": "STANDUP .The STANDUP project ( System To Augment Non - speakers ' Dialogue Using Puns ) is a collaborative project on generating simple jokes from a graphical user interface appropriate for non - speaking children .The project began in October 2003 and ran until March 2007 .", "label": "", "metadata": {}, "score": "88.46982"}
{"text": "Suregen-2 .Suregen is \" a hybrid , ontology based and NLG - oriented formalism for generating text for documents in clinical medicine .\" The system Suregen-2 is written in ( Allegro ) Common Lisp .A demo system which runs under Windows is available for download .", "label": "", "metadata": {}, "score": "91.17361"}
{"text": "Suregen-2 .Suregen is \" a hybrid , ontology based and NLG - oriented formalism for generating text for documents in clinical medicine .\" The system Suregen-2 is written in ( Allegro ) Common Lisp .A demo system which runs under Windows is available for download .", "label": "", "metadata": {}, "score": "91.17361"}
{"text": "Suregen-2 .Suregen is \" a hybrid , ontology based and NLG - oriented formalism for generating text for documents in clinical medicine .\" The system Suregen-2 is written in ( Allegro ) Common Lisp .A demo system which runs under Windows is available for download .", "label": "", "metadata": {}, "score": "91.17361"}
{"text": "Suregen-2 .Suregen is \" a hybrid , ontology based and NLG - oriented formalism for generating text for documents in clinical medicine .\" The system Suregen-2 is written in ( Allegro ) Common Lisp .A demo system which runs under Windows is available for download .", "label": "", "metadata": {}, "score": "91.17361"}
{"text": "Suregen-2 .Suregen is \" a hybrid , ontology based and NLG - oriented formalism for generating text for documents in clinical medicine .\" The system Suregen-2 is written in ( Allegro ) Common Lisp .A demo system which runs under Windows is available for download .", "label": "", "metadata": {}, "score": "91.17361"}
{"text": "Suregen-2 .Suregen is \" a hybrid , ontology based and NLG - oriented formalism for generating text for documents in clinical medicine .\" The system Suregen-2 is written in ( Allegro ) Common Lisp .A demo system which runs under Windows is available for download .", "label": "", "metadata": {}, "score": "91.17361"}
{"text": "Suregen-2 .Suregen is \" a hybrid , ontology based and NLG - oriented formalism for generating text for documents in clinical medicine .\" The system Suregen-2 is written in ( Allegro ) Common Lisp .A demo system which runs under Windows is available for download .", "label": "", "metadata": {}, "score": "91.17361"}
{"text": "Suregen-2 .Suregen is \" a hybrid , ontology based and NLG - oriented formalism for generating text for documents in clinical medicine .\" The system Suregen-2 is written in ( Allegro ) Common Lisp .A demo system which runs under Windows is available for download .", "label": "", "metadata": {}, "score": "91.17361"}
{"text": "Suregen-2 .Suregen is \" a hybrid , ontology based and NLG - oriented formalism for generating text for documents in clinical medicine .\" The system Suregen-2 is written in ( Allegro ) Common Lisp .A demo system which runs under Windows is available for download .", "label": "", "metadata": {}, "score": "91.17361"}
{"text": "Suregen-2 .Suregen is \" a hybrid , ontology based and NLG - oriented formalism for generating text for documents in clinical medicine .\" The system Suregen-2 is written in ( Allegro ) Common Lisp .A demo system which runs under Windows is available for download .", "label": "", "metadata": {}, "score": "91.17361"}
{"text": "Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .GPL ( commercial dual licensing available upon request ) .Known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .", "label": "", "metadata": {}, "score": "94.11039"}
{"text": "Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .GPL ( commercial dual licensing available upon request ) .Known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .", "label": "", "metadata": {}, "score": "94.11039"}
{"text": "Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .GPL ( commercial dual licensing available upon request ) .Known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .", "label": "", "metadata": {}, "score": "94.11039"}
{"text": "Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .GPL ( commercial dual licensing available upon request ) .Known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .", "label": "", "metadata": {}, "score": "94.11039"}
{"text": "Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .GPL , known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .", "label": "", "metadata": {}, "score": "96.82454"}
{"text": "Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .GPL , known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .", "label": "", "metadata": {}, "score": "96.82454"}
{"text": "Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .GPL , known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .", "label": "", "metadata": {}, "score": "96.82454"}
{"text": "Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .GPL , known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .", "label": "", "metadata": {}, "score": "96.82454"}
{"text": "Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .GPL , known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .", "label": "", "metadata": {}, "score": "96.82454"}
{"text": "Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .GPL , known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .", "label": "", "metadata": {}, "score": "96.82454"}
{"text": "Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .GPL , known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .", "label": "", "metadata": {}, "score": "96.82454"}
