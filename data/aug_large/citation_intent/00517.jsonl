{"text": "r1 ?Match zero or one matches of r1 .The empty regular expression stands for the last complete .expression encountered .A regular expression in sam matches the .longest leftmost substring formally matched by the expression .Searching in the reverse direction is equivalent to searching backwards .", "label": "", "metadata": {}, "score": "50.31591"}
{"text": "RE-4a .RE-4b .The only interest here would be the use or priority to control .tex macro names which would match the same regexp .although an alternative would be to explicitly end each regexp with .a match for a non - letter ( as TeX macro names only consist of letters .", "label": "", "metadata": {}, "score": "50.70911"}
{"text": "RE-4a : Going from an XML unicode string to TeX : . replace & by \\ & .$ by \\$ .# 169 by \\copyright .# 322 by \\l .RE-4b : The reverse of this transformation .RE-5 : Calculation of \" dynamic \" regular expressions .", "label": "", "metadata": {}, "score": "51.36378"}
{"text": "For example : . matches any string that matches either ' ^P ' or ' [ 0 - 9 ] ' .This means it matches any string that starts with ' P ' or contains a digit .The alternation applies to the largest possible regexps on either side .", "label": "", "metadata": {}, "score": "51.50136"}
{"text": "Rather than first building an implicit sequence of substrings the . mechanism could be that as each regexp is matched against a substring . of the original string , a sequence is built as in the main proposal .with the string - before and string - after the match but in this case .", "label": "", "metadata": {}, "score": "52.29213"}
{"text": "Functions returns a boolean success status and sets sub - expres- . sion registers $ n . regsub ( string , regexp , subst ) .Search regular expression regexp from string string and replace .the matching substring with string subst .", "label": "", "metadata": {}, "score": "52.349907"}
{"text": "Another chapter deals factorizations of cyclic groups and the way that these factorizations can lead to the construction of maximal codes .Throughout this book , the authors use ideas from a wide range of mathematics .Probability spaces are involved , as are semisimple algebras and symbolic dynamics .", "label": "", "metadata": {}, "score": "52.752895"}
{"text": "For example : .[ d\\ ] ] .matches either 'd ' , or ' ] ' .This treatment of ' \\ ' in character lists is compatible with other awk implementations , and is also mandated by POSIX .", "label": "", "metadata": {}, "score": "53.701088"}
{"text": "\\y ' matches either ' ball ' or ' balls ' as a separate word .\\B .This operator matches the empty string within a word .In other words , ' \\B ' matches the empty string that occurs between two word - constituent characters .", "label": "", "metadata": {}, "score": "53.761757"}
{"text": "One way to do a case - insensitive match at a particular point in the program is to convert the data to a single case , using the tolower or toupper built - in string functions ( which we have n't discussed yet ; see section Built - in Functions for String Manipulation ) .", "label": "", "metadata": {}, "score": "54.001205"}
{"text": "y/ regexp / command .Like x , but run the command for each substring that lies before , . between , or after the matches that would be generated by x .There is no default behavior .Null substrings potentially occur .", "label": "", "metadata": {}, "score": "55.131798"}
{"text": "function ) and so the template could explicitly invoke .at some suitable point in its execution .In this model .would be the matched substring and position ( ) .would be ( say ) always 1 .V4 : Support for matching pairs .", "label": "", "metadata": {}, "score": "55.14798"}
{"text": "Will match addr1 and the N lines following addr1 .Will match addr1 and the lines following addr1 until the next .line whose input line number is a multiple of N .REGULAR EXPRESSIONS .POSIX.2 BREs should be supported , but they aren\u00e2\u20ac \u2122 t completely because of . performance problems .", "label": "", "metadata": {}, "score": "55.25624"}
{"text": "Will match addr1 and the N lines following addr1 .Will match addr1 and the lines following addr1 until the next .line whose input line number is a multiple of N .REGULAR EXPRESSIONS .POSIX.2 BREs should be supported , but they aren\u00e2\u20ac \u2122 t completely because of . performance problems .", "label": "", "metadata": {}, "score": "55.25624"}
{"text": "Will match addr1 and the N lines following addr1 .Will match addr1 and the lines following addr1 until the next .line whose input line number is a multiple of N .REGULAR EXPRESSIONS .POSIX.2 BREs should be supported , but they aren\u00e2\u20ac \u2122 t completely because of . performance problems .", "label": "", "metadata": {}, "score": "55.25624"}
{"text": "Only one backslash is needed .Given that you can use both regexp and string constants to describe regular expressions , which should you use ?The answer is \" regexp constants , \" for several reasons .String constants are more complicated to write , and more difficult to read .", "label": "", "metadata": {}, "score": "55.47175"}
{"text": "Densities ; 14 .Polynomials of finite codes ; Solutions of exercises ; Appendix : Research problems ; References ; Index of notation ; Index .This got a bit longer than perhaps is wise as an \" initial comment \" .", "label": "", "metadata": {}, "score": "55.47816"}
{"text": "To summarize : .The escape sequences in the table above are always processed first , for both string constants and regexp constants .This happens very early , as soon as awk reads your program .You can combine regular expressions with the following characters , called regular expression operators , or metacharacters , to increase the power and versatility of regular expressions .", "label": "", "metadata": {}, "score": "55.82847"}
{"text": "Characters described by octal and hexadecimal escape sequences are treated literally , even if they represent regexp metacharacters .--re - interval .Allow interval expressions in regexps , even if ' --traditional ' has been provided .Case is normally significant in regular expressions , both when matching ordinary characters ( i.e. not metacharacters ) , and inside character sets .", "label": "", "metadata": {}, "score": "55.867622"}
{"text": "List out the current line in a \u00e2\u20ac\u02dc\u00e2\u20ac\u02dcvisually unambiguous\u00e2\u20ac \u2122 \u00e2\u20ac \u2122 form , . breaking it at width characters .This is a GNU extension .n N Read / append the next line of input into the pattern space .", "label": "", "metadata": {}, "score": "55.94935"}
{"text": "for the string that matched the subexpression begun by the d -th . left parenthesis .If s is followed immediately by a number n , . as in s2/x / y/ , the n -th match in the range is substituted .", "label": "", "metadata": {}, "score": "56.33145"}
{"text": "Berstel and Perrin primarily choose to view a code as an embedding of one free monoid into another , allowing them to use algebraic techniques to study properties of variable length codes .More than two decades after Theory of Codes was released , the authors , along with Christophe Reutenauer , have completely reworked their book , and released Codes and Automata as an entry in Cambridge University Press 's \" Encyclopedia of Mathematics \" series .", "label": "", "metadata": {}, "score": "56.44904"}
{"text": "If there is one number followed by a comma , then the preceding regexp is repeated at least n times .matches ' whhhy ' but not ' why ' or ' whhhhy ' .matches ' whhhy ' or ' whhhhy ' or ' whhhhhy ' , only .", "label": "", "metadata": {}, "score": "56.730507"}
{"text": "( This is an extension . )$ Match the last line ./ regexp / .Match lines matching the regular expression regexp .\\ c regexp c .Match lines matching the regular expression regexp .The c may . be any character .", "label": "", "metadata": {}, "score": "57.02263"}
{"text": "Like the same construct in ANSI C , the escape sequence continues until the first non- hexadecimal digit is seen .However , using more than two hexadecimal digits produces undefined results .( The ' \\x ' escape sequence is not allowed in POSIX awk . )", "label": "", "metadata": {}, "score": "57.214645"}
{"text": "considered regular expressions like those following --regex .c .reads the regexes contained in the file regex.file .-R , --no - regex .Don\u00e2\u20ac \u2122 t do any more regexp matching on the following files .May . be freely intermixed with filenames and the --regex option .", "label": "", "metadata": {}, "score": "57.418003"}
{"text": "RE-5 .Given a top level param $ keyword containing a word to be highlighted .one or more construct should allow . string expression such as concat('\\b',$keyword,'\\b ' ) or an AVT .in order to construct the required regexp to match this word .", "label": "", "metadata": {}, "score": "57.50473"}
{"text": "$ Match the last line ./ regexp / .Match lines matching the regular expression regexp .\\ c regexp c .Match lines matching the regular expression regexp .The c may . be any character .GNU sed also supports some special 2-address forms : . 0 , addr2 .", "label": "", "metadata": {}, "score": "57.82498"}
{"text": "$ Match the last line ./ regexp / .Match lines matching the regular expression regexp .\\ c regexp c .Match lines matching the regular expression regexp .The c may . be any character .GNU sed also supports some special 2-address forms : . 0 , addr2 .", "label": "", "metadata": {}, "score": "57.82498"}
{"text": "$ Match the last line ./ regexp / .Match lines matching the regular expression regexp .\\ c regexp c .Match lines matching the regular expression regexp .The c may . be any character .GNU sed also supports some special 2-address forms : . 0 , addr2 .", "label": "", "metadata": {}, "score": "57.82498"}
{"text": "n Line n ./ regexp / ? regexp ?The substring that matches the regular expression , found by .looking toward the end ( / ) or beginning ( ? ) of the file , and if . necessary continuing the search from the other end to the . starting point of the search .", "label": "", "metadata": {}, "score": "58.022995"}
{"text": "For example : .[ 0 - 9 ] .matches any digit .Multiple ranges are allowed .E.g. , the list [ A - Za - z0 - 9 ] is a common way to express the idea of \" all alphanumeric characters . \"", "label": "", "metadata": {}, "score": "58.771915"}
{"text": "extensions , is that states is not line - oriented .It matches regular .expression tokens from the input and once a match is processed , it con- .tinues processing from the current position , not from the beginning of .", "label": "", "metadata": {}, "score": "58.85479"}
{"text": "This means that : . wh+y .For example : . fe?d .will match ' fed ' and ' fd ' , but nothing else .One or two numbers inside braces denote an interval expression .If there is one number in the braces , the preceding regexp is repeated n times .", "label": "", "metadata": {}, "score": "58.90136"}
{"text": "( as here ) this differs from the result of repeatedly calling the replace .function proposed in the F&O draft as that would , most naturally , apply . later regexp matching to the _ result _ of earlier matches .", "label": "", "metadata": {}, "score": "58.97367"}
{"text": "xab Z .c C .d D . then .Thus you could not , for example , start by replacing all abc by X. .RE-8 : Free format text input .This example is based on a ( real ) question in xsl - list .", "label": "", "metadata": {}, "score": "59.053635"}
{"text": "would be that the sequence resulting would \" just \" be a sequence of . strings , which would make it a first class object in the data model .Of course apply - regexp - templates would take any sequence of strings .", "label": "", "metadata": {}, "score": "59.09411"}
{"text": "and produce the string in ISO format 2002 - 01 - 17 suitable for coercing to .a dateTime , and being used with Xpath date expressions .RE-3 : Parsing a CSV file into an XML tree fragment .Given an input string . produce the tree fragment equivalent to . RE-4 : Multiple regexp - replace .", "label": "", "metadata": {}, "score": "59.10323"}
{"text": "p Print the current pattern space .P Print up to the first embedded newline of the current pattern . space .s/ regexp / replacement / .Attempt to match regexp against the pattern space .If success- . ful , replace that portion matched with replacement .", "label": "", "metadata": {}, "score": "59.18104"}
{"text": "It may be any expression .The expression is evaluated , and converted if necessary to a string ; the contents of the string are used as the regexp .A regexp that is computed in this way is called a dynamic regexp .", "label": "", "metadata": {}, "score": "59.309193"}
{"text": "These codes are particularly useful in real life applications , as they allow for easier decoding algorithms .The authors introduce a different set of methods in the ninth chapter , which they refer to as \" syntatic methods \" .In general , these involve looking at the monoid of relations associated to a given automaton , and considering computations related to these monoids rather than on the original elements .", "label": "", "metadata": {}, "score": "59.367786"}
{"text": "Convert argument to string . strncmp ( str1 , str2 , num ) .Perform a case - sensitive comparision for strings str1 and str2 . comparing at maximum num characters . substring ( str , start , end ) .Return a substring of string str starting from position start .", "label": "", "metadata": {}, "score": "59.373665"}
{"text": "This is called a character list .It matches any one of the characters that are enclosed in the square brackets .For example : . [MVX ] .matches any one of the characters ' M ' , ' V ' , or ' X ' in a string .", "label": "", "metadata": {}, "score": "59.387146"}
{"text": "Using regexp constants is better style ; it shows clearly that you intend a regexp match .", "label": "", "metadata": {}, "score": "59.482048"}
{"text": "The ' $ ' is also an anchor , and also does not match the end of a line embedded in a string .In this example the condition is not true : .For example : .P .matches any single character followed by a ' P ' in a string .", "label": "", "metadata": {}, "score": "59.587135"}
{"text": "To get to here .we just need to use standard XSLT constructs , for example this XSLT1 . stylesheet does the job .It is however noticeable that to handle the . nesting in this sequence the current XPath2 constructs are very . limited , primarily due to the lack of higher order functions .", "label": "", "metadata": {}, "score": "59.594723"}
{"text": "RE-6 : Nested structures .Input strings with arbitrary nested structure for example , well . regular languages and so can not ( by definition ) be parsed by a . single regular expression .However in many cases ( including all of .", "label": "", "metadata": {}, "score": "59.718204"}
{"text": "g and v do .not have defaults .Miscellany k Set the current file\u00e2\u20ac \u2122 s mark to the range .Does not set dot .It is an error to quit with modified files , but a second q will succeed .", "label": "", "metadata": {}, "score": "59.920547"}
{"text": "( These are Texinfo formatting control sequences . )This symbol means that the preceding regular expression is to be repeated as many times as necessary to find a match .For example : .This will also match just ' p ' if no ' h ' s are present .", "label": "", "metadata": {}, "score": "60.104767"}
{"text": "g G Copy / append hold space to pattern space .x Exchange the contents of the hold and pattern spaces .l List out the current line in a \u00e2\u20ac\u02dc\u00e2\u20ac\u02dcvisually unambiguous\u00e2\u20ac \u2122 \u00e2\u20ac \u2122 form .n N Read / append the next line of input into the pattern space .", "label": "", "metadata": {}, "score": "60.304855"}
{"text": "g G Copy / append hold space to pattern space .x Exchange the contents of the hold and pattern spaces .l List out the current line in a \u00e2\u20ac\u02dc\u00e2\u20ac\u02dcvisually unambiguous\u00e2\u20ac \u2122 \u00e2\u20ac \u2122 form .n N Read / append the next line of input into the pattern space .", "label": "", "metadata": {}, "score": "60.304855"}
{"text": "This would take two regexp match attributes/ The template would be .handed the intervening string as well as the two matching strings .The system would handle the necessary counting to ensure that .the start and end expressions were correctly paired . 7 ) Suggested solutions to the use cases .", "label": "", "metadata": {}, "score": "60.76098"}
{"text": "^ Match the null string immediately after a newline .$ Match the null string immediately before a newline .Any other character except newline matches itself .In the following , r1 and r2 are regular expressions .( r1 ) Match what r1 matches .", "label": "", "metadata": {}, "score": "60.765915"}
{"text": "( Similar to named . templates . )V1 and V2 produce ( at least for templates not using an implicit . setting of .or position ( ) ) the same results as the main proposal .The last variant has a different model of conflict resolution for . overlapping matches and will typically produce different a result given . similar looking regexp .", "label": "", "metadata": {}, "score": "60.869255"}
{"text": "They are introduced by a ' \\ ' .They are recognized and converted into the corresponding real characters as the very first step in processing regexps .Here is a table of metacharacters .All characters that are not escape sequences and that are not listed in the table stand for themselves .", "label": "", "metadata": {}, "score": "60.923306"}
{"text": "When the expression expr is . matched from the input , the statement block is executed .The statement .block can call states \u00e2\u20ac \u2122 primitives , user - defined subroutines , call other . states , etc .Once the block is executed , the input processing is con- .", "label": "", "metadata": {}, "score": "61.143658"}
{"text": "g/ regexp / command v/ regexp / command .If the range contains ( g ) or does not contain ( v ) a match for .the expression , set dot to the range and run the command .These may be nested arbitrarily deeply , but only one instance of either X or Y may appear in a single command .", "label": "", "metadata": {}, "score": "61.1626"}
{"text": "BUILTIN VARIABLES .current input line number $ n the n th parenthesized regular expression sub - expression from .the latest state regular expression or from the regmatch primi- . tive $ \u00e2\u20ac \u00e2 \u20ac \u02dc everything before the matched regular rexpression .", "label": "", "metadata": {}, "score": "61.24445"}
{"text": "unanchored and special characters will need to be introduced , for anchoring . to start and end of the string and/or lines ( ^ $ \\z and \\Z in perl regexp . syntax ) and possibly other meta characters or character classes will need . to be added , depending on perceived requirements .", "label": "", "metadata": {}, "score": "61.846138"}
{"text": "The template for this regexp would fire .Processing could either .then immediately proceed to the remaining substring , with the system .finding the longest initial match on the remainder , or processing .could effectively stop as soon as a match was found , with teh .", "label": "", "metadata": {}, "score": "62.00319"}
{"text": "This case differs from RE-4 as there is a strong left - to - right ( or at .least reading direction ) bias .Replacements should happen at the . start of the string .One possibe solution is to simply prefix all . regexp by a ^ character to denote the start of the string .", "label": "", "metadata": {}, "score": "62.050293"}
{"text": "For example a stylesheet might accept a word ( or list of .words ) as a parameter and build up the regexp adding word boundary .This string valued .expression should then be usable as a regular expression .( From a user perspective , all uses of regexp could be replaced by . string valued expressions ( or avt ) although efficiency and other .", "label": "", "metadata": {}, "score": "62.068707"}
{"text": "\\B ' is essentially the opposite of ' \\y ' .There are two other operators that work on buffers .In Emacs , a buffer is , naturally , an Emacs buffer .For other programs , the regexp library routines that gawk uses consider the entire string to be matched as the buffer .", "label": "", "metadata": {}, "score": "62.102966"}
{"text": "compatible with that of XML Schema , however I feel that the requirements of . searching and replacing substrings within a larger input string ( the . typical scenarios presented here ) are rather different from the . requirements for specifying regexp that fully match the ( typically smaller ) .", "label": "", "metadata": {}, "score": "62.103756"}
{"text": "may have to be specified ( and executed ) twice .Once as unanchored . regexps to tokenise the input string into a sequence of substrings , . and then again as anchored regexps to associate templates with each . of the matched substrings .", "label": "", "metadata": {}, "score": "62.112846"}
{"text": "RE-6a : TeX ( simplified ) .Convert .but with special case of .For example . to .RE-6b :Well formed XML markup .Parse a well formed XML instance that has no DOCTYPE , entity or . character references or attributes .", "label": "", "metadata": {}, "score": "62.185436"}
{"text": "This operator matches any word - constituent character , i.e. any letter , digit , or underscore .Think of it as a short - hand for [ [ : alnum : ] _ ] .\\W .This operator matches any character that is not word - constituent .", "label": "", "metadata": {}, "score": "62.194508"}
{"text": "This operator matches the empty string at the beginning of a word .This operator matches the empty string at the end of a word .\\y .This operator matches the empty string at either the beginning or the end of a word ( the word boundar y ) .", "label": "", "metadata": {}, "score": "62.219635"}
{"text": "This avoids having to build the sequence of strings \" associating \" .each one with a template , but it is harder to suggest good values .for . and position ( ) in this case .possibly y position ( ) should be 1 and . should be the original . string ( in the case that apply - regexp - templates was just given a . select expression of a single string .", "label": "", "metadata": {}, "score": "62.324234"}
{"text": "The backslash character itself is another character that can not be included normally ; you write ' \\\\ ' to put one backslash in the string or regexp .Thus , the string whose contents are the two characters ' \" ' and ' \\ ' must be written \" \\\"\\\\ \" .", "label": "", "metadata": {}, "score": "62.3329"}
{"text": "Typically this reduces the file . size by one fourth .This is the default behavior for ctags .Include a note in the tag file indicating that , when searching .for a tag , one should also consult the tags file file after .", "label": "", "metadata": {}, "score": "62.34443"}
{"text": "The first character after the ' [ ' must be a ' ^ ' .It matches any characters except those in the square brackets , or newline .For example : .[ ^0 - 9 ] .matches any character that is not a digit .", "label": "", "metadata": {}, "score": "62.54328"}
{"text": "A character class is only valid in a regexp inside the brackets of a character list .Character classes consist of ' [: ' , a keyword denoting the class , and ' :] ' .Here are the character classes defined by the POSIX standard .", "label": "", "metadata": {}, "score": "62.697914"}
{"text": "I am assuming here that the normal XSLT creation model is followed that ._ all _ replacements take place ( where possible , with a suitable priority . mechanism for controlling clashes ) on ( substrings of ) the original . string , and a new node tree is constructed .", "label": "", "metadata": {}, "score": "62.71763"}
{"text": "So a typical example , meeting the first use case , would be . of xx being copied into a div element in the output , with all new .line characters become html br elements .A new XSLT - specific XPath function current - match ( ) .", "label": "", "metadata": {}, "score": "62.77534"}
{"text": "Regular expressions .Regular expressions are as in regexp ( 7 g ) with the addition of \\n to . represent newlines .A regular expression may never contain a literal . newline character .The elements of regular expressions are : .", "label": "", "metadata": {}, "score": "62.960533"}
{"text": "It is important to realize that ' ^ ' does not match the beginning of a line embedded in a string .In this example the condition is not true : .This is similar to ' ^ ' , but it matches only at the end of a string .", "label": "", "metadata": {}, "score": "63.11521"}
{"text": "The simplest way to do a case - independent match is to use a character list : ' [ Ww ] ' .However , this can be cumbersome if you need to use it often ; and it can make the regular expressions harder to read .", "label": "", "metadata": {}, "score": "63.21489"}
{"text": "The substitution string subst can contain $ n ref- .erences to the n : th parenthesized sup - expression . regsuball ( string , regexp , subst ) .Like regsub but replace all matches of regular expression reg-exp from string string with string subst . split ( regexp , string ) .", "label": "", "metadata": {}, "score": "63.25003"}
{"text": "h H Copy / append pattern space to hold space .g G Copy / append hold space to pattern space .x Exchange the contents of the hold and pattern spaces .l List out the current line in a \u00e2\u20ac\u02dc\u00e2\u20ac\u02dcvisually unambiguous\u00e2\u20ac \u2122 \u00e2\u20ac \u2122 form .", "label": "", "metadata": {}, "score": "63.60358"}
{"text": "h H Copy / append pattern space to hold space .g G Copy / append hold space to pattern space .x Exchange the contents of the hold and pattern spaces .l List out the current line in a \u00e2\u20ac\u02dc\u00e2\u20ac\u02dcvisually unambiguous\u00e2\u20ac \u2122 \u00e2\u20ac \u2122 form .", "label": "", "metadata": {}, "score": "63.60358"}
{"text": "This is just a brief synopsis of sed commands to serve as a reminder to .those who already know sed ; other documentation ( such as the texinfo . document ) must be consulted for fuller descriptions .Zero - address \u00e2\u20ac\u00e2\u20ac\u02dc\u00e2\u20ac\u00e2\u20ac\u02dc commands \u00e2\u20ac\u00e2\u20ac \u2122 \u00e2\u20ac\u00e2\u20ac \u2122 .", "label": "", "metadata": {}, "score": "63.610382"}
{"text": "This is just a brief synopsis of sed commands to serve as a reminder to .those who already know sed ; other documentation ( such as the texinfo . document ) must be consulted for fuller descriptions .Zero - address \u00e2\u20ac\u00e2\u20ac\u02dc\u00e2\u20ac\u00e2\u20ac\u02dc commands \u00e2\u20ac\u00e2\u20ac \u2122 \u00e2\u20ac\u00e2\u20ac \u2122 .", "label": "", "metadata": {}, "score": "63.610382"}
{"text": "The octal value nnn , where nnn are one to three digits between ' 0 ' and ' 7 ' .For example , the code for the ASCII ESC ( escape ) character is ' \\033 ' .\\x hh ... .", "label": "", "metadata": {}, "score": "63.74385"}
{"text": "Record typedefs in C code as tags .Since this is the default .behaviour of etags , only ctags accepts this option .-T , --typedefs - and - c++ .Generate tag entries for typedefs , struct , enum , and union tags , . and C++ member functions .", "label": "", "metadata": {}, "score": "63.80845"}
{"text": "This is just a brief synopsis of sed commands to serve as a reminder to .those who already know sed ; other documentation ( such as the texinfo . document ) must be consulted for fuller descriptions .Zero - address \u00e2\u20ac \u00e2 \u20ac", "label": "", "metadata": {}, "score": "63.956024"}
{"text": "Make tags based on regexp matching for each line of the files .following this option , in addition to the tags made with the . standard parsing based on language .When using --regex , case is . significant , while it is not with --ignore - case - regex .", "label": "", "metadata": {}, "score": "64.02786"}
{"text": "\\nMatch newline .\\x For any character except n match the character ( here x ) .[ abc ] Match any character in the square brackets .\\n may be .mentioned .[ ^abc ] Match any character not in the square brackets , but never a . newline .", "label": "", "metadata": {}, "score": "64.07558"}
{"text": "In the introduction to their 1985 book Theory of Codes , Jean Berstel and Dominique Perrin write that the study of codes is \" ' the study of the properties concerning factorizations of words into a sequence of words taken from a given set .", "label": "", "metadata": {}, "score": "64.30447"}
{"text": "Taking same attributes and content as apply - templates .The select attribute should evaluate to a sequence of string - valued . items .If more than one string is in the sequence , the result is the . sequence produced by concatenating the result of processing each . string .", "label": "", "metadata": {}, "score": "64.46278"}
{"text": "the value of dot as a side effect .If so , it is always set to the .\u00e2\u20ac\u02dcresult\u00e2\u20ac \u2122 of the change : the empty string for a deletion , the new text .for an insertion , etc .", "label": "", "metadata": {}, "score": "64.55684"}
{"text": "The basic idea outlined in the proposal below is that the main task in .all the above use cases is the construction of a result tree given .some input .The construction aspects of the new functionality should .therefore be designed to match existing construction possibilities , .", "label": "", "metadata": {}, "score": "64.75335"}
{"text": "Parsing well formed XML does not really present any difficulties not . presented in the TeX case .The complication of macros taking more .does not occur , although the regexps would need to be extended to .deal with empty element syntax and attributes .", "label": "", "metadata": {}, "score": "64.805"}
{"text": "and the substring after .This continues , finally using a default .template of which matches every character \" ( . result is that the original string is now a sequence of . substrings each associated with a template whose match regexp .", "label": "", "metadata": {}, "score": "64.83022"}
{"text": "P Print up to the first embedded newline of the current pattern . space .s/ regexp / replacement / .Attempt to match regexp against the pattern space .If . successful , replace that portion matched with replacement .The replacement may contain the special character & to refer to that . portion of the pattern space which matched , and the special .", "label": "", "metadata": {}, "score": "64.91645"}
{"text": "P Print up to the first embedded newline of the current pattern . space .s/ regexp / replacement / .Attempt to match regexp against the pattern space .If . successful , replace that portion matched with replacement .The replacement may contain the special character & to refer to that . portion of the pattern space which matched , and the special .", "label": "", "metadata": {}, "score": "64.91645"}
{"text": "P Print up to the first embedded newline of the current pattern . space .s/ regexp / replacement / .Attempt to match regexp against the pattern space .If . successful , replace that portion matched with replacement .The replacement may contain the special character & to refer to that . portion of the pattern space which matched , and the special .", "label": "", "metadata": {}, "score": "64.91645"}
{"text": "matching the start of the input string with the longest possible match , . replacing this by the transliterated sequence , and then finding he .longest possible match at the start of the remaining string .Thus if abc transliterates to X and .", "label": "", "metadata": {}, "score": "64.95558"}
{"text": "The \\n sequence in a regular expression matches .the newline character , and similarly for \\a , \\t , and other sequences .BUGS .E - mail bug reports to bonzini@gnu.org .Be sure to include the word .\u00e2\u20ac\u02dc\u00e2\u20ac\u02dcsed\u00e2\u20ac \u2122 \u00e2\u20ac \u2122 somewhere in the \u00e2\u20ac\u02dc\u00e2\u20ac\u02dcSubject : \u00e2\u20ac \u2122 \u00e2\u20ac \u2122 field .", "label": "", "metadata": {}, "score": "65.024536"}
{"text": "the new rectangle should appear ( box cursor ) , and move the mouse .while holding down button 3 to the diagonally opposite corner .\u00e2\u20ac\u02dcSweeping\u00e2\u20ac \u2122 a null rectangle gets a large window , disjoint from .the command window or the whole sam window , depending on where .", "label": "", "metadata": {}, "score": "65.092606"}
{"text": "This should allow the input string . to be tokenised using regexp into a format in which the recursion .and/or counting required to handle the nested structure may be .handled by standard constructs in the language ( XPath or XSLT or .", "label": "", "metadata": {}, "score": "65.407585"}
{"text": "Collating Symbols .A collating symbol is a multi - character collating element enclosed in ' [ . ' and ' . ] ' For example , if ' ch ' is a collating element , then [ [ . ch . ] ] is a regexp that matches this collating element , while [ ch ] is a regexp that matches either ' c ' or ' h ' .", "label": "", "metadata": {}, "score": "65.43904"}
{"text": "Set dot .s/ regexp / text / .Substitute text for the first match to the regular expression in .the range .Set dot to the modified range .In text the . character & stands for the string that matched the expression .", "label": "", "metadata": {}, "score": "65.50357"}
{"text": "c \\ text Replace the selected lines with text , which has each embedded . newline preceded by a backslash .d Delete pattern space .Start next cycle .D Delete up to the first embedded newline in the pattern space .", "label": "", "metadata": {}, "score": "65.517044"}
{"text": "Or , equivalently to AVT , but with slightly . different syntax , the match attribute could take arbitrary xpath . expressions so long as they evaluated to a string that was a legal . regexp .( As another variant not further explored here one could .", "label": "", "metadata": {}, "score": "65.61391"}
{"text": "This is true if the expression exp ( taken as a string ) is matched by regexp .The following example matches , or selects , all input records with the upper - case letter ' J ' somewhere in the first field : .", "label": "", "metadata": {}, "score": "65.66698"}
{"text": "starting from the first address and continuing to the second address .Three things to note about address ranges : the syntax is addr1 , addr2 .( i.e. , the addresses are separated by a comma ) ; the line which addr1 . matched will always be accepted , even if addr2 selects an earlier line ; . and if addr2 is a regexp , it will not be tested against the line that addr1 matched .", "label": "", "metadata": {}, "score": "65.676506"}
{"text": "starting from the first address and continuing to the second address .Three things to note about address ranges : the syntax is addr1 , addr2 .( i.e. , the addresses are separated by a comma ) ; the line which addr1 . matched will always be accepted , even if addr2 selects an earlier line ; . and if addr2 is a regexp , it will not be tested against the line that addr1 matched .", "label": "", "metadata": {}, "score": "65.676506"}
{"text": "starting from the first address and continuing to the second address .Three things to note about address ranges : the syntax is addr1 , addr2 .( i.e. , the addresses are separated by a comma ) ; the line which addr1 . matched will always be accepted , even if addr2 selects an earlier line ; . and if addr2 is a regexp , it will not be tested against the line that addr1 matched .", "label": "", "metadata": {}, "score": "65.676506"}
{"text": "POSIX EREs are based on the regular expressions accepted by the traditional egrep utility .Character classes are a new feature introduced in the POSIX standard .A character class is a special notation for describing lists of characters that have a specific attribute , but where the actual characters themselves can vary from country to country and/or from character set to character set .", "label": "", "metadata": {}, "score": "65.73543"}
{"text": "It is essentially a grouping . problem although the new Grouping constructs in XSLT2 did n't seem .immediately applicable .As an alternative to adding general grouping .support for this kind of task it has been suggested that a special .", "label": "", "metadata": {}, "score": "65.75738"}
{"text": "This is used to suppress the special meaning of a character when matching .For example : . matches the ' @chapter ' at the beginning of a string , and can be used to identify chapter beginnings in Texinfo source files .", "label": "", "metadata": {}, "score": "65.95929"}
{"text": "This is the default .behavior for ctags .-g , --globals .Create tag entries for global variables in C , C++ , Objective C , .Java , and Perl .This is the default behavior for etags .-G , --no - globals .", "label": "", "metadata": {}, "score": "66.157425"}
{"text": "sequence is to be processed independently .A standed functional operator .such as fold would allow accumulation of information along the sequence .Here this problem is circumvented by first converting the sequence to .a tree so that the sibling - axis gives the required access , but this . seems at odds with the apparent desire to make such operations . possible at the sequence level .", "label": "", "metadata": {}, "score": "66.588776"}
{"text": "The regexps .are cumulative , i.e. each option will add to the previous ones .The regexps are of the form : / tagregexp [ / nameregexp ] / . where tagregexp is used to match the lines that must be tagged .", "label": "", "metadata": {}, "score": "66.66791"}
{"text": "This is true of any string valued expression ( such as identifier_regexp above ) , not just string constants .What difference does it make if the string is scanned twice ?The answer has to do with escape sequences , and particularly with backslashes .", "label": "", "metadata": {}, "score": "66.672195"}
{"text": "returns 1 if start state was resolved or 0 otherwise . check_startrules ( ) .Try to resolve start state from startrules rules .Function .returns 1 if start state was resolved or 0 otherwise .concat ( str , ... ) .", "label": "", "metadata": {}, "score": "67.100136"}
{"text": "Zero - address \u00e2\u20ac\u00e2\u20ac\u02dc\u00e2\u20ac\u00e2\u20ac\u02dc commands \u00e2\u20ac\u00e2\u20ac \u2122 \u00e2\u20ac\u00e2\u20ac \u2122 .: label .Label for b and t commands .# comment .The comment extends until the next newline ( or the end of a -e . script fragment ) . Zero- or One- address commands . a \\ text Append text , which has each embedded newline preceded by a .", "label": "", "metadata": {}, "score": "67.22052"}
{"text": "Return a sub - range of source starting from position start .( inclusively ) to end ( exclusively ) .Argument source can be . string or list . regexp ( string ) .Convert string string to a new regular expression . regexp_syntax ( char , syntax ) .", "label": "", "metadata": {}, "score": "67.355225"}
{"text": "Each file has an . associated name , usually the name of the external file from which it . was read , and a \u00e2\u20ac\u02dcmodified\u00e2\u20ac \u2122 bit that indicates whether the editor\u00e2\u20ac \u2122 s file .agrees with the external file .", "label": "", "metadata": {}, "score": "67.410995"}
{"text": "Now the focus is set such that this derived sequence is the current . sequence , and each of the associated regexp - templates is executed .in order with the current item being the matched substring and . position ( ) being the position in the derived sequence .", "label": "", "metadata": {}, "score": "67.44363"}
{"text": "For example , this prints the second field of each record that contains the three characters ' foo ' anywhere in it : .Regular expressions can also be used in matching expressions .These expressions allow you to specify the string to match against ; it need not be the entire current input record .", "label": "", "metadata": {}, "score": "67.58453"}
{"text": "normalisation , as presumably ( ? ) is the case for the unparsed - text ( ) .function . )It does however demonstrate the need to generate element nodes .at positions determined by searching a string . RE-2 : Natural language date strings .", "label": "", "metadata": {}, "score": "67.706604"}
{"text": "The following example matches , or selects , all input records whose first field does not contain the upper - case letter ' J ' : .$ awk ' $ 1 !When a regexp is written enclosed in slashes , like /foo/ , we call it a regexp constant , much like 5.27 is a numeric constant , and \" foo \" is a string constant .", "label": "", "metadata": {}, "score": "67.71826"}
{"text": "This is a GNU extension .c \\ text Replace the selected lines with text , which has each embedded . newline preceded by a backslash .d Delete pattern space .Start next cycle .D Delete up to the first embedded newline in the pattern space .", "label": "", "metadata": {}, "score": "67.79552"}
{"text": "While there is nothing to stop you from entering most unprintable characters directly in a string constant or regexp constant , they may look ugly .Here is a table of all the escape sequences used in awk , and what they represent .", "label": "", "metadata": {}, "score": "67.841515"}
{"text": "Addresses .An address identifies a substring in a file .In the following , .\u00e2\u20ac\u02dccharacter n \u00e2\u20ac \u2122 means the null string after the n -th character in the .file , with 1 the first character in the file .", "label": "", "metadata": {}, "score": "67.93953"}
{"text": "One of the main issues raised by the use cases to be presented here is the .requirement to build a tree fragment ( as opposed to a string ) based on the . matching ( or not ) of regular expressions to an input string .", "label": "", "metadata": {}, "score": "68.128914"}
{"text": "following the switch according to the given language , overriding guess- .es based on filename extensions .OPTIONS .Some options make sense only for the vi style tag files produced by .ctags ; etags does not recognize them .", "label": "", "metadata": {}, "score": "68.13953"}
{"text": "e always sets the file name , r and w do so if the file has no . name .Replace the range by the standard output of the shell command .Sends the range to the standard input of the shell command .", "label": "", "metadata": {}, "score": "68.37935"}
{"text": "This is similar to 1 , addr2 , except that if addr2 matches .the very first line of input the 0 , addr2 form will be at the end . of its range , whereas the 1 , addr2 form will still be at the . beginning of its range .", "label": "", "metadata": {}, "score": "68.49166"}
{"text": "This is similar to 1 , addr2 , except that if addr2 matches .the very first line of input the 0 , addr2 form will be at the end . of its range , whereas the 1 , addr2 form will still be at the . beginning of its range .", "label": "", "metadata": {}, "score": "68.49166"}
{"text": "This is similar to 1 , addr2 , except that if addr2 matches .the very first line of input the 0 , addr2 form will be at the end . of its range , whereas the 1 , addr2 form will still be at the . beginning of its range .", "label": "", "metadata": {}, "score": "68.49166"}
{"text": "nested structure which is beyond what is possible with a single .regexp .Existing XSLT facilities are sufficient to \" fill the gap \" . providing the necessary arithmetic and state to handle the nested .parse tree .However one could consider adding faclities to make the .", "label": "", "metadata": {}, "score": "68.5029"}
{"text": "the same terminal to load the named files .The option allows a line .number to be specified for the initial position to display in the last .named file .FILES .The word \" code \" means different things to different people , even within mathematics .", "label": "", "metadata": {}, "score": "68.53079"}
{"text": "The opening chapter of the book is extremely elementary , setting notation and giving definitions along with a quick tour through many of the areas of mathematics that they will call on in the later chapters .The next seven chapters of the book concern what the authors call \" direct methods \" , which primarily involve looking at the combinatorics on words and an analysis of the factoring of elements of a free monoid .", "label": "", "metadata": {}, "score": "68.55437"}
{"text": "expression .addr1 , + N .Will match addr1 and the N lines following addr1 .Will match addr1 and the lines following addr1 until the next .line whose input line number is a multiple of N .REGULAR EXPRESSIONS .", "label": "", "metadata": {}, "score": "68.71127"}
{"text": "the match - string ( ) function described above .d. The resulting sequence is the concatenation of the results of each . of these templates .6 ) Variants on the propsosal .This section discusses some variants on the above .", "label": "", "metadata": {}, "score": "68.737305"}
{"text": "escapes \\1 through \\9 to refer to the corresponding matching . sub - expressions in the regexp .w filename .Write the current pattern space to filename .W filename .Write the first line of the current pattern space to filename .", "label": "", "metadata": {}, "score": "68.8451"}
{"text": "in the way conflicting regexp matches need to be handled .For multiple .regexp matching above one needs a priority mechanism so that certain .regexp are matched first and lower priority regexp are only applied to .remaining strings .", "label": "", "metadata": {}, "score": "68.98299"}
{"text": "Create tag entries for C preprocessor constant definitions and . enum constants , too .This is the default behavior for etags .-D , --no - defines .Do not create tag entries for C preprocessor constant defini- . tions and enum constants .", "label": "", "metadata": {}, "score": "69.05821"}
{"text": "For example convert the input xml .To .RE-6c : HTML Markup .As above but with HTML , in particular with implied end tags .In general .this requires a DTD and knowledge of SGML omitted tag rules .", "label": "", "metadata": {}, "score": "69.09101"}
{"text": "These apply to non - ASCII character sets , which can have single symbols ( called collating elements ) that are represented with more than one character , as well as several characters that are equivalent for collating , or sorting , purposes .", "label": "", "metadata": {}, "score": "69.14389"}
{"text": "If the match is such .that more characters than needed are unavoidably matched by tagregexp , it may be useful to add a nameregexp , to narrow down .the tag scope .ctags ignores regexps without a nameregexp .The . syntax of regexps is the same as in emacs , augmented with inter- .", "label": "", "metadata": {}, "score": "69.32968"}
{"text": "You represent them instead with escape sequences , which are character sequences beginning with a backslash ( ' \\ ' ) .One use of an escape sequence is to include a double - quote character in a string constant .Since a plain double - quote would end the string , you must use ' \\ \" ' to represent an actual double - quote character as a part of the string .", "label": "", "metadata": {}, "score": "69.45565"}
{"text": "This options is only accepted by etags .-I , --ignore - indentation .Don\u00e2\u20ac \u2122 t rely on indentation as much as we normally do .Currently , . this means not to assume that a closing brace in the first col- .", "label": "", "metadata": {}, "score": "69.53984"}
{"text": "Start out in \" matched first address \" state , until addr2 is . found .This is similar to 1 , addr2 , except that if addr2 matches .the very first line of input the 0 , addr2 form will be at the end . of its range , whereas the 1 , addr2 form will still be at the . beginning of its range .", "label": "", "metadata": {}, "score": "69.576065"}
{"text": "Possible values for syntax .are : . \u00e2\u20ac \u00e2 \u20ac\u2122 w \u00e2\u20ac \u00e2 \u20ac\u2122 character is a word constituent .\u00e2\u20ac \u00e2 \u20ac\u2122 \u00e2\u20ac \u00e2 \u20ac\u2122 character isn\u00e2\u20ac \u2122 t a word constituent regmatch ( string , regexp ) .", "label": "", "metadata": {}, "score": "69.605606"}
{"text": "Note this assumes that ^ .and $ are line based even within a larger . string .( This is like emacs regexp , but unlike sed .Perl has a . switch that allows ^ and $ to change between matching ends of lines .", "label": "", "metadata": {}, "score": "69.66266"}
{"text": "The simplest regular expression is a sequence of letters , numbers , or both .Such a regexp matches any string that contains that sequence .Thus , the regexp ' foo ' matches any string containing ' foo ' .Therefore , the pattern /foo/ matches any input record containing the three characters ' foo ' , anywhere in the record .", "label": "", "metadata": {}, "score": "69.92898"}
{"text": "Rather than match regexp in priority - order , an alternative matching . scheme would be to start from the start of the string and find the .longest possible match from all the templates under consideration .priority specifications would choose between regexps if more than .", "label": "", "metadata": {}, "score": "70.044846"}
{"text": "It is quite .likely that Xquery will require similar functionality , and in Xquery a .function form may be natural , but this note concentrates on XSLT and . suggests an extension of the XSLT template mechanism .This should not .", "label": "", "metadata": {}, "score": "70.06574"}
{"text": "Initially , the examples will be simple .As we explain more about how regular expressions work , we will present more complicated examples .A regular expression can be used as a pattern by enclosing it in slashes .Then the regular expression is tested against the entire text of each record .", "label": "", "metadata": {}, "score": "70.08683"}
{"text": "-a , --append .Append to existing tag file .( For vi -format tag files , see also --update . )-B , --backward - search .Tag files written in the format expected by vi contain regular .expression search instructions ; the -B option writes them using .", "label": "", "metadata": {}, "score": "70.231"}
{"text": "\u00e2\u20ac \u2122 , to search backwards through files .The de- .fault is to use the delimiter \u00e2\u20ac\u02dc / \u00e2\u20ac \u2122 , to search forwards through . files .Only ctags accepts this option . --declarations .In C and derived languages , create tags for function declara- . tions , and create tags for extern variables unless --no - globals . is used .", "label": "", "metadata": {}, "score": "70.26587"}
{"text": "A literal slash ( necessary for regexp constants only ) .You use this when you wish to write a regexp constant that contains a slash .Since the regexp is delimited by slashes , you need to escape the slash that is part of the pattern , in order to tell awk to keep processing the rest of the regexp .", "label": "", "metadata": {}, "score": "70.512375"}
{"text": "-n , --quiet , --silent . specify the desired line - wrap length for the \u00e2\u20ac\u02dcl\u00e2\u20ac \u2122 command --posix .disable all GNU extensions .-r , --regexp - extended .use extended regular expressions in the script .-s , --separate .", "label": "", "metadata": {}, "score": "70.54335"}
{"text": "-n , --quiet , --silent . specify the desired line - wrap length for the \u00e2\u20ac\u02dcl\u00e2\u20ac \u2122 command --posix .disable all GNU extensions .-r , --regexp - extended .use extended regular expressions in the script .-s , --separate .", "label": "", "metadata": {}, "score": "70.54335"}
{"text": "-n , --quiet , --silent . specify the desired line - wrap length for the \u00e2\u20ac\u02dcl\u00e2\u20ac \u2122 command --posix .disable all GNU extensions .-r , --regexp - extended .use extended regular expressions in the script .-s , --separate .", "label": "", "metadata": {}, "score": "70.54335"}
{"text": "the newline character , and similarly for \\a , \\t , and other sequences .BUGS .E - mail bug reports to bonzini@gnu.org .Be sure to include the word .\u00e2\u20ac\u02dc\u00e2\u20ac\u02dcsed\u00e2\u20ac \u2122 \u00e2\u20ac \u2122 somewhere in the \u00e2\u20ac\u02dc\u00e2\u20ac\u02dcSubject : \u00e2\u20ac \u2122 \u00e2\u20ac \u2122 field .", "label": "", "metadata": {}, "score": "70.67405"}
{"text": "the newline character , and similarly for \\a , \\t , and other sequences .BUGS .E - mail bug reports to bonzini@gnu.org .Be sure to include the word .\u00e2\u20ac\u02dc\u00e2\u20ac\u02dcsed\u00e2\u20ac \u2122 \u00e2\u20ac \u2122 somewhere in the \u00e2\u20ac\u02dc\u00e2\u20ac\u02dcSubject : \u00e2\u20ac \u2122 \u00e2\u20ac \u2122 field .", "label": "", "metadata": {}, "score": "70.67405"}
{"text": "the newline character , and similarly for \\a , \\t , and other sequences .BUGS .E - mail bug reports to bonzini@gnu.org .Be sure to include the word .\u00e2\u20ac\u02dc\u00e2\u20ac\u02dcsed\u00e2\u20ac \u2122 \u00e2\u20ac \u2122 somewhere in the \u00e2\u20ac\u02dc\u00e2\u20ac\u02dcSubject : \u00e2\u20ac \u2122 \u00e2\u20ac \u2122 field .", "label": "", "metadata": {}, "score": "70.67405"}
{"text": "RE-1 .As commented above this does n't use regexp but is a natural simple . example , that is quite hard to do in XSLT1 ( or even XSLT2 as .currently drafted )If the input string has not been through an XML . parser ( as will be possible in XSLT2 ) then even this case might .", "label": "", "metadata": {}, "score": "70.741974"}
{"text": "Label for b and t commands .# comment .The comment extends until the next newline ( or the end of a -e . script fragment ) . Zero- or One- address commands . a \\ text Append text , which has each embedded newline preceded by a .", "label": "", "metadata": {}, "score": "70.833496"}
{"text": "Label for b and t commands .# comment .The comment extends until the next newline ( or the end of a -e . script fragment ) . Zero- or One- address commands . a \\ text Append text , which has each embedded newline preceded by a .", "label": "", "metadata": {}, "score": "70.833496"}
{"text": "d Delete pattern space .Start next cycle .D Delete up to the first embedded newline in the pattern space .Start next cycle , but skip reading from the input if there is . still data in the pattern space .", "label": "", "metadata": {}, "score": "70.898476"}
{"text": "d Delete pattern space .Start next cycle .D Delete up to the first embedded newline in the pattern space .Start next cycle , but skip reading from the input if there is . still data in the pattern space .", "label": "", "metadata": {}, "score": "70.898476"}
{"text": "/ regexp .Search forward for the next match of the last regular expression .typed in a command .( Not in command window . ) send Send the text in dot , or the snarf buffer if dot is the null . string , as if it were typed to the command window .", "label": "", "metadata": {}, "score": "70.912865"}
{"text": "priority scheme would enforce an ordering ( either implementation . defined or order in stylesheet ) ( to be decided ) .For each template in turn , starting with highest priority , .the regexp is matched on the subsequences of the original input . string that have yet to be matched .", "label": "", "metadata": {}, "score": "70.92827"}
{"text": "$ The null string at the end of the file .Dot .\u00e2\u20ac\u00e2\u20ac \u2122 The mark in the file ( see the k command below ) . \" regexp \" .Preceding a simple address ( default . ) , refers to the address .", "label": "", "metadata": {}, "score": "71.03371"}
{"text": "RE-6c .As mentioned above , the general case of parsing HTML is out of scope .however simple cases of omitted tags could be dealt with using the . priority attribute on templates .case where the end tag was explicit , and a lower priority template .", "label": "", "metadata": {}, "score": "71.11748"}
{"text": "If no files are named , the . current file is deleted .It is an error to D a modified file , but a . subsequent D will delete such a file .I / O Commands .Replace the file by the contents of the named external file .", "label": "", "metadata": {}, "score": "71.12353"}
{"text": "i \\ text Insert text , which has each embedded newline preceded by a . backslash . q Immediately quit the sed script without processing any more .input , except that if auto - print is not disabled the current . pattern space will be printed .", "label": "", "metadata": {}, "score": "71.12633"}
{"text": "i \\ text Insert text , which has each embedded newline preceded by a . backslash . q Immediately quit the sed script without processing any more .input , except that if auto - print is not disabled the current . pattern space will be printed .", "label": "", "metadata": {}, "score": "71.12633"}
{"text": "Some other awk implementations do this .In such implementations , \" a\\qc \" is the same as if you had typed \" a\\\\qc \" .In a regexp , a backslash before any character that is not in the above table , and not listed in section Additional Regexp Operators Only in gawk , means that the next character should be taken literally , even if it would normally be a regexp operator .", "label": "", "metadata": {}, "score": "71.137924"}
{"text": "V1 : Tokenise Function .It would be possible to make the implicit splitting up of the input . string into a sequence of substrings explicit .would be replaced by .where regexp - tokenise would a set of regexp 's ( specified by a method . to be determined ) and split up the string as above .", "label": "", "metadata": {}, "score": "71.14137"}
{"text": "and if it is a regular expression , it is matched to the input , other- .wise that rule is ignored .The states program file can also have top - level expressions , they are . evaluated after the program file is parsed but before any input files .", "label": "", "metadata": {}, "score": "71.168625"}
{"text": "The authors describe techniques of constructing codes with various nice properties and show how to use automata to realize these codes .The authors treat both theoretical and algorithmic aspects of the subjects , and the book is littered with explicit examples as well .", "label": "", "metadata": {}, "score": "71.18408"}
{"text": "hope that specific simple cases may be handled for example : .Convert a list . to . RE-7: Transliteration .Take an input string in AMS cyrillic transliteration scheme and convert . to Unicode characters .The exact scheme will be omitted here but the .", "label": "", "metadata": {}, "score": "71.49898"}
{"text": "b. If a mode is supplied all regexp - templates in that mode are now . consided , otherwise all the regexp templates in the default mode . are considered .c. The templates being considered are then ordered by priority .", "label": "", "metadata": {}, "score": "71.5086"}
{"text": "Thus in my examples below I will use extended regexp syntax if this seems . appropriate staying compatible with perl wherever possible , ( although .personally , I 'm more familiar with the slightly different emacs . conventions ) .", "label": "", "metadata": {}, "score": "71.61762"}
{"text": "These features are very valuable in non - English speaking locales .Caution : The library functions that gawk uses for regular expression matching currently only recognize POSIX character classes ; they do not recognize collating symbols or equivalence classes .[ ^ ... ] .", "label": "", "metadata": {}, "score": "71.74492"}
{"text": "These operators are described in this section , and are specific to gawk ; they are not available in other awk implementations .Most of the additional operators are for dealing with word matching .For our purposes , a word is a sequence of one or more letters , digits , or underscores ( ' _ ' ) .", "label": "", "metadata": {}, "score": "71.798164"}
{"text": "major distinguishing features between the two languages .David Carlisle . 2 ) Contents . 1 ) Abstract . 2 ) Contents . 3 ) Regexp Syntax .4 ) Use Cases .5 ) Possible XSLT2 Regexp syntax .6 ) Variants on the propsosal . 7 ) Suggested solutions to the use cases . 3 ) Regexp Syntax .", "label": "", "metadata": {}, "score": "71.85874"}
{"text": "It . is often faster to simply rebuild the entire tag file than to .use this .Only ctags accepts this option .-v , --vgrind .Instead of generating a tag file , write index ( in vgrind format ) .", "label": "", "metadata": {}, "score": "72.04947"}
{"text": "C and C++ .Parse the following files according to the given language .More . than one such options may be intermixed with filenames .Use --help to get a list of the available languages and their de- .fault filename extensions .", "label": "", "metadata": {}, "score": "72.11689"}
{"text": "As in the main proposal . and position ( ) etc would reflect the . position of the matched item in the input sequence .The advantage of this model is that the sequence is made explicit . as a standard XPath sequence .", "label": "", "metadata": {}, "score": "72.12155"}
{"text": "practice that would be most common ) .In this model the semantics of the match expression in . is slightly different .rather than matching on a substring of some .input string , it would be an _ anchored _ match and the template would .", "label": "", "metadata": {}, "score": "72.56114"}
{"text": "Loops and Conditionals x/ regexp / command .For each match of the regular expression in the range , run the .command with dot set to the match .Set dot to the last match .If the regular expression and its slashes are omitted , is . assumed .", "label": "", "metadata": {}, "score": "72.72568"}
{"text": "-n , --quiet , --silent .add the contents of script - file to the commands to be executed --follow - symlinks .specify the desired line - wrap length for the \u00e2\u20ac\u02dcl\u00e2\u20ac \u2122 command --posix .disable all GNU extensions .", "label": "", "metadata": {}, "score": "72.780304"}
{"text": "-s file .Start the host part from the indicated file on the remote host .Only meaningful with the -r option .-t path .Start the terminal part from the indicated file .Useful for . debugging .The standard X11 -geom toolkit option can be used to select the desired .", "label": "", "metadata": {}, "score": "72.86893"}
{"text": "When entering a pattern containing .a literal question mark for a backward search , the question mark . should be specified as a member of a class . 0The string before the first full line .This is not necessarily .", "label": "", "metadata": {}, "score": "72.97438"}
{"text": "General help .E - mail bug reports .Be sure to include the word \u00e2\u20ac\u02dc\u00e2\u20ac\u02dcsed\u00e2\u20ac \u2122 \u00e2\u20ac \u2122 .somewhere in the \u00e2\u20ac\u02dc\u00e2\u20ac\u02dcSubject : \u00e2\u20ac \u2122 \u00e2\u20ac \u2122 field .NAME .sam - screen editor with structural regular expressions .", "label": "", "metadata": {}, "score": "72.99789"}
{"text": "restore automatic detection of language based on the file name .The \u00e2\u20ac\u02dcnone\u00e2\u20ac \u2122 language may be used to disable language parsing al- .together ; only regexp matching is done in this case ( see the --regex option ) .-m , --members .", "label": "", "metadata": {}, "score": "73.07849"}
{"text": "\u2122 \u00e2\u20ac \u00e2 \u20ac\u2122 .: label .Label for b and t commands .# comment .The comment extends until the next newline ( or the end of a -e . script fragment ) . Zero- or One- address commands . a \\ text Append text , which has each embedded newline preceded by a back- . slash .", "label": "", "metadata": {}, "score": "73.2114"}
{"text": "the address ( or address - range ) does not match .The following address types are supported : number Match only the specified line number .Match every step \u00e2\u20ac \u2122 th line starting with line first .For example , . starting with the second .", "label": "", "metadata": {}, "score": "73.34202"}
{"text": "the address ( or address - range ) does not match .The following address types are supported : number Match only the specified line number .Match every step \u00e2\u20ac \u2122 th line starting with line first .For example , . starting with the second .", "label": "", "metadata": {}, "score": "73.34202"}
{"text": "the address ( or address - range ) does not match .The following address types are supported : number Match only the specified line number .Match every step \u00e2\u20ac \u2122 th line starting with line first .For example , . starting with the second .", "label": "", "metadata": {}, "score": "73.34202"}
{"text": "the address ( or address - range ) does not match .The following address types are supported : number Match only the specified line number .Match every step \u00e2\u20ac \u2122 th line starting with line first .For example , . starting with the second .", "label": "", "metadata": {}, "score": "73.34202"}
{"text": "The answer causes writing ; anything else skips the . file .If a machine crash prevents the creation of a file , all changes .are lost .If an editing session is difficult to replicate , you should .write your changed files often .", "label": "", "metadata": {}, "score": "73.40686"}
{"text": "-h , --help .Print short help message and exit .Save output to file file instead of printing it to stdout .Start execution from state state .This definition overwrites . start state resolved from the start block .-V , --version .", "label": "", "metadata": {}, "score": "73.50517"}
{"text": "SEE ALSO .awk(1 ) , ed(1 ) , grep(1 ) , tr(1 ) , perlre(1 ) , sed.info , any of various .The full documentation for sed is maintained as a Texinfo manual .If . the info and sed programs are properly installed at your site , the com- .", "label": "", "metadata": {}, "score": "73.519516"}
{"text": "General help .E - mail bug reports .Be sure to include the word \u00e2\u20ac\u02dc\u00e2\u20ac\u02dcsed\u00e2\u20ac \u2122 \u00e2\u20ac \u2122 .somewhere in the \u00e2\u20ac\u02dc\u00e2\u20ac\u02dcSubject : \u00e2\u20ac \u2122 \u00e2\u20ac \u2122 field .COMMAND SYNOPSIS .This is just a brief synopsis of sed commands to serve as a reminder to .", "label": "", "metadata": {}, "score": "73.52687"}
{"text": "( ) ; .Once the start block is processed , the input processing is continued .from the initial state .The initial state is resolved by the information found from the startrules and namerules blocks .Both blocks contain regular expres- . sion - symbol pairs , when the regular expression is matched from the .", "label": "", "metadata": {}, "score": "73.61906"}
{"text": "expression in the file .( The form 0;// sets dot unnecessarily . ) / regexp /// finds the second following occurrence of the expression , . and . , / regexp / extends dot .Commands .In the following , text demarcated by slashes represents text delimited . by any printable ASCII character except alphanumerics .", "label": "", "metadata": {}, "score": "73.7026"}
{"text": "It finds as many repetitions as possible .For example : . prints every record in ' sample ' containing a string of the form ' ( car x ) ' , ' ( cdr x ) ' , ' ( cadr x ) ' , and so on .", "label": "", "metadata": {}, "score": "73.726456"}
{"text": "SEE ALSO .AUTHOR .Markku Rossi GNU Enscript WWW home page : STATES Jun 6 , 1997 STATES(1 )A regular expression , or regexp , is a way of describing a set of strings .Because regular expressions are such a fundamental part of awk programming , their format and use deserve a separate chapter .", "label": "", "metadata": {}, "score": "73.8423"}
{"text": "DESCRIPTION .The etags program is used to create a tag table file , in a format un- .derstood by emacs(1 ) ; the ctags program is used to create a similar ta- .ble in a format understood by vi(1 ) .", "label": "", "metadata": {}, "score": "74.04214"}
{"text": "to specify that the argument should be a single string if that proves . to be a useful simplification .Taking a mandatory match attribute .optional priority attribute .and optional mode attribute .The mode attribute works as for xsl : template , if xsl : apply - regexp . templates specifies a mode then only regexp - templates 's declared for .", "label": "", "metadata": {}, "score": "74.06041"}
{"text": "David .Regular expression support in XPath / XSLT / Xquery .1)Abstract .This note proposes the addition of support for regular expressions in XSLT 2 . beyond that currently proposed by the functions in the XPath 2 draft .It is loosely based on discussions on and off xsl - list , principally with .", "label": "", "metadata": {}, "score": "74.24988"}
{"text": "All the regexps are quoted to protect .them from shell interpretation .Tag VHDL files ( this example is a single long line , broken here . lines of files of the specified language .Use etags --help to . obtain a list of the recognised languages .", "label": "", "metadata": {}, "score": "74.2539"}
{"text": "Not understanding the difference between the two kinds of constants is a common source of errors .It is also more efficient to use regexp constants : awk can note that you have supplied a regexp and store it internally in a form that makes pattern matching more efficient .", "label": "", "metadata": {}, "score": "74.32367"}
{"text": "The match attribute takes a regular expression , ie a restricted form . of string .It is assumed here that these are essentially fixed . strings , if implementation / efficiency concerns allow they could .perhaps be attribute value templates to allow more dynamic choice in .", "label": "", "metadata": {}, "score": "74.363304"}
{"text": "ticularly useful inside regex files .A regex file contains one . regex per line .Empty lines , and those lines beginning with . space or tab are ignored .Lines beginning with @ are references . to regex files whose name follows the @ sign .", "label": "", "metadata": {}, "score": "74.58903"}
{"text": "If ^ always .denotes the start of the original string then prefixing all the . transliteration replacements by ^ would clearly not have the desired .effect and only the initial characters in teh original string would . be replaced .", "label": "", "metadata": {}, "score": "74.71239"}
{"text": "Some people have suggested that XSLT should be directly extended to .support the specification of more general grammars , in the style of .lex / yacc .But the proposal here is that regexp support , if sufficiently . integrated into the existing functionality of the language , should be able .", "label": "", "metadata": {}, "score": "74.71338"}
{"text": "If your character set had other alphabetic characters in it , this would not match them .With the POSIX character classes , you can write /[[:alnum:]]/ , and this will match all the alphabetic and numeric characters in your character set .", "label": "", "metadata": {}, "score": "74.78992"}
{"text": "If a s/// has done a successful substitution since the last .input line was read and since the last t or T command , then .branch to label ; if label is omitted , branch to end of script .", "label": "", "metadata": {}, "score": "74.793884"}
{"text": "If a s/// has done a successful substitution since the last .input line was read and since the last t or T command , then .branch to label ; if label is omitted , branch to end of script .", "label": "", "metadata": {}, "score": "74.793884"}
{"text": "recorded in the tag table with file names relative to the directory .where the tag table resides .Files specified with absolute file names .will be recorded with absolute file names .The programs recognize the .language used in an input file based on its file name and contents .", "label": "", "metadata": {}, "score": "74.982895"}
{"text": "Q [ exit - code ] .Immediately quit the sed script without processing any more . input .This is a GNU extension .r filename .Append text read from filename .R filename .Append a line read from filename .", "label": "", "metadata": {}, "score": "74.99527"}
{"text": "most recent change was simultaneous with the current file\u00e2\u20ac \u2122 s . change .Successive u \u00e2\u20ac \u2122 s move further back in time .The only . commands for which u is ineffective are cd , u , q , w and D .", "label": "", "metadata": {}, "score": "75.47403"}
{"text": "PRIMITIVE FUNCTIONS . call ( symbol ) .Move to state symbol and continue input file processing from . that state .Function returns whatever the symbol state\u00e2\u20ac \u2122 s ter- .minating return statement returned . check_namerules ( ) .Try to resolve start state from namerules rules .", "label": "", "metadata": {}, "score": "75.54758"}
{"text": "i \\ text Insert text , which has each embedded newline preceded by a . backslash .q [ exit - code ] .Immediately quit the sed script without processing any more .input , except that if auto - print is not disabled the current . pattern space will be printed .", "label": "", "metadata": {}, "score": "75.58093"}
{"text": "It normally also calls the check_startrules ( ) . and check_namerules ( ) primitives which resolve the initial state from .the input file name or the data found from the begining of the input .file .Here is a sample start block which initializes two variables and .", "label": "", "metadata": {}, "score": "75.593025"}
{"text": "cuted for all input lines which match the inclusive range of lines .starting from the first address and continuing to the second address .Three things to note about address ranges : the syntax is addr1 , addr2 .( i.e. , the addresses are separated by a comma ) ; the line which addr1 . matched will always be accepted , even if addr2 selects an earlier line ; . and if addr2 is a regexp , it will not be tested against the line that addr1 matched .", "label": "", "metadata": {}, "score": "75.669395"}
{"text": "Append a line read from filename .Commands which accept address ranges .b label .Branch to label ; if label is omitted , branch to end of script .t label .If a s/// has done a successful substitution since the last .", "label": "", "metadata": {}, "score": "75.692505"}
{"text": "input , except that if auto - print is not disabled the current . pattern space will be printed .Q Immediately quit the sed script without processing any more .input .r filename .Append text read from filename .", "label": "", "metadata": {}, "score": "75.71219"}
{"text": "But despite all of the machinery the authors bring in , they do an excellent job of keeping the exposition clear .Most chapters contain sets of exercises , many of which have solutions in the back of the book , and each chapter ends with a section of historical and biographical notes .", "label": "", "metadata": {}, "score": "75.723785"}
{"text": "Special expressions BEGIN and END can be used in the place of expr .Expression BEGIN matches the beginning of the state , its block is .called when the state is entered .Expression END matches the end of .the state , its block is executed when states leaves the state .", "label": "", "metadata": {}, "score": "75.73548"}
{"text": "a. The select attribute of apply - regexp - templates is evaluated .If it is not a sequence of strings an error is raised .If it is a sequence each is processed separately and the result is .the sequence of results .", "label": "", "metadata": {}, "score": "75.82297"}
{"text": "However , one thing you can do only with IGNORECASE is turn case - sensitivity on or off dynamically for all the rules at once .Prior to version 3.0 of gawk , the value of IGNORECASE only affected regexp operations .", "label": "", "metadata": {}, "score": "76.05384"}
{"text": "This will work in any POSIX -compliant implementation of awk .Another method , specific to gawk , is to set the variable IGNORECASE to a non - zero value ( see section Built - in Variables ) .When IGNORECASE is not zero , all regexp and string operations ignore case .", "label": "", "metadata": {}, "score": "76.09448"}
{"text": "Text commands a/ text / .or a lines of text .Insert the text into the file after the range .Set dot .c i Same as a , but c replaces the text , while i inserts before the . range .", "label": "", "metadata": {}, "score": "76.1701"}
{"text": "A literal double - quote ( necessary for string constants only ) .You use this when you wish to write a string constant that contains a double - quote .Since the string is delimited by double - quotes , you need to escape the quote that is part of the string , in order to tell awk to keep processing the rest of the string .", "label": "", "metadata": {}, "score": "76.21744"}
{"text": "( Command window only . )X11 resources .Various attributes of sam can be set by giving values to X11 resources .for the class Sam .There are various ways to do this ; one is to have a .", "label": "", "metadata": {}, "score": "76.22941"}
{"text": "Only ctags accepts this op- .tion .-h , -H , --help .Print usage information .-V , --version .Print the current version of the program ( same as the version of .the emacs etags is shipped with ) .", "label": "", "metadata": {}, "score": "76.57716"}
{"text": "RE-1 : HTML Line Break .In an input string replace all line end characters ( which we may assume .This is one of the more common requests on XSL - list .It does not actually . require any regular expression support as it is searching for a single . character ( although one may possibly want to search for other line end .", "label": "", "metadata": {}, "score": "76.61659"}
{"text": "[ -o tagfile ] [ -r regexp ] .[ --append ] [ --backward - search ] [ --cxref ] [ --defines ] [ --forward - search ] .[ --typedefs ] [ --typedefs - and - c++ ] [ --update ] [ --no - warn ] [ --help ] .", "label": "", "metadata": {}, "score": "76.757774"}
{"text": "file .If the changes are in sequence , they are applied to the file .Successive insertions at the same address are catenated into a single .insertion composed of the several insertions in the order applied .The terminal .", "label": "", "metadata": {}, "score": "77.45497"}
{"text": "POSIX awk purposely leaves this case undefined .There are two choices .Strip the backslash out .This is what Unix awk and gawk both do .For example , \" a\\qc \" is the same as \" aqc \" .", "label": "", "metadata": {}, "score": "77.4993"}
{"text": "If you want to distribute this document sepa- rately from the collection , you can do so by adding a copy of the li- cense to the document , as described in section 6 of the license .A copy of the license is included in the gfdl(1 ) man page , and in the . section entitled \" GNU Free Documentation License \" in the Emacs manual .", "label": "", "metadata": {}, "score": "77.52248"}
{"text": "Only ctags accepts this option .-w , --no - warn .Suppress warning messages about duplicate entries .The etags . program does not check for duplicate entries , so this option is . not allowed with it .-x , --cxref .", "label": "", "metadata": {}, "score": "77.67377"}
{"text": "XSLT ( or Xquery ) context .Whilst the extended function definition possibilities in XPath 2 may , in .principle , mean that it would be possible to add such functionality to .Xpath , I think that it is a useful distinction in XSLT that should be . preserved that the principle node creation mechanism is via XSLT , with .", "label": "", "metadata": {}, "score": "77.87851"}
{"text": "effect of the + or - is reversed .It is an error for a compound address to represent a malformed . substring .Some useful idioms : a1 + - ( a1 ) selects the line containing .the end ( beginning ) of a1 .", "label": "", "metadata": {}, "score": "78.00963"}
{"text": "-u , --update .Update tag entries for files specified on command line , leaving .tag entries for other files in place .Currently , this is imple- .mented by deleting the existing entries for the given files and .", "label": "", "metadata": {}, "score": "78.03864"}
{"text": "not concentrate on the regexp syntax but rather on the possibilities for .making structured replacements .This is the classic \" up translation \" task . of moving from unstructured ( or insufficiently structured ) data to . structured matkup .", "label": "", "metadata": {}, "score": "78.431305"}
{"text": "Set the current file to the first file named in the list that sam also has in its menu .shell sense ) generated by the shell command .Same as b , except that file names not in the menu are entered .", "label": "", "metadata": {}, "score": "78.65481"}
{"text": "use extended regular expressions in the script .-s , --separate .consider files as separate rather than as a single continuous .long stream .-u , --unbuffered . load minimal amounts of data from the input files and flush the .", "label": "", "metadata": {}, "score": "78.90701"}
{"text": "All . remaining arguments are names of input files ; if no input files are .specified , then the standard input is read .E - mail bug reports to : bonzini@gnu.org .Be sure to include the word .\u00e2\u20ac\u02dc\u00e2\u20ac\u02dcsed\u00e2\u20ac \u2122 \u00e2\u20ac \u2122 somewhere in the \u00e2\u20ac\u02dc\u00e2\u20ac\u02dcSubject : \u00e2\u20ac \u2122 \u00e2\u20ac \u2122 field .", "label": "", "metadata": {}, "score": "78.91751"}
{"text": "All . remaining arguments are names of input files ; if no input files are .specified , then the standard input is read .E - mail bug reports to : bonzini@gnu.org .Be sure to include the word .\u00e2\u20ac\u02dc\u00e2\u20ac\u02dcsed\u00e2\u20ac \u2122 \u00e2\u20ac \u2122 somewhere in the \u00e2\u20ac\u02dc\u00e2\u20ac\u02dcSubject : \u00e2\u20ac \u2122 \u00e2\u20ac \u2122 field .", "label": "", "metadata": {}, "score": "78.91751"}
{"text": "All . remaining arguments are names of input files ; if no input files are .specified , then the standard input is read .E - mail bug reports to : bonzini@gnu.org .Be sure to include the word .\u00e2\u20ac\u02dc\u00e2\u20ac\u02dcsed\u00e2\u20ac \u2122 \u00e2\u20ac \u2122 somewhere in the \u00e2\u20ac\u02dc\u00e2\u20ac\u02dcSubject : \u00e2\u20ac \u2122 \u00e2\u20ac \u2122 field .", "label": "", "metadata": {}, "score": "78.91751"}
{"text": "this variable is undefined when used in action blocks to refer .the data before the block\u00e2\u20ac \u2122 s regular expression .$ B an alias for $ \u00e2\u20ac \u00e2 \u20ac \u02dc argv list of input file names filename .name of the current input file program name of the program ( usually states ) version program version string .", "label": "", "metadata": {}, "score": "78.92485"}
{"text": "Case is significant by default because IGNORECASE ( like most variables ) is initialized to zero .In general , you can not use IGNORECASE to make certain rules case - insensitive and other rules case - sensitive , because there is no way to set IGNORECASE just for the pattern of a particular rule .", "label": "", "metadata": {}, "score": "79.15219"}
{"text": "In both + and - forms , if a2 is a line or character address with a .missing number , the number defaults to 1 .If a1 is missing , is . substituted .If both a1 and a2 are present and distinguishable , + may . be elided .", "label": "", "metadata": {}, "score": "79.22673"}
{"text": "Convert argument to a floating point number . getenv ( str ) .Get value of environment variable str .Returns an empty string .if variable var is undefined . int ( any ) .Convert argument to an integer number . length ( item , ... ) .", "label": "", "metadata": {}, "score": "79.66195"}
{"text": "This is the default .behavior ; invoking sam with the -d ( no download ) option provides access . to the command language only .Each file may have zero or more windows open .Each window is . equivalent and is updated simultaneously with changes in other windows .", "label": "", "metadata": {}, "score": "79.8835"}
{"text": "If no s/// has done a successful substitution since the last .input line was read and since the last t or T command , then .branch to label ; if label is omitted , branch to end of script .", "label": "", "metadata": {}, "score": "79.94598"}
{"text": "If no s/// has done a successful substitution since the last .input line was read and since the last t or T command , then .branch to label ; if label is omitted , branch to end of script .", "label": "", "metadata": {}, "score": "79.94598"}
{"text": "the range are substituted .m a1 t a1 Move the range to after a1 ( m ) , or copy it ( t ) .Set dot .Display commands p Print the text in the range .Set dot .", "label": "", "metadata": {}, "score": "80.04805"}
{"text": "trailing delimiters may be elided , with multiple elisions then . representing null strings , but the first delimiter must always be . present .In any delimited text , newline may not appear literally ; \\n . may be typed for newline ; and \\/ quotes the delimiter , here Backslash . is otherwise interpreted literally , except in s commands .", "label": "", "metadata": {}, "score": "80.09689"}
{"text": "pression regexp as item separator . sprintf ( fmt , ... ) .Format arguments according to fmt and return result as a . string . strcmp ( str1 , str2 ) .Perform a case - sensitive comparision for strings str1 and str2 .", "label": "", "metadata": {}, "score": "80.29176"}
{"text": "sam [ option ... ] [ files ] sam -r machine sam.save B [ -nnnn ] file ... .DESCRIPTION .Sam is a multi - file editor .It modifies a local copy of an external . file .The copy is here called a file .", "label": "", "metadata": {}, "score": "80.539185"}
{"text": "delivered through the MessageLabs Virus Scanning Service .For further .Star Internet for details on the Virus Scanning Service . etags .NAME .etags , ctags - generate tag file for Emacs , vi .SYNOPSIS .etags [ -aCDGImRVh ] [ -i file ] [ -l language ] .", "label": "", "metadata": {}, "score": "80.541885"}
{"text": "Each window has an independent value of dot , . indicated by a highlighted substring on the display .Dot may be in a . region not within the window .There is usually a \u00e2\u20ac\u02dccurrent window\u00e2\u20ac \u2122 , . marked with a dark border , to which typed text and editing commands . apply .", "label": "", "metadata": {}, "score": "80.672424"}
{"text": "Interval expressions were not traditionally available in awk .As part of the POSIX standard they were added , to make awk and egrep consistent with each other .If either ' --posix ' or ' --re - interval ' are specified ( see section Command Line Options ) , then interval expressions are allowed in regexps .", "label": "", "metadata": {}, "score": "80.81519"}
{"text": "From the action blocks , states can perform state transitions ; .it can move to another state from which the processing is continued .State transitions are recorded so states can return to the calling .state once the current state has finished .", "label": "", "metadata": {}, "score": "80.84628"}
{"text": "For each file whose menu entry matches the regular expression , . make that the current file and run the command .If the .expression is omitted , the command is run in every file .Same as X , but for files that do not match the regular .", "label": "", "metadata": {}, "score": "80.974045"}
{"text": "Beginning with version 3.0 of gawk , the equivalences between upper - case and lower - case characters are based on the ISO-8859 - 1 ( ISO Latin-1 ) character set .This character set is a superset of the traditional 128 ASCII characters , that also provides a number of characters suitable for use with European languages .", "label": "", "metadata": {}, "score": "81.25434"}
{"text": "window as for the new menu selection .close Delete the window .In the last window of a file , close is . equivalent to a D for the file .write Equivalent to a w for the file .Selecting a file from the list makes the .", "label": "", "metadata": {}, "score": "81.3324"}
{"text": "the file is assumed to contain C code and the processing is started .from state called c .If none of the start rules . matched , the name of the input file is matched with the namerules .If . the name ends to suffix c or C , we go to state c .", "label": "", "metadata": {}, "score": "81.660355"}
{"text": "Those that may not are marked with a below .If a command . takes an address and none is supplied , dot is used .The sole exception . is the w command , which defaults to 0,$ .In the description , \u00e2\u20ac\u02dcrange\u00e2\u20ac \u2122 . is used to represent whatever address is supplied .", "label": "", "metadata": {}, "score": "81.75023"}
{"text": "command reads a line from the file .This is a GNU extension .Commands which accept address ranges .b label .Branch to label ; if label is omitted , branch to end of script .t label .If a s/// has done a successful substitution since the last .", "label": "", "metadata": {}, "score": "81.88467"}
{"text": "Case is always significant in compatibility mode .The input contains four ' a ' characters .What will the output be ?In other words , how many is \" one or more\"---will awk match two , three , or all four ' a ' characters ?", "label": "", "metadata": {}, "score": "81.90007"}
{"text": "Transliterate the characters in the pattern space which appear . in source to the corresponding character in dest .Addresses .Sed commands can be given with no addresses , in which case the command .will be executed for all input lines ; with one address , in which case .", "label": "", "metadata": {}, "score": "82.03649"}
{"text": "others who took part in the xsl - list discussions should feel free to . comment ( and disagree ! ) with any parts of this .It does propose some possible syntax for this functionality but this is . just a draft ; the main aim of the note is to put forward some use cases and . requirements .", "label": "", "metadata": {}, "score": "82.08478"}
{"text": "If dot is thereby unchanged , it is . set to .+1 and printed .Grouping and multiple changes .Commands .within the braces must appear on separate lines ( no backslashes are . required between commands ) .Semantically , an opening brace is like a .", "label": "", "metadata": {}, "score": "82.08807"}
{"text": "list ( any , ... ) .Create a new list which contains items any , ... panic ( any , ... ) .Report a non - recoverable error and exit with status 1 . Func- . tion never returns . print ( any , ... ) .", "label": "", "metadata": {}, "score": "82.11134"}
{"text": "input .r filename .Append text read from filename .R filename .Append a line read from filename .Commands which accept address ranges .b label .Branch to label ; if label is omitted , branch to end of script .", "label": "", "metadata": {}, "score": "82.41717"}
{"text": "input .r filename .Append text read from filename .R filename .Append a line read from filename .Commands which accept address ranges .b label .Branch to label ; if label is omitted , branch to end of script .", "label": "", "metadata": {}, "score": "82.41717"}
{"text": "match , starting at the beginning of the file , of the regular expression .( The peculiar properties of a last line without a newline are .temporarily undefined . )All files always have a current substring , . called dot , that is the default address .", "label": "", "metadata": {}, "score": "82.732925"}
{"text": "The format is : .\u00e2\u20ac\u00e2\u20ac \u2122 or blank . indicating the file is modified or clean , - or + indicating the file is unread or has been read ( in the .or blank . indicating the current file , . a blank , . and the file name .", "label": "", "metadata": {}, "score": "82.82935"}
{"text": "general HTML as it appears in the wild , arbitrarily complicated \" tag . soup \" parsing heuristics as implemented in the browsers would be . needed .However this appears to be a very common requirement often .generated by storing HTML fragments as strings in a database .", "label": "", "metadata": {}, "score": "82.87925"}
{"text": "parenthised expression in the regexp of the template . template , . will be \" aaabb \" current - match()[1 ] will be \" aaa \" and . current - match()[2 ] will be \" bb \" . subexpressions should be numbered but perl semantics should be . followed ( as schema explicitly tries to be perl like in its regexp . semantics ) . . .", "label": "", "metadata": {}, "score": "83.0894"}
{"text": "In strict POSIX mode ( see section Command Line Options ) , ' . 'does not match the NUL character , which is a character with all bits equal to zero .Otherwise , NUL is just another character .Other versions of awk may not be able to match the NUL character .", "label": "", "metadata": {}, "score": "83.15002"}
{"text": "output version information and exit .If no -e , --expression , -f , or --file option is given , then the first .non - option argument is taken as the sed script to interpret .All . remaining arguments are names of input files ; if no input files are .", "label": "", "metadata": {}, "score": "83.2426"}
{"text": "last mouse button hit .The button 3 menu controls window operations .The top of the menu .provides the following operators , each of which uses one or more .cursors to prompt for selection of a window or sweeping of a rectangle .", "label": "", "metadata": {}, "score": "83.355545"}
{"text": "a1 , a2 The substring from the beginning of a1 to the end of a2 .If a1 .is missing , 0 is substituted .If a2 is missing , $ is . substituted .a1 ; a2 Like a1 , a2 , but with a2 evaluated at the end of , and dot set to , a1 .", "label": "", "metadata": {}, "score": "83.50331"}
{"text": "expression .Compound Addresses .In the following , a1 and a2 are addresses .a1 + a2 The address a2 evaluated starting at the end of a1 .a1 - a2 The address a2 evaluated looking in the reverse direction .", "label": "", "metadata": {}, "score": "83.61461"}
{"text": "--posix .Only POSIX regexps are supported , the GNU operators are not special ( e.g. , ' \\w ' matches a literal ' w ' ) .Interval expressions are allowed . --traditional .Traditional Unix awk regexps are matched .", "label": "", "metadata": {}, "score": "83.646286"}
{"text": "editing commands apply\u00e2\u20ac\"whereupon its menu entry is printed .The . options are -d Do not download the terminal part of sam .Editing will be done .with the command language only , as in ed ( 1 ) .-r machine .", "label": "", "metadata": {}, "score": "83.72397"}
{"text": "branch to label ; if label is omitted , branch to end of script .T label .If no s/// has done a successful substitution since the last .input line was read and since the last t or T command , then .", "label": "", "metadata": {}, "score": "83.804955"}
{"text": "branch to label ; if label is omitted , branch to end of script .T label .If no s/// has done a successful substitution since the last .input line was read and since the last t or T command , then .", "label": "", "metadata": {}, "score": "83.804955"}
{"text": "w filename .Write the current pattern space to filename .W filename .Write the first line of the current pattern space to filename .y/ source / dest / .Transliterate the characters in the pattern space which appear . in source to the corresponding character in dest .", "label": "", "metadata": {}, "score": "83.896866"}
{"text": "w filename .Write the current pattern space to filename .W filename .Write the first line of the current pattern space to filename .y/ source / dest / .Transliterate the characters in the pattern space which appear . in source to the corresponding character in dest .", "label": "", "metadata": {}, "score": "83.896866"}
{"text": "command .Commands within the braces are executed sequentially , but . changes made by one command are not visible to other commands ( see the .next paragraph ) .Braces may be nested arbitrarily .When a command makes a number of changes to a file , as in x / re / c / text/ , .", "label": "", "metadata": {}, "score": "84.09084"}
{"text": "The various command line options ( see section Command Line Options ) control how gawk interprets characters in regexps .No options .In the default case , gawk provide all the facilities of POSIX regexps and the GNU regexp operators described above .", "label": "", "metadata": {}, "score": "84.09819"}
{"text": "Sed commands can be given with no addresses , in which case the command .will be executed for all input lines ; with one address , in which case .the command will only be executed for input lines which match that . address ; or with two addresses , in which case the command will be .", "label": "", "metadata": {}, "score": "84.11684"}
{"text": "Sed commands can be given with no addresses , in which case the command .will be executed for all input lines ; with one address , in which case .the command will only be executed for input lines which match that . address ; or with two addresses , in which case the command will be .", "label": "", "metadata": {}, "score": "84.11684"}
{"text": "Sed commands can be given with no addresses , in which case the command .will be executed for all input lines ; with one address , in which case .the command will only be executed for input lines which match that . address ; or with two addresses , in which case the command will be .", "label": "", "metadata": {}, "score": "84.11684"}
{"text": "w filename .Write the current pattern space to filename .W filename .Write the first line of the current pattern space to filename .This is a GNU extension .y/ source / dest / .Transliterate the characters in the pattern space which appear . in source to the corresponding character in dest .", "label": "", "metadata": {}, "score": "84.28955"}
{"text": "r filename .Replace the text in the range by the contents of the named . external file .Set dot .w filename .Write the range ( default 0,$ ) to the named external file .Set the file name and print the resulting menu entry .", "label": "", "metadata": {}, "score": "84.35027"}
{"text": "Postscript , Python , Prolog , Scheme and most assembler - like syntaxes .Both forms read the files specified on the command line , and write a . tag table ( defaults : TAGS for etags , tags for ctags ) in the current . working directory .", "label": "", "metadata": {}, "score": "84.544624"}
{"text": "dot .If dot is the null string , the text in the snarf buffer is . used .The snarf buffer is unaffected .X11 window .The exchange of a large amount of selected text is . truncated to the size of Sam\u00e2\u20ac \u2122 s internal snarf buffer ( currently .", "label": "", "metadata": {}, "score": "84.756065"}
{"text": "NAME . sed - manual page for sed version 4.1.4 .SYNOPSIS .DESCRIPTION .Sed is a stream editor .A stream editor is used to perform basic text . transformations on an input stream ( a file or input from a pipeline ) .", "label": "", "metadata": {}, "score": "84.87685"}
{"text": "long stream .-u , --unbuffered . load minimal amounts of data from the input files and flush the .output buffers more often --help display this help and exit --version .output version information and exit .If no -e , --expression , -f , or --file option is given , then the first .", "label": "", "metadata": {}, "score": "85.775215"}
{"text": "long stream .-u , --unbuffered . load minimal amounts of data from the input files and flush the .output buffers more often --help display this help and exit --version .output version information and exit .If no -e , --expression , -f , or --file option is given , then the first .", "label": "", "metadata": {}, "score": "85.775215"}
{"text": "long stream .-u , --unbuffered . load minimal amounts of data from the input files and flush the .output buffers more often --help display this help and exit --version .output version information and exit .If no -e , --expression , -f , or --file option is given , then the first .", "label": "", "metadata": {}, "score": "85.775215"}
{"text": "For complete portability , do not use a backslash before any character not listed in the table above .It turns out that historically , such characters were taken literally ( d.c . ) .However , the POSIX standard indicates that they should be treated as real metacharacters , and this is what gawk does .", "label": "", "metadata": {}, "score": "85.80481"}
{"text": "Automata ; 5 .Deciphering delay ; 6 .Bifix codes ; 7 .Circular codes ; 8 .Factorizations of free monoids ; 9 .Unambiguous monoids of relations ; 10 .Synchronization ; 11 .Groups of codes ; 12 .", "label": "", "metadata": {}, "score": "86.32588"}
{"text": "If .no windows are open on the file , the user is prompted to open one . according as zero , one , or more windows are open on the file .A .further mark appears on the file in the current window and a single .", "label": "", "metadata": {}, "score": "86.47388"}
{"text": "If the range is explicit , set dot to the range .If sam is . downloaded , the resulting dot is selected on the screen ; . otherwise it is printed .If no address is specified ( the .command is a newline ) dot is extended in either direction to .", "label": "", "metadata": {}, "score": "86.48462"}
{"text": "( such as ed ) , sed works by making only one pass over the input(s ) , and . is consequently more efficient .But it is sed \u00e2\u20ac \u2122 s ability to filter text . in a pipeline which particularly distinguishes it from other types of .", "label": "", "metadata": {}, "score": "86.52022"}
{"text": "( such as ed ) , sed works by making only one pass over the input(s ) , and . is consequently more efficient .But it is sed \u00e2\u20ac \u2122 s ability to filter text . in a pipeline which particularly distinguishes it from other types of .", "label": "", "metadata": {}, "score": "86.52022"}
{"text": "( such as ed ) , sed works by making only one pass over the input(s ) , and . is consequently more efficient .But it is sed \u00e2\u20ac \u2122 s ability to filter text . in a pipeline which particularly distinguishes it from other types of .", "label": "", "metadata": {}, "score": "86.52022"}
{"text": "( such as ed ) , sed works by making only one pass over the input(s ) , and . is consequently more efficient .But it is sed \u00e2\u20ac \u2122 s ability to filter text . in a pipeline which particularly distinguishes it from other types of .", "label": "", "metadata": {}, "score": "86.52022"}
{"text": "Darren Glass is an Associate Professor of Mathematics at Gettysburg College whose research interests include algebraic geometry , Galois theory , and cryptography .He can be reached at dglass@gettysburg.edu .Preface ; 1 .Preliminaries ; 2 .Codes ; 3 .", "label": "", "metadata": {}, "score": "86.62123"}
{"text": "After selecting the window . to copy with button 1 , sweep out the window for the copy . reshape .Change the size and location of a window .First click button 3 . in the window to be changed ( gunsight cursor ) .", "label": "", "metadata": {}, "score": "86.858185"}
{"text": "In addition to the usual X11 toolkit resources , the scrollForwardR . resource says where the right button ( button 3 ) scrolls forward or . backward in the file .Abnormal termination .If sam terminates other than by a q command ( by hangup , deleting its .", "label": "", "metadata": {}, "score": "86.98502"}
{"text": "Commands typed in the .command window apply to the current open file\u00e2\u20ac\"the file in the most .recently current window .Manipulating text .Typed characters replace the current selection ( dot ) in the current .window .Backspace deletes the previous character .", "label": "", "metadata": {}, "score": "87.044754"}
{"text": "sed .NAME . sed - manual page for sed version 4.1.3 .SYNOPSIS .DESCRIPTION .Sed is a stream editor .A stream editor is used to perform basic text . transformations on an input stream ( a file or input from a pipeline ) .", "label": "", "metadata": {}, "score": "87.22509"}
{"text": "or F , the initial state is fortran .If both start and name rules failed to resolve the start state , states .just copies its input to output unmodified .The start state can also be specified from the command line with option -s , --state .", "label": "", "metadata": {}, "score": "87.3082"}
{"text": "( sets dot to ) everything typed since the last mouse hit .Button 1 changes selection .Pointing to a non - current window with . button 1 makes it current ; within the current window , button 1 selects . text , thus setting dot .", "label": "", "metadata": {}, "score": "87.35797"}
{"text": "If gawk is in compatibility mode ( see section Command Line Options ) , character classes and interval expressions are not available in regular expressions .The next section discusses the GNU -specific regexp operators , and provides more detail concerning how command line options affect the way gawk interprets the characters in regular expressions .", "label": "", "metadata": {}, "score": "87.42169"}
{"text": "NAME . sed - stream editor for filtering and transforming text .SYNOPSIS .DESCRIPTION .Sed is a stream editor .A stream editor is used to perform basic text . transformations on an input stream ( a file or input from a pipeline ) .", "label": "", "metadata": {}, "score": "87.76695"}
{"text": "\u00e2\u20ac\u02dc emacs \u00e2\u20ac \u2122 entry in info ; GNU Emacs Manual , Richard Stallman .cxref(1 ) , emacs(1 ) , vgrind(1 ) , vi(1 ) .COPYING .Copyright ( c ) 1999 , 2001 Free Software Foundation , Inc. Permission is granted to copy , distribute and/or modify this document under the terms of the GNU Free Documentation License , Version 1.1 or any later version published by the Free Software Foundation ; with no Invariant Sections , with no Front - Cover Texts , and no Back - Cover Texts .", "label": "", "metadata": {}, "score": "88.37779"}
{"text": "named by the corresponding symbol .For example , the following start . and name rules can distinguish C and Fortran files : . namerules . startrules . /- [ cC ] -/ c ; .If these rules are used with the previously shown start block , states .", "label": "", "metadata": {}, "score": "89.06874"}
{"text": "OPTIONS .Define variable var to have string value val .Command line .definitions overwrite variable definitions found from the con- .fig file .Read state definitions from file file .As a default , states . tries to read state definitions from file states.st in the cur- .", "label": "", "metadata": {}, "score": "89.177"}
{"text": "output of \u00e2\u20ac\u02dc\u00e2\u20ac\u02dcsed --version\u00e2\u20ac \u2122 \u00e2\u20ac \u2122 in the body of your report if at all possi- .ble .COPYRIGHT .Copyright \u00c2 \u00a9 2003 Free Software Foundation , Inc.This is free software ; see the source for copying conditions .", "label": "", "metadata": {}, "score": "90.34421"}
{"text": "output of \u00e2\u20ac\u02dc\u00e2\u20ac\u02dcsed --version\u00e2\u20ac \u2122 \u00e2\u20ac \u2122 in the body of your report if at all . possible .COPYRIGHT .Copyright \u00c2 \u00a9 2009 Free Software Foundation , Inc.This is free software ; see the source for copying conditions .", "label": "", "metadata": {}, "score": "90.35368"}
{"text": "shell - command .Run the shell command .Change working directory .If no directory is specified , $ HOME . is used ., if the shell command is omitted the last shell command ( of any type ) is substituted .", "label": "", "metadata": {}, "score": "90.65031"}
{"text": "output of \u00e2\u20ac\u02dc\u00e2\u20ac\u02dcsed --version\u00e2\u20ac \u2122 \u00e2\u20ac \u2122 in the body of your report if at all . possible .COPYRIGHT .Copyright \u00c2 \u00a9 2003 Free Software Foundation , Inc.This is free software ; see the source for copying conditions .", "label": "", "metadata": {}, "score": "91.88516"}
{"text": "output of \u00e2\u20ac\u02dc\u00e2\u20ac\u02dcsed --version\u00e2\u20ac \u2122 \u00e2\u20ac \u2122 in the body of your report if at all . possible .COPYRIGHT .Copyright \u00c2 \u00a9 2003 Free Software Foundation , Inc.This is free software ; see the source for copying conditions .", "label": "", "metadata": {}, "score": "91.88516"}
{"text": "like constructs in C++ , Objective C , Java .-M , --no - members .Do not tag member variables .This is the default behavior . --packages - only .Only tag packages in Ada files .Explicit name of file for tag table ; overrides default TAGS or tags .", "label": "", "metadata": {}, "score": "91.97028"}
{"text": "Button 2 provides a menu of editing commands : cut Delete dot and save the deleted text in the snarf buffer .paste Replace the text in dot by the contents of the snarf buffer . snarf Save the text in dot in the snarf buffer .", "label": "", "metadata": {}, "score": "93.170166"}
{"text": "They are provided for compatibility with other GNU software .In other GNU software , the word boundary operator is ' \\b ' .However , that conflicts with the awk language 's definition of ' \\b ' as backspace , so gawk uses a different letter .", "label": "", "metadata": {}, "score": "94.68053"}
{"text": "The command window , created automatically when sam starts , is an . ordinary window except that text typed to it is interpreted as commands .for the editor rather than passive text , and text printed by editor .commands appears in it .", "label": "", "metadata": {}, "score": "97.70923"}
{"text": "Set the warning level to level .Possible values for level are : light light warnings ( default ) all all warnings .STATES PROGRAM FILES .States program files can contain on start block , startrules and namerules blocks to specify the initial state , state definitions and expressions .", "label": "", "metadata": {}, "score": "98.806366"}
{"text": "should give you access to the complete manual . sed version 4.1.3 January 2005 SED(1 ) NAME . sed - stream editor for filtering and transforming text .SYNOPSIS .DESCRIPTION .Sed is a stream editor .A stream editor is used to perform basic text . transformations on an input stream ( a file or input from a pipeline ) .", "label": "", "metadata": {}, "score": "100.364944"}
{"text": "NAME . states - awk alike text processing tool .SYNOPSIS .DESCRIPTION .States is an awk - alike text processing tool with some state machine . extensions .It is designed for program source code highlighting and to . similar tasks where state information helps input processing .", "label": "", "metadata": {}, "score": "103.70922"}
{"text": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ .", "label": "", "metadata": {}, "score": "115.27338"}
